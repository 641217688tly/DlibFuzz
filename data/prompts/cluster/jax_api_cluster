Which function apis or combinations of function api calls in TensorFlow (v{self.tf_ver}) and PyTorch (v{self.torch_ver}) have the exact same functionality as {self.api.full_name} in JAX (v{self.jax_ver})?
Note: "The same functionality" means that these APIs are responsible for performing exactly the same tasks. When these APIs have no return value, using these APIs to perform the same operations on inputs with the same structure or element values (such as tensors) should result in consistent changes to the original input. For example, PyTorch's torch.scatter_, TensorFlow's tensorflow.scatter_update, and JAX's jax.ops.index_update all have the functionality to update tensors, and when the tensors being updated and the update strategies are the same, the updated tensors should be consistent. When these APIs have return values, PyTorch's torch.nn.ReLU, TensorFlow's tensorflow.nn.relu or tensorflow.keras.layers.ReLU, and Jax's jax.nn.relu all produce the same output values when given the same input values.
Please output the function names or combinations of function names in PyTorch, TensorFlow, and JAX that meet the above conditions in JSON format, with an example shown below:
Example 1:
{
    "Pytorch" : {
        "1" : ["torch.tensor", "torch.nn.CrossEntropyLoss"],
    },
    "Tensorflow" : {
        "1" : ["tensorflow.keras.losses.CategoricalCrossentropy"], // tensorflow.keras.losses.CategoricalCrossentropy internal will automatically array into Tensorflow tensor, so there is no need to be used with tensorflow.constant
        "2" : ["tensorflow.constant", "tensorflow.nn.softmax_cross_entropy_with_logits"] // Before using tensorflow.nn.softmax_cross_entropy_with_logits, it needs to use tensorflow.constant to convert the input value into a tensor
    },
    "JAX" : {
        "1" : ["jax.numpy.array", "jax.nn.log_softmax", "jax.numpy.sum"] // Before using jax.nn.softmax_cross_entropy, it needs to use jax.numpy.array to convert the input value into a tensor. After using jax.nn.softmax_cross_entropy, it needs to use jax.numpy.sum to calculate the sum of the cross entropy loss
    }
}
Example 2:
{
    // Output an empty dictionary when no combination output from the TensorFlow API or Pytorch API has the same value as the JAX API
    "Pytorch" : {
        "1" : ["torch.tensor", "torch.nn.CrossEntropyLoss"],
    },
    "Tensorflow" : {},
    "JAX" : {}
}


