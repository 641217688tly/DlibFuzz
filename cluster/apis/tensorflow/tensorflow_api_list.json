{
  "1": {
    "name": "AggregationMethod",
    "module": "tf",
    "fullName": "tf.AggregationMethod",
    "signature": "()",
    "description": "A class listing aggregation methods used to combine gradients."
  },
  "2": {
    "name": "Assert",
    "module": "tf",
    "fullName": "tf.Assert",
    "signature": "(condition, data, summarize=None, name=None)",
    "description": "Asserts that the given condition is true."
  },
  "3": {
    "name": "CriticalSection",
    "module": "tf",
    "fullName": "tf.CriticalSection",
    "signature": "(name=None, shared_name=None, critical_section_def=None, import_scope=None)",
    "description": "Critical section."
  },
  "4": {
    "name": "DType",
    "module": "tf",
    "fullName": "tf.DType",
    "signature": "N/A",
    "description": "Represents the type of the elements in a `Tensor`."
  },
  "5": {
    "name": "DeviceSpec",
    "module": "tf",
    "fullName": "tf.DeviceSpec",
    "signature": "(job=None, replica=None, task=None, device_type=None, device_index=None)",
    "description": "Represents a (possibly partial) specification for a TensorFlow device."
  },
  "6": {
    "name": "GradientTape",
    "module": "tf",
    "fullName": "tf.GradientTape",
    "signature": "(persistent=False, watch_accessed_variables=True)",
    "description": "Record operations for automatic differentiation."
  },
  "7": {
    "name": "IndexedSlices",
    "module": "tf",
    "fullName": "tf.IndexedSlices",
    "signature": "(values, indices, dense_shape=None)",
    "description": "A sparse representation of a set of tensor slices at given indices."
  },
  "8": {
    "name": "IndexedSlicesSpec",
    "module": "tf",
    "fullName": "tf.IndexedSlicesSpec",
    "signature": "(shape=None, dtype=tf.float32, indices_dtype=tf.int64, dense_shape_dtype=None, indices_shape=None)",
    "description": "Type specification for a `tf.IndexedSlices`."
  },
  "9": {
    "name": "Module",
    "module": "tf",
    "fullName": "tf.Module",
    "signature": "(name=None)",
    "description": "Base neural network module class."
  },
  "10": {
    "name": "Operation",
    "module": "tf",
    "fullName": "tf.Operation",
    "signature": "(node_def, g, inputs=None, output_types=None, control_inputs=None, input_types=None, original_op=None, op_def=None)",
    "description": "Represents a graph node that performs computation on tensors."
  },
  "11": {
    "name": "OptionalSpec",
    "module": "tf",
    "fullName": "tf.OptionalSpec",
    "signature": "(element_spec)",
    "description": "Type specification for `tf.experimental.Optional`."
  },
  "12": {
    "name": "RaggedTensor",
    "module": "tf",
    "fullName": "tf.RaggedTensor",
    "signature": "(values, row_partition, internal=False)",
    "description": "Represents a ragged tensor."
  },
  "13": {
    "name": "RaggedTensorSpec",
    "module": "tf",
    "fullName": "tf.RaggedTensorSpec",
    "signature": "(shape=None, dtype=tf.float32, ragged_rank=None, row_splits_dtype=tf.int64, flat_values_spec=None)",
    "description": "Type specification for a `tf.RaggedTensor`."
  },
  "14": {
    "name": "RegisterGradient",
    "module": "tf",
    "fullName": "tf.RegisterGradient",
    "signature": "(op_type)",
    "description": "A decorator for registering the gradient function for an op type."
  },
  "15": {
    "name": "SparseTensor",
    "module": "tf",
    "fullName": "tf.SparseTensor",
    "signature": "(indices, values, dense_shape)",
    "description": "Represents a sparse tensor."
  },
  "16": {
    "name": "SparseTensorSpec",
    "module": "tf",
    "fullName": "tf.SparseTensorSpec",
    "signature": "(shape=None, dtype=tf.float32)",
    "description": "Type specification for a `tf.sparse.SparseTensor`."
  },
  "17": {
    "name": "Tensor",
    "module": "tf",
    "fullName": "tf.Tensor",
    "signature": "(op, value_index, dtype)",
    "description": "A `tf.Tensor` represents a multidimensional array of elements."
  },
  "18": {
    "name": "TensorArray",
    "module": "tf",
    "fullName": "tf.TensorArray",
    "signature": "(dtype, size=None, dynamic_size=None, clear_after_read=None, tensor_array_name=None, handle=None, flow=None, infer_shape=True, element_shape=None, colocate_with_first_write_call=True, name=None)",
    "description": "Class wrapping dynamic-sized, per-time-step, write-once Tensor arrays."
  },
  "19": {
    "name": "TensorArraySpec",
    "module": "tf",
    "fullName": "tf.TensorArraySpec",
    "signature": "(element_shape=None, dtype=tf.float32, dynamic_size=False, infer_shape=True)",
    "description": "Type specification for a `tf.TensorArray`."
  },
  "20": {
    "name": "TensorShape",
    "module": "tf",
    "fullName": "tf.TensorShape",
    "signature": "(dims)",
    "description": "Represents the shape of a `Tensor`."
  },
  "21": {
    "name": "TensorSpec",
    "module": "tf",
    "fullName": "tf.TensorSpec",
    "signature": "(shape, dtype=tf.float32, name=None)",
    "description": "Describes a tf.Tensor."
  },
  "22": {
    "name": "TypeSpec",
    "module": "tf",
    "fullName": "tf.TypeSpec",
    "signature": "()",
    "description": "Specifies a TensorFlow value type."
  },
  "23": {
    "name": "UnconnectedGradients",
    "module": "tf",
    "fullName": "tf.UnconnectedGradients",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "Controls how gradient computation behaves when y does not depend on x."
  },
  "24": {
    "name": "Variable",
    "module": "tf",
    "fullName": "tf.Variable",
    "signature": "(*args, **kwargs)",
    "description": "See the [variable guide](https://tensorflow.org/guide/variable)."
  },
  "25": {
    "name": "VariableAggregation",
    "module": "tf",
    "fullName": "tf.VariableAggregation",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "Indicates how a distributed variable will be aggregated."
  },
  "26": {
    "name": "VariableSynchronization",
    "module": "tf",
    "fullName": "tf.VariableSynchronization",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "Indicates when a distributed variable will be synced."
  },
  "27": {
    "name": "_LazyLoader",
    "module": "tf",
    "fullName": "tf._LazyLoader",
    "signature": "(local_name, parent_module_globals, name, warning=None)",
    "description": "Lazily import a module, mainly to avoid pulling in large dependencies."
  },
  "28": {
    "name": "_running_from_pip_package",
    "module": "tf",
    "fullName": "tf._running_from_pip_package",
    "signature": "()",
    "description": "No description available."
  },
  "29": {
    "name": "abs",
    "module": "tf",
    "fullName": "tf.abs",
    "signature": "(x, name=None)",
    "description": "Computes the absolute value of a tensor."
  },
  "30": {
    "name": "acos",
    "module": "tf",
    "fullName": "tf.acos",
    "signature": "(x, name=None)",
    "description": "Computes acos of x element-wise."
  },
  "31": {
    "name": "acosh",
    "module": "tf",
    "fullName": "tf.acosh",
    "signature": "(x, name=None)",
    "description": "Computes inverse hyperbolic cosine of x element-wise."
  },
  "32": {
    "name": "add",
    "module": "tf",
    "fullName": "tf.add",
    "signature": "(x, y, name=None)",
    "description": "Returns x + y element-wise."
  },
  "33": {
    "name": "add_n",
    "module": "tf",
    "fullName": "tf.add_n",
    "signature": "(inputs, name=None)",
    "description": "Adds all input tensors element-wise."
  },
  "34": {
    "name": "approx_top_k",
    "module": "tf",
    "fullName": "tf.approx_top_k",
    "signature": "(input, k, reduction_dimension=-1, recall_target=0.95, is_max_k=True, reduction_input_size_override=-1, aggregate_to_topk=True, name=None)",
    "description": "Returns min/max k values and their indices of the input operand in an approximate manner."
  },
  "35": {
    "name": "argmax",
    "module": "tf",
    "fullName": "tf.argmax",
    "signature": "(input, axis=None, output_type=tf.int64, name=None)",
    "description": "Returns the index with the largest value across axes of a tensor."
  },
  "36": {
    "name": "argmin",
    "module": "tf",
    "fullName": "tf.argmin",
    "signature": "(input, axis=None, output_type=tf.int64, name=None)",
    "description": "Returns the index with the smallest value across axes of a tensor."
  },
  "37": {
    "name": "argsort",
    "module": "tf",
    "fullName": "tf.argsort",
    "signature": "(values, axis=-1, direction='ASCENDING', stable=False, name=None)",
    "description": "Returns the indices of a tensor that give its sorted order along an axis."
  },
  "38": {
    "name": "as_dtype",
    "module": "tf",
    "fullName": "tf.as_dtype",
    "signature": "(type_value)",
    "description": "Converts the given `type_value` to a `DType`."
  },
  "39": {
    "name": "as_string",
    "module": "tf",
    "fullName": "tf.as_string",
    "signature": "(input, precision=-1, scientific=False, shortest=False, width=-1, fill='', name=None)",
    "description": "Converts each entry in the given tensor to strings."
  },
  "40": {
    "name": "asin",
    "module": "tf",
    "fullName": "tf.asin",
    "signature": "(x, name=None)",
    "description": "Computes the trignometric inverse sine of x element-wise."
  },
  "41": {
    "name": "asinh",
    "module": "tf",
    "fullName": "tf.asinh",
    "signature": "(x, name=None)",
    "description": "Computes inverse hyperbolic sine of x element-wise."
  },
  "42": {
    "name": "assert_equal",
    "module": "tf",
    "fullName": "tf.assert_equal",
    "signature": "(x, y, message=None, summarize=None, name=None)",
    "description": "Assert the condition `x == y` holds element-wise."
  },
  "43": {
    "name": "assert_greater",
    "module": "tf",
    "fullName": "tf.assert_greater",
    "signature": "(x, y, message=None, summarize=None, name=None)",
    "description": "Assert the condition `x > y` holds element-wise."
  },
  "44": {
    "name": "assert_less",
    "module": "tf",
    "fullName": "tf.assert_less",
    "signature": "(x, y, message=None, summarize=None, name=None)",
    "description": "Assert the condition `x < y` holds element-wise."
  },
  "45": {
    "name": "assert_rank",
    "module": "tf",
    "fullName": "tf.assert_rank",
    "signature": "(x, rank, message=None, name=None)",
    "description": "Assert that `x` has rank equal to `rank`."
  },
  "46": {
    "name": "atan",
    "module": "tf",
    "fullName": "tf.atan",
    "signature": "(x, name=None)",
    "description": "Computes the trignometric inverse tangent of x element-wise."
  },
  "47": {
    "name": "atan2",
    "module": "tf",
    "fullName": "tf.atan2",
    "signature": "(y, x, name=None)",
    "description": "Computes arctangent of `y/x` element-wise, respecting signs of the arguments."
  },
  "48": {
    "name": "atanh",
    "module": "tf",
    "fullName": "tf.atanh",
    "signature": "(x, name=None)",
    "description": "Computes inverse hyperbolic tangent of x element-wise."
  },
  "49": {
    "name": "batch_to_space",
    "module": "tf",
    "fullName": "tf.batch_to_space",
    "signature": "(input, block_shape, crops, name=None)",
    "description": "BatchToSpace for N-D tensors of type T."
  },
  "50": {
    "name": "bitcast",
    "module": "tf",
    "fullName": "tf.bitcast",
    "signature": "(input, type, name=None)",
    "description": "Bitcasts a tensor from one type to another without copying data."
  },
  "51": {
    "name": "boolean_mask",
    "module": "tf",
    "fullName": "tf.boolean_mask",
    "signature": "(tensor, mask, axis=None, name='boolean_mask')",
    "description": "Apply boolean mask to tensor."
  },
  "52": {
    "name": "broadcast_dynamic_shape",
    "module": "tf",
    "fullName": "tf.broadcast_dynamic_shape",
    "signature": "(shape_x, shape_y)",
    "description": "Computes the shape of a broadcast given symbolic shapes."
  },
  "53": {
    "name": "broadcast_static_shape",
    "module": "tf",
    "fullName": "tf.broadcast_static_shape",
    "signature": "(shape_x, shape_y)",
    "description": "Computes the shape of a broadcast given known shapes."
  },
  "54": {
    "name": "broadcast_to",
    "module": "tf",
    "fullName": "tf.broadcast_to",
    "signature": "(input, shape, name=None)",
    "description": "Broadcast an array for a compatible shape."
  },
  "55": {
    "name": "case",
    "module": "tf",
    "fullName": "tf.case",
    "signature": "(pred_fn_pairs, default=None, exclusive=False, strict=False, name='case')",
    "description": "Create a case operation."
  },
  "56": {
    "name": "cast",
    "module": "tf",
    "fullName": "tf.cast",
    "signature": "(x, dtype, name=None)",
    "description": "Casts a tensor to a new type."
  },
  "57": {
    "name": "clip_by_global_norm",
    "module": "tf",
    "fullName": "tf.clip_by_global_norm",
    "signature": "(t_list, clip_norm, use_norm=None, name=None)",
    "description": "Clips values of multiple tensors by the ratio of the sum of their norms."
  },
  "58": {
    "name": "clip_by_norm",
    "module": "tf",
    "fullName": "tf.clip_by_norm",
    "signature": "(t, clip_norm, axes=None, name=None)",
    "description": "Clips tensor values to a maximum L2-norm."
  },
  "59": {
    "name": "clip_by_value",
    "module": "tf",
    "fullName": "tf.clip_by_value",
    "signature": "(t, clip_value_min, clip_value_max, name=None)",
    "description": "Clips tensor values to a specified min and max."
  },
  "60": {
    "name": "complex",
    "module": "tf",
    "fullName": "tf.complex",
    "signature": "(real, imag, name=None)",
    "description": "Converts two real numbers to a complex number."
  },
  "61": {
    "name": "concat",
    "module": "tf",
    "fullName": "tf.concat",
    "signature": "(values, axis, name='concat')",
    "description": "Concatenates tensors along one dimension."
  },
  "62": {
    "name": "cond",
    "module": "tf",
    "fullName": "tf.cond",
    "signature": "(pred, true_fn=None, false_fn=None, name=None)",
    "description": "Return `true_fn()` if the predicate `pred` is true else `false_fn()`."
  },
  "63": {
    "name": "constant",
    "module": "tf",
    "fullName": "tf.constant",
    "signature": "(value, dtype=None, shape=None, name='Const')",
    "description": "Creates a constant tensor from a tensor-like object."
  },
  "64": {
    "name": "constant_initializer",
    "module": "tf",
    "fullName": "tf.constant_initializer",
    "signature": "(value=0)",
    "description": "Initializer that generates tensors with constant values."
  },
  "65": {
    "name": "control_dependencies",
    "module": "tf",
    "fullName": "tf.control_dependencies",
    "signature": "(control_inputs)",
    "description": "Wrapper for `Graph.control_dependencies()` using the default graph."
  },
  "66": {
    "name": "convert_to_tensor",
    "module": "tf",
    "fullName": "tf.convert_to_tensor",
    "signature": "(value, dtype=None, dtype_hint=None, name=None)",
    "description": "Converts the given `value` to a `Tensor`."
  },
  "67": {
    "name": "cos",
    "module": "tf",
    "fullName": "tf.cos",
    "signature": "(x, name=None)",
    "description": "Computes cos of x element-wise."
  },
  "68": {
    "name": "cosh",
    "module": "tf",
    "fullName": "tf.cosh",
    "signature": "(x, name=None)",
    "description": "Computes hyperbolic cosine of x element-wise."
  },
  "69": {
    "name": "cumsum",
    "module": "tf",
    "fullName": "tf.cumsum",
    "signature": "(x, axis=0, exclusive=False, reverse=False, name=None)",
    "description": "Compute the cumulative sum of the tensor `x` along `axis`."
  },
  "70": {
    "name": "custom_gradient",
    "module": "tf",
    "fullName": "tf.custom_gradient",
    "signature": "(f=None)",
    "description": "Decorator to define a function with a custom gradient."
  },
  "71": {
    "name": "device",
    "module": "tf",
    "fullName": "tf.device",
    "signature": "(device_name)",
    "description": "Specifies the device for ops created/executed in this context."
  },
  "72": {
    "name": "divide",
    "module": "tf",
    "fullName": "tf.divide",
    "signature": "(x, y, name=None)",
    "description": "Computes Python style division of `x` by `y`."
  },
  "73": {
    "name": "dynamic_partition",
    "module": "tf",
    "fullName": "tf.dynamic_partition",
    "signature": "(data, partitions, num_partitions, name=None)",
    "description": "Partitions `data` into `num_partitions` tensors using indices from `partitions`."
  },
  "74": {
    "name": "dynamic_stitch",
    "module": "tf",
    "fullName": "tf.dynamic_stitch",
    "signature": "(indices, data, name=None)",
    "description": "Interleave the values from the `data` tensors into a single tensor."
  },
  "75": {
    "name": "edit_distance",
    "module": "tf",
    "fullName": "tf.edit_distance",
    "signature": "(hypothesis, truth, normalize=True, name='edit_distance')",
    "description": "Computes the Levenshtein distance between sequences."
  },
  "76": {
    "name": "eig",
    "module": "tf",
    "fullName": "tf.eig",
    "signature": "(tensor, name=None)",
    "description": "Computes the eigen decomposition of a batch of matrices."
  },
  "77": {
    "name": "eigvals",
    "module": "tf",
    "fullName": "tf.eigvals",
    "signature": "(tensor, name=None)",
    "description": "Computes the eigenvalues of one or more matrices."
  },
  "78": {
    "name": "einsum",
    "module": "tf",
    "fullName": "tf.einsum",
    "signature": "(equation, *inputs, **kwargs)",
    "description": "Tensor contraction over specified indices and outer product."
  },
  "79": {
    "name": "ensure_shape",
    "module": "tf",
    "fullName": "tf.ensure_shape",
    "signature": "(x, shape, name=None)",
    "description": "Updates the shape of a tensor and checks at runtime that the shape holds."
  },
  "80": {
    "name": "equal",
    "module": "tf",
    "fullName": "tf.equal",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x == y) element-wise."
  },
  "81": {
    "name": "executing_eagerly",
    "module": "tf",
    "fullName": "tf.executing_eagerly",
    "signature": "()",
    "description": "Checks whether the current thread has eager execution enabled."
  },
  "82": {
    "name": "exp",
    "module": "tf",
    "fullName": "tf.exp",
    "signature": "(x, name=None)",
    "description": "Computes exponential of x element-wise.  \\\\(y = e^x\\\\)."
  },
  "83": {
    "name": "expand_dims",
    "module": "tf",
    "fullName": "tf.expand_dims",
    "signature": "(input, axis, name=None)",
    "description": "Returns a tensor with a length 1 axis inserted at index `axis`."
  },
  "84": {
    "name": "extract_volume_patches",
    "module": "tf",
    "fullName": "tf.extract_volume_patches",
    "signature": "(input, ksizes, strides, padding, name=None)",
    "description": "Extract `patches` from `input` and put them in the `\"depth\"` output dimension. 3D extension of `extract_image_patches`."
  },
  "85": {
    "name": "eye",
    "module": "tf",
    "fullName": "tf.eye",
    "signature": "(num_rows, num_columns=None, batch_shape=None, dtype=tf.float32, name=None)",
    "description": "Construct an identity matrix, or a batch of matrices."
  },
  "86": {
    "name": "fill",
    "module": "tf",
    "fullName": "tf.fill",
    "signature": "(dims, value, name=None)",
    "description": "Creates a tensor filled with a scalar value."
  },
  "87": {
    "name": "fingerprint",
    "module": "tf",
    "fullName": "tf.fingerprint",
    "signature": "(data, method='farmhash64', name=None)",
    "description": "Generates fingerprint values."
  },
  "88": {
    "name": "floor",
    "module": "tf",
    "fullName": "tf.floor",
    "signature": "(x, name=None)",
    "description": "Returns element-wise largest integer not greater than x."
  },
  "89": {
    "name": "gather_nd",
    "module": "tf",
    "fullName": "tf.gather_nd",
    "signature": "(params, indices, batch_dims=0, name=None)",
    "description": "Gather slices from `params` into a Tensor with shape specified by `indices`."
  },
  "90": {
    "name": "get_current_name_scope",
    "module": "tf",
    "fullName": "tf.get_current_name_scope",
    "signature": "()",
    "description": "Returns current full name scope specified by `tf.name_scope(...)`s."
  },
  "91": {
    "name": "get_logger",
    "module": "tf",
    "fullName": "tf.get_logger",
    "signature": "()",
    "description": "Return TF logger instance."
  },
  "92": {
    "name": "get_static_value",
    "module": "tf",
    "fullName": "tf.get_static_value",
    "signature": "(tensor, partial=False)",
    "description": "Returns the constant value of the given tensor, if efficiently calculable."
  },
  "93": {
    "name": "grad_pass_through",
    "module": "tf",
    "fullName": "tf.grad_pass_through",
    "signature": "(f)",
    "description": "Creates a grad-pass-through op with the forward behavior provided in f."
  },
  "94": {
    "name": "gradients",
    "module": "tf",
    "fullName": "tf.gradients",
    "signature": "(ys, xs, grad_ys=None, name='gradients', gate_gradients=False, aggregation_method=None, stop_gradients=None, unconnected_gradients=<UnconnectedGradients.NONE: 'none'>)",
    "description": "Constructs symbolic derivatives of sum of `ys` w.r.t. x in `xs`."
  },
  "95": {
    "name": "greater",
    "module": "tf",
    "fullName": "tf.greater",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x > y) element-wise."
  },
  "96": {
    "name": "greater_equal",
    "module": "tf",
    "fullName": "tf.greater_equal",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x >= y) element-wise."
  },
  "97": {
    "name": "group",
    "module": "tf",
    "fullName": "tf.group",
    "signature": "(*inputs, **kwargs)",
    "description": "Create an op that groups multiple operations."
  },
  "98": {
    "name": "hessians",
    "module": "tf",
    "fullName": "tf.hessians",
    "signature": "(ys, xs, gate_gradients=False, aggregation_method=None, name='hessians')",
    "description": "Constructs the Hessian of sum of `ys` with respect to `x` in `xs`."
  },
  "99": {
    "name": "histogram_fixed_width",
    "module": "tf",
    "fullName": "tf.histogram_fixed_width",
    "signature": "(values, value_range, nbins=100, dtype=tf.int32, name=None)",
    "description": "Return histogram of values."
  },
  "100": {
    "name": "histogram_fixed_width_bins",
    "module": "tf",
    "fullName": "tf.histogram_fixed_width_bins",
    "signature": "(values, value_range, nbins=100, dtype=tf.int32, name=None)",
    "description": "Bins the given values for use in a histogram."
  },
  "101": {
    "name": "identity",
    "module": "tf",
    "fullName": "tf.identity",
    "signature": "(input, name=None)",
    "description": "Return a Tensor with the same shape and contents as input."
  },
  "102": {
    "name": "identity_n",
    "module": "tf",
    "fullName": "tf.identity_n",
    "signature": "(input, name=None)",
    "description": "Returns a list of tensors with the same shapes and contents as the input"
  },
  "103": {
    "name": "init_scope",
    "module": "tf",
    "fullName": "tf.init_scope",
    "signature": "()",
    "description": "A context manager that lifts ops out of control-flow scopes and function-building graphs."
  },
  "104": {
    "name": "inside_function",
    "module": "tf",
    "fullName": "tf.inside_function",
    "signature": "()",
    "description": "Indicates whether the caller code is executing inside a `tf.function`."
  },
  "105": {
    "name": "is_tensor",
    "module": "tf",
    "fullName": "tf.is_tensor",
    "signature": "(x)",
    "description": "Checks whether `x` is a TF-native type that can be passed to many TF ops."
  },
  "106": {
    "name": "less",
    "module": "tf",
    "fullName": "tf.less",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x < y) element-wise."
  },
  "107": {
    "name": "less_equal",
    "module": "tf",
    "fullName": "tf.less_equal",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x <= y) element-wise."
  },
  "108": {
    "name": "linspace",
    "module": "tf",
    "fullName": "tf.linspace",
    "signature": "(start, stop, num, name=None, axis=0)",
    "description": "Generates evenly-spaced values in an interval along a given axis."
  },
  "109": {
    "name": "load_library",
    "module": "tf",
    "fullName": "tf.load_library",
    "signature": "(library_location)",
    "description": "Loads a TensorFlow plugin."
  },
  "110": {
    "name": "load_op_library",
    "module": "tf",
    "fullName": "tf.load_op_library",
    "signature": "(library_filename)",
    "description": "Loads a TensorFlow plugin, containing custom ops and kernels."
  },
  "111": {
    "name": "logical_and",
    "module": "tf",
    "fullName": "tf.logical_and",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of x AND y element-wise."
  },
  "112": {
    "name": "logical_not",
    "module": "tf",
    "fullName": "tf.logical_not",
    "signature": "(x, name=None)",
    "description": "Returns the truth value of `NOT x` element-wise."
  },
  "113": {
    "name": "logical_or",
    "module": "tf",
    "fullName": "tf.logical_or",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of x OR y element-wise."
  },
  "114": {
    "name": "make_ndarray",
    "module": "tf",
    "fullName": "tf.make_ndarray",
    "signature": "(tensor)",
    "description": "Create a numpy ndarray from a tensor."
  },
  "115": {
    "name": "make_tensor_proto",
    "module": "tf",
    "fullName": "tf.make_tensor_proto",
    "signature": "(values, dtype=None, shape=None, verify_shape=False, allow_broadcast=False)",
    "description": "Create a TensorProto."
  },
  "116": {
    "name": "matmul",
    "module": "tf",
    "fullName": "tf.matmul",
    "signature": "(a, b, transpose_a=False, transpose_b=False, adjoint_a=False, adjoint_b=False, a_is_sparse=False, b_is_sparse=False, output_type=None, name=None)",
    "description": "Multiplies matrix `a` by matrix `b`, producing `a` * `b`."
  },
  "117": {
    "name": "matrix_square_root",
    "module": "tf",
    "fullName": "tf.matrix_square_root",
    "signature": "(input, name=None)",
    "description": "Computes the matrix square root of one or more square matrices:"
  },
  "118": {
    "name": "maximum",
    "module": "tf",
    "fullName": "tf.maximum",
    "signature": "(x, y, name=None)",
    "description": "Returns the max of x and y (i.e. x > y ? x : y) element-wise."
  },
  "119": {
    "name": "meshgrid",
    "module": "tf",
    "fullName": "tf.meshgrid",
    "signature": "(*args, **kwargs)",
    "description": "Broadcasts parameters for evaluation on an N-D grid."
  },
  "120": {
    "name": "minimum",
    "module": "tf",
    "fullName": "tf.minimum",
    "signature": "(x, y, name=None)",
    "description": "Returns the min of x and y (i.e. x < y ? x : y) element-wise."
  },
  "121": {
    "name": "multiply",
    "module": "tf",
    "fullName": "tf.multiply",
    "signature": "(x, y, name=None)",
    "description": "Returns an element-wise x * y."
  },
  "122": {
    "name": "name_scope",
    "module": "tf",
    "fullName": "tf.name_scope",
    "signature": "(name)",
    "description": "A context manager for use when defining a Python op."
  },
  "123": {
    "name": "negative",
    "module": "tf",
    "fullName": "tf.negative",
    "signature": "(x, name=None)",
    "description": "Computes numerical negative value element-wise."
  },
  "124": {
    "name": "no_gradient",
    "module": "tf",
    "fullName": "tf.no_gradient",
    "signature": "(op_type)",
    "description": "Specifies that ops of type `op_type` is not differentiable."
  },
  "125": {
    "name": "no_op",
    "module": "tf",
    "fullName": "tf.no_op",
    "signature": "(name=None)",
    "description": "Does nothing. Only useful as a placeholder for control edges."
  },
  "126": {
    "name": "nondifferentiable_batch_function",
    "module": "tf",
    "fullName": "tf.nondifferentiable_batch_function",
    "signature": "(num_batch_threads, max_batch_size, batch_timeout_micros, allowed_batch_sizes=None, max_enqueued_batches=10, autograph=True, enable_large_batch_splitting=True)",
    "description": "Batches the computation done by the decorated function."
  },
  "127": {
    "name": "norm",
    "module": "tf",
    "fullName": "tf.norm",
    "signature": "(tensor, ord='euclidean', axis=None, keepdims=None, name=None)",
    "description": "Computes the norm of vectors, matrices, and tensors."
  },
  "128": {
    "name": "not_equal",
    "module": "tf",
    "fullName": "tf.not_equal",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x != y) element-wise."
  },
  "129": {
    "name": "numpy_function",
    "module": "tf",
    "fullName": "tf.numpy_function",
    "signature": "(func, inp, Tout, stateful=True, name=None)",
    "description": "Wraps a python function and uses it as a TensorFlow op."
  },
  "130": {
    "name": "one_hot",
    "module": "tf",
    "fullName": "tf.one_hot",
    "signature": "(indices, depth, on_value=None, off_value=None, axis=None, dtype=None, name=None)",
    "description": "Returns a one-hot tensor."
  },
  "131": {
    "name": "ones",
    "module": "tf",
    "fullName": "tf.ones",
    "signature": "(shape, dtype=tf.float32, name=None)",
    "description": "Creates a tensor with all elements set to one (1)."
  },
  "132": {
    "name": "ones_initializer",
    "module": "tf",
    "fullName": "tf.ones_initializer",
    "signature": "()",
    "description": "Initializer that generates tensors initialized to 1."
  },
  "133": {
    "name": "ones_like",
    "module": "tf",
    "fullName": "tf.ones_like",
    "signature": "(input, dtype=None, name=None)",
    "description": "Creates a tensor of all ones that has the same shape as the input."
  },
  "134": {
    "name": "pad",
    "module": "tf",
    "fullName": "tf.pad",
    "signature": "(tensor, paddings, mode='CONSTANT', constant_values=0, name=None)",
    "description": "Pads a tensor."
  },
  "135": {
    "name": "parallel_stack",
    "module": "tf",
    "fullName": "tf.parallel_stack",
    "signature": "(values, name='parallel_stack')",
    "description": "Stacks a list of rank-`R` tensors into one rank-`(R+1)` tensor in parallel."
  },
  "136": {
    "name": "pow",
    "module": "tf",
    "fullName": "tf.pow",
    "signature": "(x, y, name=None)",
    "description": "Computes the power of one value to another."
  },
  "137": {
    "name": "print",
    "module": "tf",
    "fullName": "tf.print",
    "signature": "(*inputs, **kwargs)",
    "description": "Print the specified inputs."
  },
  "138": {
    "name": "py_function",
    "module": "tf",
    "fullName": "tf.py_function",
    "signature": "(func, inp, Tout, name=None)",
    "description": "Wraps a python function into a TensorFlow op that executes it eagerly."
  },
  "139": {
    "name": "random_index_shuffle",
    "module": "tf",
    "fullName": "tf.random_index_shuffle",
    "signature": "(index, seed, max_index, name=None)",
    "description": "Outputs the position of `value` in a permutation of [0, ..., max_index]."
  },
  "140": {
    "name": "random_normal_initializer",
    "module": "tf",
    "fullName": "tf.random_normal_initializer",
    "signature": "(mean=0.0, stddev=0.05, seed=None)",
    "description": "Initializer that generates tensors with a normal distribution."
  },
  "141": {
    "name": "random_uniform_initializer",
    "module": "tf",
    "fullName": "tf.random_uniform_initializer",
    "signature": "(minval=-0.05, maxval=0.05, seed=None)",
    "description": "Initializer that generates tensors with a uniform distribution."
  },
  "142": {
    "name": "range",
    "module": "tf",
    "fullName": "tf.range",
    "signature": "(start, limit=None, delta=1, dtype=None, name='range')",
    "description": "Creates a sequence of numbers."
  },
  "143": {
    "name": "rank",
    "module": "tf",
    "fullName": "tf.rank",
    "signature": "(input, name=None)",
    "description": "Returns the rank of a tensor."
  },
  "144": {
    "name": "realdiv",
    "module": "tf",
    "fullName": "tf.realdiv",
    "signature": "(x, y, name=None)",
    "description": "Returns x / y element-wise for real types."
  },
  "145": {
    "name": "recompute_grad",
    "module": "tf",
    "fullName": "tf.recompute_grad",
    "signature": "(f)",
    "description": "Defines a function as a recompute-checkpoint for the tape auto-diff."
  },
  "146": {
    "name": "reduce_all",
    "module": "tf",
    "fullName": "tf.reduce_all",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes `tf.math.logical_and` of elements across dimensions of a tensor."
  },
  "147": {
    "name": "reduce_any",
    "module": "tf",
    "fullName": "tf.reduce_any",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes `tf.math.logical_or` of elements across dimensions of a tensor."
  },
  "148": {
    "name": "reduce_logsumexp",
    "module": "tf",
    "fullName": "tf.reduce_logsumexp",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes log(sum(exp(elements across dimensions of a tensor)))."
  },
  "149": {
    "name": "reduce_max",
    "module": "tf",
    "fullName": "tf.reduce_max",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes `tf.math.maximum` of elements across dimensions of a tensor."
  },
  "150": {
    "name": "reduce_mean",
    "module": "tf",
    "fullName": "tf.reduce_mean",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes the mean of elements across dimensions of a tensor."
  },
  "151": {
    "name": "reduce_min",
    "module": "tf",
    "fullName": "tf.reduce_min",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes the `tf.math.minimum` of elements across dimensions of a tensor."
  },
  "152": {
    "name": "reduce_prod",
    "module": "tf",
    "fullName": "tf.reduce_prod",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes `tf.math.multiply` of elements across dimensions of a tensor."
  },
  "153": {
    "name": "reduce_sum",
    "module": "tf",
    "fullName": "tf.reduce_sum",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes the sum of elements across dimensions of a tensor."
  },
  "154": {
    "name": "register_tensor_conversion_function",
    "module": "tf",
    "fullName": "tf.register_tensor_conversion_function",
    "signature": "(base_type, conversion_func, priority=100)",
    "description": "Registers a function for converting objects of `base_type` to `Tensor`."
  },
  "155": {
    "name": "repeat",
    "module": "tf",
    "fullName": "tf.repeat",
    "signature": "(input, repeats, axis=None, name=None)",
    "description": "Repeat elements of `input`."
  },
  "156": {
    "name": "required_space_to_batch_paddings",
    "module": "tf",
    "fullName": "tf.required_space_to_batch_paddings",
    "signature": "(input_shape, block_shape, base_paddings=None, name=None)",
    "description": "Calculate padding required to make block_shape divide input_shape."
  },
  "157": {
    "name": "reshape",
    "module": "tf",
    "fullName": "tf.reshape",
    "signature": "(tensor, shape, name=None)",
    "description": "Reshapes a tensor."
  },
  "158": {
    "name": "reverse",
    "module": "tf",
    "fullName": "tf.reverse",
    "signature": "(tensor, axis, name=None)",
    "description": "Reverses specific dimensions of a tensor."
  },
  "159": {
    "name": "reverse_sequence",
    "module": "tf",
    "fullName": "tf.reverse_sequence",
    "signature": "(input, seq_lengths, seq_axis=None, batch_axis=None, name=None)",
    "description": "Reverses variable length slices."
  },
  "160": {
    "name": "roll",
    "module": "tf",
    "fullName": "tf.roll",
    "signature": "(input, shift, axis, name=None)",
    "description": "Rolls the elements of a tensor along an axis."
  },
  "161": {
    "name": "round",
    "module": "tf",
    "fullName": "tf.round",
    "signature": "(x, name=None)",
    "description": "Rounds the values of a tensor to the nearest integer, element-wise."
  },
  "162": {
    "name": "saturate_cast",
    "module": "tf",
    "fullName": "tf.saturate_cast",
    "signature": "(value, dtype, name=None)",
    "description": "Performs a safe saturating cast of `value` to `dtype`."
  },
  "163": {
    "name": "scalar_mul",
    "module": "tf",
    "fullName": "tf.scalar_mul",
    "signature": "(scalar, x, name=None)",
    "description": "Multiplies a scalar times a `Tensor` or `IndexedSlices` object."
  },
  "164": {
    "name": "scatter_nd",
    "module": "tf",
    "fullName": "tf.scatter_nd",
    "signature": "(indices, updates, shape, name=None)",
    "description": "Scatters `updates` into a tensor of shape `shape` according to `indices`."
  },
  "165": {
    "name": "searchsorted",
    "module": "tf",
    "fullName": "tf.searchsorted",
    "signature": "(sorted_sequence, values, side='left', out_type=tf.int32, name=None)",
    "description": "Searches for where a value would go in a sorted sequence."
  },
  "166": {
    "name": "sequence_mask",
    "module": "tf",
    "fullName": "tf.sequence_mask",
    "signature": "(lengths, maxlen=None, dtype=tf.bool, name=None)",
    "description": "Returns a mask tensor representing the first N positions of each cell."
  },
  "167": {
    "name": "shape",
    "module": "tf",
    "fullName": "tf.shape",
    "signature": "(input, out_type=tf.int32, name=None)",
    "description": "Returns a tensor containing the shape of the input tensor."
  },
  "168": {
    "name": "shape_n",
    "module": "tf",
    "fullName": "tf.shape_n",
    "signature": "(input, out_type=tf.int32, name=None)",
    "description": "Returns shape of tensors."
  },
  "169": {
    "name": "sigmoid",
    "module": "tf",
    "fullName": "tf.sigmoid",
    "signature": "(x, name=None)",
    "description": "Computes sigmoid of `x` element-wise."
  },
  "170": {
    "name": "sign",
    "module": "tf",
    "fullName": "tf.sign",
    "signature": "(x, name=None)",
    "description": "Returns an element-wise indication of the sign of a number."
  },
  "171": {
    "name": "sin",
    "module": "tf",
    "fullName": "tf.sin",
    "signature": "(x, name=None)",
    "description": "Computes sine of x element-wise."
  },
  "172": {
    "name": "sinh",
    "module": "tf",
    "fullName": "tf.sinh",
    "signature": "(x, name=None)",
    "description": "Computes hyperbolic sine of x element-wise."
  },
  "173": {
    "name": "size",
    "module": "tf",
    "fullName": "tf.size",
    "signature": "(input, out_type=tf.int32, name=None)",
    "description": "Returns the size of a tensor."
  },
  "174": {
    "name": "slice",
    "module": "tf",
    "fullName": "tf.slice",
    "signature": "(input_, begin, size, name=None)",
    "description": "Extracts a slice from a tensor."
  },
  "175": {
    "name": "sort",
    "module": "tf",
    "fullName": "tf.sort",
    "signature": "(values, axis=-1, direction='ASCENDING', name=None)",
    "description": "Sorts a tensor."
  },
  "176": {
    "name": "space_to_batch",
    "module": "tf",
    "fullName": "tf.space_to_batch",
    "signature": "(input, block_shape, paddings, name=None)",
    "description": "SpaceToBatch for N-D tensors of type T."
  },
  "177": {
    "name": "space_to_batch_nd",
    "module": "tf",
    "fullName": "tf.space_to_batch_nd",
    "signature": "(input, block_shape, paddings, name=None)",
    "description": "SpaceToBatch for N-D tensors of type T."
  },
  "178": {
    "name": "split",
    "module": "tf",
    "fullName": "tf.split",
    "signature": "(value, num_or_size_splits, axis=0, num=None, name='split')",
    "description": "Splits a tensor `value` into a list of sub tensors."
  },
  "179": {
    "name": "sqrt",
    "module": "tf",
    "fullName": "tf.sqrt",
    "signature": "(x, name=None)",
    "description": "Computes element-wise square root of the input tensor."
  },
  "180": {
    "name": "square",
    "module": "tf",
    "fullName": "tf.square",
    "signature": "(x, name=None)",
    "description": "Computes square of x element-wise."
  },
  "181": {
    "name": "stack",
    "module": "tf",
    "fullName": "tf.stack",
    "signature": "(values, axis=0, name='stack')",
    "description": "Stacks a list of rank-`R` tensors into one rank-`(R+1)` tensor."
  },
  "182": {
    "name": "stop_gradient",
    "module": "tf",
    "fullName": "tf.stop_gradient",
    "signature": "(input, name=None)",
    "description": "Stops gradient computation."
  },
  "183": {
    "name": "strided_slice",
    "module": "tf",
    "fullName": "tf.strided_slice",
    "signature": "(input_, begin, end, strides=None, begin_mask=0, end_mask=0, ellipsis_mask=0, new_axis_mask=0, shrink_axis_mask=0, var=None, name=None)",
    "description": "Extracts a strided slice of a tensor (generalized Python array indexing)."
  },
  "184": {
    "name": "subtract",
    "module": "tf",
    "fullName": "tf.subtract",
    "signature": "(x, y, name=None)",
    "description": "Returns x - y element-wise."
  },
  "185": {
    "name": "switch_case",
    "module": "tf",
    "fullName": "tf.switch_case",
    "signature": "(branch_index, branch_fns, default=None, name='switch_case')",
    "description": "Create a switch/case operation, i.e. an integer-indexed conditional."
  },
  "186": {
    "name": "tan",
    "module": "tf",
    "fullName": "tf.tan",
    "signature": "(x, name=None)",
    "description": "Computes tan of x element-wise."
  },
  "187": {
    "name": "tanh",
    "module": "tf",
    "fullName": "tf.tanh",
    "signature": "(x, name=None)",
    "description": "Computes hyperbolic tangent of `x` element-wise."
  },
  "188": {
    "name": "tensor_scatter_nd_add",
    "module": "tf",
    "fullName": "tf.tensor_scatter_nd_add",
    "signature": "(tensor, indices, updates, name=None)",
    "description": "Adds sparse `updates` to an existing tensor according to `indices`."
  },
  "189": {
    "name": "tensor_scatter_nd_max",
    "module": "tf",
    "fullName": "tf.tensor_scatter_nd_max",
    "signature": "(tensor, indices, updates, name=None)",
    "description": "Apply a sparse update to a tensor taking the element-wise maximum."
  },
  "190": {
    "name": "tensor_scatter_nd_min",
    "module": "tf",
    "fullName": "tf.tensor_scatter_nd_min",
    "signature": "(tensor, indices, updates, name=None)",
    "description": "TODO: add doc."
  },
  "191": {
    "name": "tensor_scatter_nd_sub",
    "module": "tf",
    "fullName": "tf.tensor_scatter_nd_sub",
    "signature": "(tensor, indices, updates, name=None)",
    "description": "Subtracts sparse `updates` from an existing tensor according to `indices`."
  },
  "192": {
    "name": "tensor_scatter_nd_update",
    "module": "tf",
    "fullName": "tf.tensor_scatter_nd_update",
    "signature": "(tensor, indices, updates, name=None)",
    "description": "Scatter `updates` into an existing tensor according to `indices`."
  },
  "193": {
    "name": "tensordot",
    "module": "tf",
    "fullName": "tf.tensordot",
    "signature": "(a, b, axes, name=None)",
    "description": "Tensor contraction of a and b along specified axes and outer product."
  },
  "194": {
    "name": "tile",
    "module": "tf",
    "fullName": "tf.tile",
    "signature": "(input, multiples, name=None)",
    "description": "Constructs a tensor by tiling a given tensor."
  },
  "195": {
    "name": "timestamp",
    "module": "tf",
    "fullName": "tf.timestamp",
    "signature": "(name=None)",
    "description": "Provides the time since epoch in seconds."
  },
  "196": {
    "name": "transpose",
    "module": "tf",
    "fullName": "tf.transpose",
    "signature": "(a, perm=None, conjugate=False, name='transpose')",
    "description": "Transposes `a`, where `a` is a Tensor."
  },
  "197": {
    "name": "truediv",
    "module": "tf",
    "fullName": "tf.truediv",
    "signature": "(x, y, name=None)",
    "description": "Divides x / y elementwise (using Python 3 division operator semantics)."
  },
  "198": {
    "name": "truncatediv",
    "module": "tf",
    "fullName": "tf.truncatediv",
    "signature": "(x, y, name=None)",
    "description": "Returns x / y element-wise for integer types."
  },
  "199": {
    "name": "truncatemod",
    "module": "tf",
    "fullName": "tf.truncatemod",
    "signature": "(x, y, name=None)",
    "description": "Returns element-wise remainder of division. This emulates C semantics in that"
  },
  "200": {
    "name": "tuple",
    "module": "tf",
    "fullName": "tf.tuple",
    "signature": "(tensors, control_inputs=None, name=None)",
    "description": "Groups tensors together."
  },
  "201": {
    "name": "type_spec_from_value",
    "module": "tf",
    "fullName": "tf.type_spec_from_value",
    "signature": "(value) -> tensorflow.python.framework.type_spec.TypeSpec",
    "description": "Returns a `tf.TypeSpec` that represents the given `value`."
  },
  "202": {
    "name": "unique",
    "module": "tf",
    "fullName": "tf.unique",
    "signature": "(x, out_idx=tf.int32, name=None)",
    "description": "Finds unique elements in a 1-D tensor."
  },
  "203": {
    "name": "unique_with_counts",
    "module": "tf",
    "fullName": "tf.unique_with_counts",
    "signature": "(x, out_idx=tf.int32, name=None)",
    "description": "Finds unique elements in a 1-D tensor."
  },
  "204": {
    "name": "unravel_index",
    "module": "tf",
    "fullName": "tf.unravel_index",
    "signature": "(indices, dims, name=None)",
    "description": "Converts an array of flat indices into a tuple of coordinate arrays."
  },
  "205": {
    "name": "unstack",
    "module": "tf",
    "fullName": "tf.unstack",
    "signature": "(value, num=None, axis=0, name='unstack')",
    "description": "Unpacks the given dimension of a rank-`R` tensor into rank-`(R-1)` tensors."
  },
  "206": {
    "name": "variable_creator_scope",
    "module": "tf",
    "fullName": "tf.variable_creator_scope",
    "signature": "(variable_creator)",
    "description": "Scope which defines a variable creation function to be used by variable()."
  },
  "207": {
    "name": "vectorized_map",
    "module": "tf",
    "fullName": "tf.vectorized_map",
    "signature": "(fn, elems, fallback_to_while_loop=True, warn=True)",
    "description": "Parallel map on the list of tensors unpacked from `elems` on dimension 0."
  },
  "208": {
    "name": "where",
    "module": "tf",
    "fullName": "tf.where",
    "signature": "(condition, x=None, y=None, name=None)",
    "description": "Returns the indices of non-zero elements, or multiplexes `x` and `y`."
  },
  "209": {
    "name": "zeros",
    "module": "tf",
    "fullName": "tf.zeros",
    "signature": "(shape, dtype=tf.float32, name=None)",
    "description": "Creates a tensor with all elements set to zero."
  },
  "210": {
    "name": "zeros_initializer",
    "module": "tf",
    "fullName": "tf.zeros_initializer",
    "signature": "()",
    "description": "Initializer that generates tensors initialized to 0."
  },
  "211": {
    "name": "zeros_like",
    "module": "tf",
    "fullName": "tf.zeros_like",
    "signature": "(input, dtype=None, name=None)",
    "description": "Creates a tensor with all elements set to zero."
  },
  "212": {
    "name": "jit_scope",
    "module": "tf.xla.experimental",
    "fullName": "tf.xla.experimental.jit_scope",
    "signature": "(compile_ops=True, separate_compiled_gradients=False)",
    "description": "Enable or disable JIT compilation of operators within the scope."
  },
  "213": {
    "name": "Callable",
    "module": "tf.types.experimental",
    "fullName": "tf.types.experimental.Callable",
    "signature": "()",
    "description": "Base class for TF callables like those created by tf.function."
  },
  "214": {
    "name": "ConcreteFunction",
    "module": "tf.types.experimental",
    "fullName": "tf.types.experimental.ConcreteFunction",
    "signature": "()",
    "description": "Base class for graph functions."
  },
  "215": {
    "name": "GenericFunction",
    "module": "tf.types.experimental",
    "fullName": "tf.types.experimental.GenericFunction",
    "signature": "()",
    "description": "Base class for polymorphic graph functions."
  },
  "216": {
    "name": "SupportsTracingProtocol",
    "module": "tf.types.experimental",
    "fullName": "tf.types.experimental.SupportsTracingProtocol",
    "signature": "(*args, **kwargs)",
    "description": "A protocol allowing custom classes to control tf.function retracing."
  },
  "217": {
    "name": "TraceType",
    "module": "tf.types.experimental",
    "fullName": "tf.types.experimental.TraceType",
    "signature": "()",
    "description": "Represents the type of object(s) for tf.function tracing purposes."
  },
  "218": {
    "name": "TracingContext",
    "module": "tf.types.experimental",
    "fullName": "tf.types.experimental.TracingContext",
    "signature": "()",
    "description": "Contains information scoped to the tracing of multiple objects."
  },
  "219": {
    "name": "Mirrored",
    "module": "tf.types.experimental.distributed",
    "fullName": "tf.types.experimental.distributed.Mirrored",
    "signature": "()",
    "description": "Holds a distributed value: a map from replica id to synchronized values."
  },
  "220": {
    "name": "PerReplica",
    "module": "tf.types.experimental.distributed",
    "fullName": "tf.types.experimental.distributed.PerReplica",
    "signature": "()",
    "description": "Holds a distributed value: a map from replica id to unsynchronized values."
  },
  "221": {
    "name": "BytesList",
    "module": "tf.train",
    "fullName": "tf.train.BytesList",
    "signature": "N/A",
    "description": "Used in `tf.train.Example` protos. Holds a list of byte-strings."
  },
  "222": {
    "name": "Checkpoint",
    "module": "tf.train",
    "fullName": "tf.train.Checkpoint",
    "signature": "(root=None, **kwargs)",
    "description": "Manages saving/restoring trackable values to disk."
  },
  "223": {
    "name": "CheckpointManager",
    "module": "tf.train",
    "fullName": "tf.train.CheckpointManager",
    "signature": "(checkpoint, directory, max_to_keep, keep_checkpoint_every_n_hours=None, checkpoint_name='ckpt', step_counter=None, checkpoint_interval=None, init_fn=None)",
    "description": "Manages multiple checkpoints by keeping some and deleting unneeded ones."
  },
  "224": {
    "name": "CheckpointOptions",
    "module": "tf.train",
    "fullName": "tf.train.CheckpointOptions",
    "signature": "(experimental_io_device=None, experimental_enable_async_checkpoint=False)",
    "description": "Options for constructing a Checkpoint."
  },
  "225": {
    "name": "ClusterDef",
    "module": "tf.train",
    "fullName": "tf.train.ClusterDef",
    "signature": "N/A",
    "description": "A ProtocolMessage"
  },
  "226": {
    "name": "ClusterSpec",
    "module": "tf.train",
    "fullName": "tf.train.ClusterSpec",
    "signature": "(cluster)",
    "description": "Represents a cluster as a set of \"tasks\", organized into \"jobs\"."
  },
  "227": {
    "name": "Coordinator",
    "module": "tf.train",
    "fullName": "tf.train.Coordinator",
    "signature": "(clean_stop_exception_types=None)",
    "description": "A coordinator for threads."
  },
  "228": {
    "name": "Example",
    "module": "tf.train",
    "fullName": "tf.train.Example",
    "signature": "N/A",
    "description": "An `Example` is a standard proto storing data for training and inference."
  },
  "229": {
    "name": "ExponentialMovingAverage",
    "module": "tf.train",
    "fullName": "tf.train.ExponentialMovingAverage",
    "signature": "(decay, num_updates=None, zero_debias=False, name='ExponentialMovingAverage')",
    "description": "Maintains moving averages of variables by employing an exponential decay."
  },
  "230": {
    "name": "Feature",
    "module": "tf.train",
    "fullName": "tf.train.Feature",
    "signature": "N/A",
    "description": "Used in `tf.train.Example` protos. Contains a list of values."
  },
  "231": {
    "name": "FeatureList",
    "module": "tf.train",
    "fullName": "tf.train.FeatureList",
    "signature": "N/A",
    "description": "Mainly used as part of a `tf.train.SequenceExample`."
  },
  "232": {
    "name": "FeatureLists",
    "module": "tf.train",
    "fullName": "tf.train.FeatureLists",
    "signature": "N/A",
    "description": "Mainly used as part of a `tf.train.SequenceExample`."
  },
  "233": {
    "name": "Features",
    "module": "tf.train",
    "fullName": "tf.train.Features",
    "signature": "N/A",
    "description": "Used in `tf.train.Example` protos. Contains the mapping from keys to `Feature`."
  },
  "234": {
    "name": "FloatList",
    "module": "tf.train",
    "fullName": "tf.train.FloatList",
    "signature": "N/A",
    "description": "Used in `tf.train.Example` protos. Holds a list of floats."
  },
  "235": {
    "name": "Int64List",
    "module": "tf.train",
    "fullName": "tf.train.Int64List",
    "signature": "N/A",
    "description": "Used in `tf.train.Example` protos. Holds a list of Int64s."
  },
  "236": {
    "name": "JobDef",
    "module": "tf.train",
    "fullName": "tf.train.JobDef",
    "signature": "N/A",
    "description": "A ProtocolMessage"
  },
  "237": {
    "name": "SequenceExample",
    "module": "tf.train",
    "fullName": "tf.train.SequenceExample",
    "signature": "N/A",
    "description": "A `SequenceExample` represents a sequence of features and some context."
  },
  "238": {
    "name": "ServerDef",
    "module": "tf.train",
    "fullName": "tf.train.ServerDef",
    "signature": "N/A",
    "description": "A ProtocolMessage"
  },
  "239": {
    "name": "TrackableView",
    "module": "tf.train",
    "fullName": "tf.train.TrackableView",
    "signature": "(root)",
    "description": "Gathers and serializes a trackable view."
  },
  "240": {
    "name": "checkpoints_iterator",
    "module": "tf.train",
    "fullName": "tf.train.checkpoints_iterator",
    "signature": "(checkpoint_dir, min_interval_secs=0, timeout=None, timeout_fn=None)",
    "description": "Continuously yield new checkpoint files as they appear."
  },
  "241": {
    "name": "get_checkpoint_state",
    "module": "tf.train",
    "fullName": "tf.train.get_checkpoint_state",
    "signature": "(checkpoint_dir, latest_filename=None)",
    "description": "Returns CheckpointState proto from the \"checkpoint\" file."
  },
  "242": {
    "name": "latest_checkpoint",
    "module": "tf.train",
    "fullName": "tf.train.latest_checkpoint",
    "signature": "(checkpoint_dir, latest_filename=None)",
    "description": "Finds the filename of latest saved checkpoint file."
  },
  "243": {
    "name": "list_variables",
    "module": "tf.train",
    "fullName": "tf.train.list_variables",
    "signature": "(ckpt_dir_or_file)",
    "description": "Lists the checkpoint keys and shapes of variables in a checkpoint."
  },
  "244": {
    "name": "load_checkpoint",
    "module": "tf.train",
    "fullName": "tf.train.load_checkpoint",
    "signature": "(ckpt_dir_or_file)",
    "description": "Returns `CheckpointReader` for checkpoint found in `ckpt_dir_or_file`."
  },
  "245": {
    "name": "load_variable",
    "module": "tf.train",
    "fullName": "tf.train.load_variable",
    "signature": "(ckpt_dir_or_file, name)",
    "description": "Returns the tensor value of the given variable in the checkpoint."
  },
  "246": {
    "name": "PythonState",
    "module": "tf.train.experimental",
    "fullName": "tf.train.experimental.PythonState",
    "signature": "()",
    "description": "A mixin for putting Python state in an object-based checkpoint."
  },
  "247": {
    "name": "XLAOptions",
    "module": "tf.tpu",
    "fullName": "tf.tpu.XLAOptions",
    "signature": "(use_spmd_for_xla_partitioning=True, enable_xla_dynamic_padder=True)",
    "description": "XLA compilation options."
  },
  "248": {
    "name": "DeviceAssignment",
    "module": "tf.tpu.experimental",
    "fullName": "tf.tpu.experimental.DeviceAssignment",
    "signature": "(topology: tensorflow.python.tpu.topology.Topology, core_assignment: numpy.ndarray)",
    "description": "Mapping from logical cores in a computation to the physical TPU topology."
  },
  "249": {
    "name": "HardwareFeature",
    "module": "tf.tpu.experimental",
    "fullName": "tf.tpu.experimental.HardwareFeature",
    "signature": "(tpu_hardware_feature_proto)",
    "description": "class holds all the feature info about the TPU."
  },
  "250": {
    "name": "TPUSystemMetadata",
    "module": "tf.tpu.experimental",
    "fullName": "tf.tpu.experimental.TPUSystemMetadata",
    "signature": "(num_cores, num_hosts, num_of_cores_per_host, topology, devices)",
    "description": "Describes some metadata about the TPU system."
  },
  "251": {
    "name": "Topology",
    "module": "tf.tpu.experimental",
    "fullName": "tf.tpu.experimental.Topology",
    "signature": "(serialized=None, mesh_shape=None, device_coordinates=None)",
    "description": "Describes a set of TPU devices."
  },
  "252": {
    "name": "initialize_tpu_system",
    "module": "tf.tpu.experimental",
    "fullName": "tf.tpu.experimental.initialize_tpu_system",
    "signature": "(cluster_resolver=None)",
    "description": "Initialize the TPU devices."
  },
  "253": {
    "name": "shutdown_tpu_system",
    "module": "tf.tpu.experimental",
    "fullName": "tf.tpu.experimental.shutdown_tpu_system",
    "signature": "(cluster_resolver=None)",
    "description": "Shuts down the TPU devices."
  },
  "254": {
    "name": "Adagrad",
    "module": "tf.tpu.experimental.embedding",
    "fullName": "tf.tpu.experimental.embedding.Adagrad",
    "signature": "(learning_rate: Union[float, Callable[[], float]] = 0.001, initial_accumulator_value: float = 0.1, use_gradient_accumulation: bool = True, clip_weight_min: Optional[float] = None, clip_weight_max: Optional[float] = None, weight_decay_factor: Optional[float] = None, multiply_weight_decay_factor_by_learning_rate: bool = None, slot_variable_creation_fn: Optional[Callable[[~TableVariable, List[str], List[tensorflow.python.ops.init_ops_v2.Initializer]], Dict[str, ~TableVariable]]] = None, clipvalue: Union[Tuple[float, float], float, NoneType] = None)",
    "description": "Optimization parameters for Adagrad with TPU embeddings."
  },
  "255": {
    "name": "AdagradMomentum",
    "module": "tf.tpu.experimental.embedding",
    "fullName": "tf.tpu.experimental.embedding.AdagradMomentum",
    "signature": "(learning_rate: Union[float, Callable[[], float]] = 0.001, momentum: float = 0.0, use_nesterov: bool = False, exponent: float = 2, beta2: float = 1, epsilon: float = 1e-10, use_gradient_accumulation: bool = True, clip_weight_min: Optional[float] = None, clip_weight_max: Optional[float] = None, weight_decay_factor: Optional[float] = None, multiply_weight_decay_factor_by_learning_rate: bool = None, slot_variable_creation_fn: Optional[Callable[[~TableVariable, List[str], List[tensorflow.python.ops.init_ops_v2.Initializer]], Dict[str, ~TableVariable]]] = None, clipvalue: Union[Tuple[float, float], float, NoneType] = None)",
    "description": "Optimization parameters for Adagrad + Momentum with TPU embeddings."
  },
  "256": {
    "name": "Adam",
    "module": "tf.tpu.experimental.embedding",
    "fullName": "tf.tpu.experimental.embedding.Adam",
    "signature": "(learning_rate: Union[float, Callable[[], float]] = 0.001, beta_1: float = 0.9, beta_2: float = 0.999, epsilon: float = 1e-07, lazy_adam: bool = True, sum_inside_sqrt: bool = True, use_gradient_accumulation: bool = True, clip_weight_min: Optional[float] = None, clip_weight_max: Optional[float] = None, weight_decay_factor: Optional[float] = None, multiply_weight_decay_factor_by_learning_rate: bool = None, slot_variable_creation_fn: Optional[Callable[[~TableVariable, List[str], List[tensorflow.python.ops.init_ops_v2.Initializer]], Dict[str, ~TableVariable]]] = None, clipvalue: Union[Tuple[float, float], float, NoneType] = None)",
    "description": "Optimization parameters for Adam with TPU embeddings."
  },
  "257": {
    "name": "FTRL",
    "module": "tf.tpu.experimental.embedding",
    "fullName": "tf.tpu.experimental.embedding.FTRL",
    "signature": "(learning_rate: Union[float, Callable[[], float]] = 0.001, learning_rate_power: float = -0.5, l1_regularization_strength: float = 0.0, l2_regularization_strength: float = 0.0, beta: float = 0.0, initial_accumulator_value: float = 0.1, use_gradient_accumulation: bool = True, clip_weight_min: Optional[float] = None, clip_weight_max: Optional[float] = None, weight_decay_factor: Optional[float] = None, multiply_weight_decay_factor_by_learning_rate: bool = None, slot_variable_creation_fn: Optional[Callable[[~TableVariable, List[str], List[tensorflow.python.ops.init_ops_v2.Initializer]], Dict[str, ~TableVariable]]] = None, clipvalue: Union[Tuple[float, float], float, NoneType] = None, multiply_linear_by_learning_rate: bool = False, allow_zero_accumulator: bool = False)",
    "description": "Optimization parameters for FTRL with TPU embeddings."
  },
  "258": {
    "name": "FeatureConfig",
    "module": "tf.tpu.experimental.embedding",
    "fullName": "tf.tpu.experimental.embedding.FeatureConfig",
    "signature": "(table: tensorflow.python.tpu.tpu_embedding_v2_utils.TableConfig, max_sequence_length: int = 0, validate_weights_and_indices: bool = True, output_shape: Union[List[int], tensorflow.python.framework.tensor_shape.TensorShape, NoneType] = None, name: Optional[str] = None)",
    "description": "Configuration data for one embedding feature."
  },
  "259": {
    "name": "SGD",
    "module": "tf.tpu.experimental.embedding",
    "fullName": "tf.tpu.experimental.embedding.SGD",
    "signature": "(learning_rate: Union[float, Callable[[], float]] = 0.01, use_gradient_accumulation: bool = True, clip_weight_min: Optional[float] = None, clip_weight_max: Optional[float] = None, weight_decay_factor: Optional[float] = None, multiply_weight_decay_factor_by_learning_rate: bool = None, clipvalue: Union[Tuple[float, float], float, NoneType] = None)",
    "description": "Optimization parameters for stochastic gradient descent for TPU embeddings."
  },
  "260": {
    "name": "TPUEmbedding",
    "module": "tf.tpu.experimental.embedding",
    "fullName": "tf.tpu.experimental.embedding.TPUEmbedding",
    "signature": "(feature_config: Union[tensorflow.python.tpu.tpu_embedding_v2_utils.FeatureConfig, Iterable], optimizer: Optional[tensorflow.python.tpu.tpu_embedding_v2_utils._Optimizer], pipeline_execution_with_tensor_core: bool = False)",
    "description": "The TPUEmbedding mid level API."
  },
  "261": {
    "name": "TPUEmbeddingForServing",
    "module": "tf.tpu.experimental.embedding",
    "fullName": "tf.tpu.experimental.embedding.TPUEmbeddingForServing",
    "signature": "(feature_config: Union[tensorflow.python.tpu.tpu_embedding_v2_utils.FeatureConfig, Iterable], optimizer: Optional[tensorflow.python.tpu.tpu_embedding_v2_utils._Optimizer])",
    "description": "The TPUEmbedding mid level API running on CPU for serving."
  },
  "262": {
    "name": "TPUEmbeddingV0",
    "module": "tf.tpu.experimental.embedding",
    "fullName": "tf.tpu.experimental.embedding.TPUEmbeddingV0",
    "signature": "(feature_config: Union[tensorflow.python.tpu.tpu_embedding_v2_utils.FeatureConfig, Iterable], optimizer: Optional[tensorflow.python.tpu.tpu_embedding_v2_utils._Optimizer])",
    "description": "The TPUEmbedding mid level API running on TPU without Embedding accelerator."
  },
  "263": {
    "name": "TableConfig",
    "module": "tf.tpu.experimental.embedding",
    "fullName": "tf.tpu.experimental.embedding.TableConfig",
    "signature": "(vocabulary_size: int, dim: int, initializer: Optional[Callable[[Any], NoneType]] = None, optimizer: Optional[tensorflow.python.tpu.tpu_embedding_v2_utils._Optimizer] = None, combiner: str = 'mean', name: Optional[str] = None)",
    "description": "Configuration data for one embedding table."
  },
  "264": {
    "name": "serving_embedding_lookup",
    "module": "tf.tpu.experimental.embedding",
    "fullName": "tf.tpu.experimental.embedding.serving_embedding_lookup",
    "signature": "(inputs: Any, weights: Optional[Any], tables: Dict[tensorflow.python.tpu.tpu_embedding_v2_utils.TableConfig, tensorflow.python.ops.variables.Variable], feature_config: Union[tensorflow.python.tpu.tpu_embedding_v2_utils.FeatureConfig, Iterable]) -> Any",
    "description": "Apply standard lookup ops with `tf.tpu.experimental.embedding` configs."
  },
  "265": {
    "name": "TypeVar",
    "module": "tf.tools.docs.doc_controls",
    "fullName": "tf.tools.docs.doc_controls.TypeVar",
    "signature": "(name, *constraints, bound=None, covariant=False, contravariant=False)",
    "description": "Type variable."
  },
  "266": {
    "name": "do_not_doc_in_subclasses",
    "module": "tf.tools.docs.doc_controls",
    "fullName": "tf.tools.docs.doc_controls.do_not_doc_in_subclasses",
    "signature": "(obj: ~T) -> ~T",
    "description": "A decorator: Only generate docs for this method in the defining class."
  },
  "267": {
    "name": "do_not_doc_inheritable",
    "module": "tf.tools.docs.doc_controls",
    "fullName": "tf.tools.docs.doc_controls.do_not_doc_inheritable",
    "signature": "(obj: ~T) -> ~T",
    "description": "A decorator: Do not generate docs for this method."
  },
  "268": {
    "name": "do_not_generate_docs",
    "module": "tf.tools.docs.doc_controls",
    "fullName": "tf.tools.docs.doc_controls.do_not_generate_docs",
    "signature": "(obj: ~T) -> ~T",
    "description": "A decorator: Do not generate docs for this object."
  },
  "269": {
    "name": "doc_in_current_and_subclasses",
    "module": "tf.tools.docs.doc_controls",
    "fullName": "tf.tools.docs.doc_controls.doc_in_current_and_subclasses",
    "signature": "(obj: ~T) -> ~T",
    "description": "Overrides `do_not_doc_in_subclasses` decorator."
  },
  "270": {
    "name": "doc_private",
    "module": "tf.tools.docs.doc_controls",
    "fullName": "tf.tools.docs.doc_controls.doc_private",
    "signature": "(obj: ~T) -> ~T",
    "description": "A decorator: Generates docs for private methods/functions."
  },
  "271": {
    "name": "for_subclass_implementers",
    "module": "tf.tools.docs.doc_controls",
    "fullName": "tf.tools.docs.doc_controls.for_subclass_implementers",
    "signature": "(obj: ~T) -> ~T",
    "description": "A decorator: Only generate docs for this method in the defining class."
  },
  "272": {
    "name": "inheritable_header",
    "module": "tf.tools.docs.doc_controls",
    "fullName": "tf.tools.docs.doc_controls.inheritable_header",
    "signature": "(text)",
    "description": "No description available."
  },
  "273": {
    "name": "add_contrib_direct_import_support",
    "module": "tf.tools.compatibility.all_renames_v2",
    "fullName": "tf.tools.compatibility.all_renames_v2.add_contrib_direct_import_support",
    "signature": "(symbol_dict)",
    "description": "Add support for `tf.contrib.*` alias `contrib_*.` Updates dict in place."
  },
  "274": {
    "name": "Benchmark",
    "module": "tf.test",
    "fullName": "tf.test.Benchmark",
    "signature": "()",
    "description": "Abstract class that provides helpers for TensorFlow benchmarks."
  },
  "275": {
    "name": "TestCase",
    "module": "tf.test",
    "fullName": "tf.test.TestCase",
    "signature": "(methodName='runTest')",
    "description": "Base class for tests that need to test TensorFlow."
  },
  "276": {
    "name": "assert_equal_graph_def",
    "module": "tf.test",
    "fullName": "tf.test.assert_equal_graph_def",
    "signature": "(expected, actual)",
    "description": "Asserts that two `GraphDef`s are (mostly) the same."
  },
  "277": {
    "name": "benchmark_config",
    "module": "tf.test",
    "fullName": "tf.test.benchmark_config",
    "signature": "()",
    "description": "Returns a tf.compat.v1.ConfigProto for disabling the dependency optimizer."
  },
  "278": {
    "name": "compute_gradient",
    "module": "tf.test",
    "fullName": "tf.test.compute_gradient",
    "signature": "(f, x, delta=None)",
    "description": "Computes the theoretical and numeric Jacobian of `f`."
  },
  "279": {
    "name": "create_local_cluster",
    "module": "tf.test",
    "fullName": "tf.test.create_local_cluster",
    "signature": "(num_workers, num_ps, protocol='grpc', worker_config=None, ps_config=None)",
    "description": "Create and start local servers and return the associated `Server` objects."
  },
  "280": {
    "name": "disable_with_predicate",
    "module": "tf.test",
    "fullName": "tf.test.disable_with_predicate",
    "signature": "(pred, skip_message)",
    "description": "Disables the test if pred is true."
  },
  "281": {
    "name": "gpu_device_name",
    "module": "tf.test",
    "fullName": "tf.test.gpu_device_name",
    "signature": "()",
    "description": "Returns the name of a GPU device if available or a empty string."
  },
  "282": {
    "name": "is_built_with_cuda",
    "module": "tf.test",
    "fullName": "tf.test.is_built_with_cuda",
    "signature": "()",
    "description": "Returns whether TensorFlow was built with CUDA (GPU) support."
  },
  "283": {
    "name": "is_built_with_gpu_support",
    "module": "tf.test",
    "fullName": "tf.test.is_built_with_gpu_support",
    "signature": "()",
    "description": "Returns whether TensorFlow was built with GPU (CUDA or ROCm) support."
  },
  "284": {
    "name": "is_built_with_rocm",
    "module": "tf.test",
    "fullName": "tf.test.is_built_with_rocm",
    "signature": "()",
    "description": "Returns whether TensorFlow was built with ROCm (GPU) support."
  },
  "285": {
    "name": "is_built_with_xla",
    "module": "tf.test",
    "fullName": "tf.test.is_built_with_xla",
    "signature": "()",
    "description": "Returns whether TensorFlow was built with XLA support."
  },
  "286": {
    "name": "main",
    "module": "tf.test",
    "fullName": "tf.test.main",
    "signature": "(argv=None)",
    "description": "Runs all unit tests."
  },
  "287": {
    "name": "with_eager_op_as_function",
    "module": "tf.test",
    "fullName": "tf.test.with_eager_op_as_function",
    "signature": "(cls=None, only_as_function=False)",
    "description": "Adds methods that call original methods with eager_op_as_function enabled."
  },
  "288": {
    "name": "get_build_info",
    "module": "tf.sysconfig",
    "fullName": "tf.sysconfig.get_build_info",
    "signature": "()",
    "description": "Get a dictionary describing TensorFlow's build environment."
  },
  "289": {
    "name": "get_compile_flags",
    "module": "tf.sysconfig",
    "fullName": "tf.sysconfig.get_compile_flags",
    "signature": "()",
    "description": "Get the compilation flags for custom operators."
  },
  "290": {
    "name": "get_include",
    "module": "tf.sysconfig",
    "fullName": "tf.sysconfig.get_include",
    "signature": "()",
    "description": "Get the directory containing the TensorFlow C++ header files."
  },
  "291": {
    "name": "get_lib",
    "module": "tf.sysconfig",
    "fullName": "tf.sysconfig.get_lib",
    "signature": "()",
    "description": "Get the directory containing the TensorFlow framework library."
  },
  "292": {
    "name": "get_link_flags",
    "module": "tf.sysconfig",
    "fullName": "tf.sysconfig.get_link_flags",
    "signature": "()",
    "description": "Get the link flags for custom operators."
  },
  "293": {
    "name": "SummaryWriter",
    "module": "tf.summary",
    "fullName": "tf.summary.SummaryWriter",
    "signature": "()",
    "description": "Interface representing a stateful summary writer object."
  },
  "294": {
    "name": "audio",
    "module": "tf.summary",
    "fullName": "tf.summary.audio",
    "signature": "(name, data, sample_rate, step=None, max_outputs=3, encoding=None, description=None)",
    "description": "Write an audio summary."
  },
  "295": {
    "name": "create_file_writer",
    "module": "tf.summary",
    "fullName": "tf.summary.create_file_writer",
    "signature": "(logdir, max_queue=None, flush_millis=None, filename_suffix=None, name=None, experimental_trackable=False)",
    "description": "Creates a summary file writer for the given log directory."
  },
  "296": {
    "name": "create_noop_writer",
    "module": "tf.summary",
    "fullName": "tf.summary.create_noop_writer",
    "signature": "()",
    "description": "Returns a summary writer that does nothing."
  },
  "297": {
    "name": "flush",
    "module": "tf.summary",
    "fullName": "tf.summary.flush",
    "signature": "(writer=None, name=None)",
    "description": "Forces summary writer to send any buffered data to storage."
  },
  "298": {
    "name": "graph",
    "module": "tf.summary",
    "fullName": "tf.summary.graph",
    "signature": "(graph_data)",
    "description": "Writes a TensorFlow graph summary."
  },
  "299": {
    "name": "histogram",
    "module": "tf.summary",
    "fullName": "tf.summary.histogram",
    "signature": "(name, data, step=None, buckets=None, description=None)",
    "description": "Write a histogram summary."
  },
  "300": {
    "name": "image",
    "module": "tf.summary",
    "fullName": "tf.summary.image",
    "signature": "(name, data, step=None, max_outputs=3, description=None)",
    "description": "Write an image summary."
  },
  "301": {
    "name": "record_if",
    "module": "tf.summary",
    "fullName": "tf.summary.record_if",
    "signature": "(condition)",
    "description": "Sets summary recording on or off per the provided boolean value."
  },
  "302": {
    "name": "scalar",
    "module": "tf.summary",
    "fullName": "tf.summary.scalar",
    "signature": "(name, data, step=None, description=None)",
    "description": "Write a scalar summary."
  },
  "303": {
    "name": "should_record_summaries",
    "module": "tf.summary",
    "fullName": "tf.summary.should_record_summaries",
    "signature": "()",
    "description": "Returns boolean Tensor which is True if summaries will be recorded."
  },
  "304": {
    "name": "text",
    "module": "tf.summary",
    "fullName": "tf.summary.text",
    "signature": "(name, data, step=None, description=None)",
    "description": "Write a text summary."
  },
  "305": {
    "name": "trace_export",
    "module": "tf.summary",
    "fullName": "tf.summary.trace_export",
    "signature": "(name, step=None, profiler_outdir=None)",
    "description": "Stops and exports the active trace as a Summary and/or profile file."
  },
  "306": {
    "name": "trace_off",
    "module": "tf.summary",
    "fullName": "tf.summary.trace_off",
    "signature": "()",
    "description": "Stops the current trace and discards any collected information."
  },
  "307": {
    "name": "trace_on",
    "module": "tf.summary",
    "fullName": "tf.summary.trace_on",
    "signature": "(graph=True, profiler=False)",
    "description": "Starts a trace to record computation graphs and profiling information."
  },
  "308": {
    "name": "write",
    "module": "tf.summary",
    "fullName": "tf.summary.write",
    "signature": "(tag, tensor, step=None, metadata=None, name=None)",
    "description": "Writes a generic summary to the default SummaryWriter if one exists."
  },
  "309": {
    "name": "get_step",
    "module": "tf.summary.experimental",
    "fullName": "tf.summary.experimental.get_step",
    "signature": "()",
    "description": "Returns the default summary step for the current thread."
  },
  "310": {
    "name": "set_step",
    "module": "tf.summary.experimental",
    "fullName": "tf.summary.experimental.set_step",
    "signature": "(step)",
    "description": "Sets the default summary step for the current thread."
  },
  "311": {
    "name": "summary_scope",
    "module": "tf.summary.experimental",
    "fullName": "tf.summary.experimental.summary_scope",
    "signature": "(name, default_name='summary', values=None)",
    "description": "Experimental context manager for use when defining a custom summary op."
  },
  "312": {
    "name": "write_raw_pb",
    "module": "tf.summary.experimental",
    "fullName": "tf.summary.experimental.write_raw_pb",
    "signature": "(tensor, step=None, name=None)",
    "description": "Writes a summary using raw `tf.compat.v1.Summary` protocol buffers."
  },
  "313": {
    "name": "as_string",
    "module": "tf.strings",
    "fullName": "tf.strings.as_string",
    "signature": "(input, precision=-1, scientific=False, shortest=False, width=-1, fill='', name=None)",
    "description": "Converts each entry in the given tensor to strings."
  },
  "314": {
    "name": "bytes_split",
    "module": "tf.strings",
    "fullName": "tf.strings.bytes_split",
    "signature": "(input, name=None)",
    "description": "Split string elements of `input` into bytes."
  },
  "315": {
    "name": "format",
    "module": "tf.strings",
    "fullName": "tf.strings.format",
    "signature": "(template, inputs, placeholder='{}', summarize=3, name=None)",
    "description": "Formats a string template using a list of tensors."
  },
  "316": {
    "name": "join",
    "module": "tf.strings",
    "fullName": "tf.strings.join",
    "signature": "(inputs, separator='', name=None)",
    "description": "Perform element-wise concatenation of a list of string tensors."
  },
  "317": {
    "name": "length",
    "module": "tf.strings",
    "fullName": "tf.strings.length",
    "signature": "(input, unit='BYTE', name=None)",
    "description": "String lengths of `input`."
  },
  "318": {
    "name": "lower",
    "module": "tf.strings",
    "fullName": "tf.strings.lower",
    "signature": "(input, encoding='', name=None)",
    "description": "Converts all uppercase characters into their respective lowercase replacements."
  },
  "319": {
    "name": "ngrams",
    "module": "tf.strings",
    "fullName": "tf.strings.ngrams",
    "signature": "(data, ngram_width, separator=' ', pad_values=None, padding_width=None, preserve_short_sequences=False, name=None)",
    "description": "Create a tensor of n-grams based on `data`."
  },
  "320": {
    "name": "reduce_join",
    "module": "tf.strings",
    "fullName": "tf.strings.reduce_join",
    "signature": "(inputs, axis=None, keepdims=False, separator='', name=None)",
    "description": "Joins all strings into a single string, or joins along an axis."
  },
  "321": {
    "name": "regex_full_match",
    "module": "tf.strings",
    "fullName": "tf.strings.regex_full_match",
    "signature": "(input, pattern, name=None)",
    "description": "Check if the input matches the regex pattern."
  },
  "322": {
    "name": "regex_replace",
    "module": "tf.strings",
    "fullName": "tf.strings.regex_replace",
    "signature": "(input, pattern, rewrite, replace_global=True, name=None)",
    "description": "Replace elements of `input` matching regex `pattern` with `rewrite`."
  },
  "323": {
    "name": "split",
    "module": "tf.strings",
    "fullName": "tf.strings.split",
    "signature": "(input, sep=None, maxsplit=-1, name=None)",
    "description": "Split elements of `input` based on `sep` into a `RaggedTensor`."
  },
  "324": {
    "name": "strip",
    "module": "tf.strings",
    "fullName": "tf.strings.strip",
    "signature": "(input, name=None)",
    "description": "Strip leading and trailing whitespaces from the Tensor."
  },
  "325": {
    "name": "substr",
    "module": "tf.strings",
    "fullName": "tf.strings.substr",
    "signature": "(input, pos, len, unit='BYTE', name=None)",
    "description": "Return substrings from `Tensor` of strings."
  },
  "326": {
    "name": "to_hash_bucket_fast",
    "module": "tf.strings",
    "fullName": "tf.strings.to_hash_bucket_fast",
    "signature": "(input, num_buckets, name=None)",
    "description": "Converts each string in the input Tensor to its hash mod by a number of buckets."
  },
  "327": {
    "name": "to_hash_bucket_strong",
    "module": "tf.strings",
    "fullName": "tf.strings.to_hash_bucket_strong",
    "signature": "(input, num_buckets, key, name=None)",
    "description": "Converts each string in the input Tensor to its hash mod by a number of buckets."
  },
  "328": {
    "name": "to_number",
    "module": "tf.strings",
    "fullName": "tf.strings.to_number",
    "signature": "(input, out_type=tf.float32, name=None)",
    "description": "Converts each string in the input Tensor to the specified numeric type."
  },
  "329": {
    "name": "unicode_decode",
    "module": "tf.strings",
    "fullName": "tf.strings.unicode_decode",
    "signature": "(input, input_encoding, errors='replace', replacement_char=65533, replace_control_characters=False, name=None)",
    "description": "Decodes each string in `input` into a sequence of Unicode code points."
  },
  "330": {
    "name": "unicode_decode_with_offsets",
    "module": "tf.strings",
    "fullName": "tf.strings.unicode_decode_with_offsets",
    "signature": "(input, input_encoding, errors='replace', replacement_char=65533, replace_control_characters=False, name=None)",
    "description": "Decodes each string into a sequence of code points with start offsets."
  },
  "331": {
    "name": "unicode_encode",
    "module": "tf.strings",
    "fullName": "tf.strings.unicode_encode",
    "signature": "(input, output_encoding, errors='replace', replacement_char=65533, name=None)",
    "description": "Encodes each sequence of Unicode code points in `input` into a string."
  },
  "332": {
    "name": "unicode_script",
    "module": "tf.strings",
    "fullName": "tf.strings.unicode_script",
    "signature": "(input, name=None)",
    "description": "Determine the script codes of a given tensor of Unicode integer code points."
  },
  "333": {
    "name": "unicode_split",
    "module": "tf.strings",
    "fullName": "tf.strings.unicode_split",
    "signature": "(input, input_encoding, errors='replace', replacement_char=65533, name=None)",
    "description": "Splits each string in `input` into a sequence of Unicode code points."
  },
  "334": {
    "name": "unicode_split_with_offsets",
    "module": "tf.strings",
    "fullName": "tf.strings.unicode_split_with_offsets",
    "signature": "(input, input_encoding, errors='replace', replacement_char=65533, name=None)",
    "description": "Splits each string into a sequence of code points with start offsets."
  },
  "335": {
    "name": "unicode_transcode",
    "module": "tf.strings",
    "fullName": "tf.strings.unicode_transcode",
    "signature": "(input, input_encoding, output_encoding, errors='replace', replacement_char=65533, replace_control_characters=False, name=None)",
    "description": "Transcode the input text from a source encoding to a destination encoding."
  },
  "336": {
    "name": "unsorted_segment_join",
    "module": "tf.strings",
    "fullName": "tf.strings.unsorted_segment_join",
    "signature": "(inputs, segment_ids, num_segments, separator='', name=None)",
    "description": "Joins the elements of `inputs` based on `segment_ids`."
  },
  "337": {
    "name": "upper",
    "module": "tf.strings",
    "fullName": "tf.strings.upper",
    "signature": "(input, encoding='', name=None)",
    "description": "Converts all lowercase characters into their respective uppercase replacements."
  },
  "338": {
    "name": "SparseTensor",
    "module": "tf.sparse",
    "fullName": "tf.sparse.SparseTensor",
    "signature": "(indices, values, dense_shape)",
    "description": "Represents a sparse tensor."
  },
  "339": {
    "name": "add",
    "module": "tf.sparse",
    "fullName": "tf.sparse.add",
    "signature": "(a, b, threshold=0)",
    "description": "Adds two tensors, at least one of each is a `SparseTensor`."
  },
  "340": {
    "name": "bincount",
    "module": "tf.sparse",
    "fullName": "tf.sparse.bincount",
    "signature": "(values, weights=None, axis=0, minlength=None, maxlength=None, binary_output=False, name=None)",
    "description": "Count the number of times an integer value appears in a tensor."
  },
  "341": {
    "name": "cross",
    "module": "tf.sparse",
    "fullName": "tf.sparse.cross",
    "signature": "(inputs, name=None, separator=None)",
    "description": "Generates sparse cross from a list of sparse and dense tensors."
  },
  "342": {
    "name": "cross_hashed",
    "module": "tf.sparse",
    "fullName": "tf.sparse.cross_hashed",
    "signature": "(inputs, num_buckets=0, hash_key=None, name=None)",
    "description": "Generates hashed sparse cross from a list of sparse and dense tensors."
  },
  "343": {
    "name": "expand_dims",
    "module": "tf.sparse",
    "fullName": "tf.sparse.expand_dims",
    "signature": "(sp_input, axis=None, name=None)",
    "description": "Returns a tensor with an length 1 axis inserted at index `axis`."
  },
  "344": {
    "name": "eye",
    "module": "tf.sparse",
    "fullName": "tf.sparse.eye",
    "signature": "(num_rows, num_columns=None, dtype=tf.float32, name=None)",
    "description": "Creates a two-dimensional sparse tensor with ones along the diagonal."
  },
  "345": {
    "name": "fill_empty_rows",
    "module": "tf.sparse",
    "fullName": "tf.sparse.fill_empty_rows",
    "signature": "(sp_input, default_value, name=None)",
    "description": "Fills empty rows in the input 2-D `SparseTensor` with a default value."
  },
  "346": {
    "name": "from_dense",
    "module": "tf.sparse",
    "fullName": "tf.sparse.from_dense",
    "signature": "(tensor, name=None)",
    "description": "Converts a dense tensor into a sparse tensor."
  },
  "347": {
    "name": "map_values",
    "module": "tf.sparse",
    "fullName": "tf.sparse.map_values",
    "signature": "(op, *args, **kwargs)",
    "description": "Applies `op` to the `.values` tensor of one or more `SparseTensor`s."
  },
  "348": {
    "name": "mask",
    "module": "tf.sparse",
    "fullName": "tf.sparse.mask",
    "signature": "(a, mask_indices, name=None)",
    "description": "Masks elements of `IndexedSlices`."
  },
  "349": {
    "name": "maximum",
    "module": "tf.sparse",
    "fullName": "tf.sparse.maximum",
    "signature": "(sp_a, sp_b, name=None)",
    "description": "Returns the element-wise max of two SparseTensors."
  },
  "350": {
    "name": "minimum",
    "module": "tf.sparse",
    "fullName": "tf.sparse.minimum",
    "signature": "(sp_a, sp_b, name=None)",
    "description": "Returns the element-wise min of two SparseTensors."
  },
  "351": {
    "name": "reduce_max",
    "module": "tf.sparse",
    "fullName": "tf.sparse.reduce_max",
    "signature": "(sp_input, axis=None, keepdims=None, output_is_sparse=False, name=None)",
    "description": "Computes `tf.sparse.maximum` of elements across dimensions of a SparseTensor."
  },
  "352": {
    "name": "reduce_sum",
    "module": "tf.sparse",
    "fullName": "tf.sparse.reduce_sum",
    "signature": "(sp_input, axis=None, keepdims=None, output_is_sparse=False, name=None)",
    "description": "Computes `tf.sparse.add` of elements across dimensions of a SparseTensor."
  },
  "353": {
    "name": "reorder",
    "module": "tf.sparse",
    "fullName": "tf.sparse.reorder",
    "signature": "(sp_input, name=None)",
    "description": "Reorders a `SparseTensor` into the canonical, row-major ordering."
  },
  "354": {
    "name": "reset_shape",
    "module": "tf.sparse",
    "fullName": "tf.sparse.reset_shape",
    "signature": "(sp_input, new_shape=None)",
    "description": "Resets the shape of a `SparseTensor` with indices and values unchanged."
  },
  "355": {
    "name": "reshape",
    "module": "tf.sparse",
    "fullName": "tf.sparse.reshape",
    "signature": "(sp_input, shape, name=None)",
    "description": "Reshapes a `SparseTensor` to represent values in a new dense shape."
  },
  "356": {
    "name": "retain",
    "module": "tf.sparse",
    "fullName": "tf.sparse.retain",
    "signature": "(sp_input, to_retain)",
    "description": "Retains specified non-empty values within a `SparseTensor`."
  },
  "357": {
    "name": "segment_mean",
    "module": "tf.sparse",
    "fullName": "tf.sparse.segment_mean",
    "signature": "(data, indices, segment_ids, num_segments=None, name=None)",
    "description": "Computes the mean along sparse segments of a tensor."
  },
  "358": {
    "name": "segment_sqrt_n",
    "module": "tf.sparse",
    "fullName": "tf.sparse.segment_sqrt_n",
    "signature": "(data, indices, segment_ids, num_segments=None, name=None)",
    "description": "Computes the sum along sparse segments of a tensor divided by the sqrt(N)."
  },
  "359": {
    "name": "segment_sum",
    "module": "tf.sparse",
    "fullName": "tf.sparse.segment_sum",
    "signature": "(data, indices, segment_ids, num_segments=None, name=None)",
    "description": "Computes the sum along sparse segments of a tensor."
  },
  "360": {
    "name": "slice",
    "module": "tf.sparse",
    "fullName": "tf.sparse.slice",
    "signature": "(sp_input, start, size, name=None)",
    "description": "Slice a `SparseTensor` based on the `start` and `size`."
  },
  "361": {
    "name": "softmax",
    "module": "tf.sparse",
    "fullName": "tf.sparse.softmax",
    "signature": "(sp_input, name=None)",
    "description": "Applies softmax to a batched N-D `SparseTensor`."
  },
  "362": {
    "name": "sparse_dense_matmul",
    "module": "tf.sparse",
    "fullName": "tf.sparse.sparse_dense_matmul",
    "signature": "(sp_a, b, adjoint_a=False, adjoint_b=False, name=None)",
    "description": "Multiply SparseTensor (or dense Matrix) (of rank 2) \"A\" by dense matrix"
  },
  "363": {
    "name": "split",
    "module": "tf.sparse",
    "fullName": "tf.sparse.split",
    "signature": "(sp_input=None, num_split=None, axis=None, name=None)",
    "description": "Split a `SparseTensor` into `num_split` tensors along `axis`."
  },
  "364": {
    "name": "to_dense",
    "module": "tf.sparse",
    "fullName": "tf.sparse.to_dense",
    "signature": "(sp_input, default_value=None, validate_indices=True, name=None)",
    "description": "Converts a `SparseTensor` into a dense tensor."
  },
  "365": {
    "name": "to_indicator",
    "module": "tf.sparse",
    "fullName": "tf.sparse.to_indicator",
    "signature": "(sp_input, vocab_size, name=None)",
    "description": "Converts a `SparseTensor` of ids into a dense bool indicator tensor."
  },
  "366": {
    "name": "transpose",
    "module": "tf.sparse",
    "fullName": "tf.sparse.transpose",
    "signature": "(sp_input, perm=None, name=None)",
    "description": "Transposes a `SparseTensor`"
  },
  "367": {
    "name": "dct",
    "module": "tf.signal",
    "fullName": "tf.signal.dct",
    "signature": "(input, type=2, n=None, axis=-1, norm=None, name=None)",
    "description": "Computes the 1D [Discrete Cosine Transform (DCT)][dct] of `input`."
  },
  "368": {
    "name": "fft",
    "module": "tf.signal",
    "fullName": "tf.signal.fft",
    "signature": "(input, name=None)",
    "description": "Fast Fourier transform."
  },
  "369": {
    "name": "fft2d",
    "module": "tf.signal",
    "fullName": "tf.signal.fft2d",
    "signature": "(input, name=None)",
    "description": "2D fast Fourier transform."
  },
  "370": {
    "name": "fft3d",
    "module": "tf.signal",
    "fullName": "tf.signal.fft3d",
    "signature": "(input, name=None)",
    "description": "3D fast Fourier transform."
  },
  "371": {
    "name": "fftshift",
    "module": "tf.signal",
    "fullName": "tf.signal.fftshift",
    "signature": "(x, axes=None, name=None)",
    "description": "Shift the zero-frequency component to the center of the spectrum."
  },
  "372": {
    "name": "frame",
    "module": "tf.signal",
    "fullName": "tf.signal.frame",
    "signature": "(signal, frame_length, frame_step, pad_end=False, pad_value=0, axis=-1, name=None)",
    "description": "Expands `signal`'s `axis` dimension into frames of `frame_length`."
  },
  "373": {
    "name": "hamming_window",
    "module": "tf.signal",
    "fullName": "tf.signal.hamming_window",
    "signature": "(window_length, periodic=True, dtype=tf.float32, name=None)",
    "description": "Generate a [Hamming][hamming] window."
  },
  "374": {
    "name": "hann_window",
    "module": "tf.signal",
    "fullName": "tf.signal.hann_window",
    "signature": "(window_length, periodic=True, dtype=tf.float32, name=None)",
    "description": "Generate a [Hann window][hann]."
  },
  "375": {
    "name": "idct",
    "module": "tf.signal",
    "fullName": "tf.signal.idct",
    "signature": "(input, type=2, n=None, axis=-1, norm=None, name=None)",
    "description": "Computes the 1D [Inverse Discrete Cosine Transform (DCT)][idct] of `input`."
  },
  "376": {
    "name": "ifft",
    "module": "tf.signal",
    "fullName": "tf.signal.ifft",
    "signature": "(input, name=None)",
    "description": "Inverse fast Fourier transform."
  },
  "377": {
    "name": "ifft2d",
    "module": "tf.signal",
    "fullName": "tf.signal.ifft2d",
    "signature": "(input, name=None)",
    "description": "Inverse 2D fast Fourier transform."
  },
  "378": {
    "name": "ifft3d",
    "module": "tf.signal",
    "fullName": "tf.signal.ifft3d",
    "signature": "(input, name=None)",
    "description": "Inverse 3D fast Fourier transform."
  },
  "379": {
    "name": "ifftshift",
    "module": "tf.signal",
    "fullName": "tf.signal.ifftshift",
    "signature": "(x, axes=None, name=None)",
    "description": "The inverse of fftshift."
  },
  "380": {
    "name": "inverse_mdct",
    "module": "tf.signal",
    "fullName": "tf.signal.inverse_mdct",
    "signature": "(mdcts, window_fn=<function vorbis_window at 0x7ff541cf7d30>, norm=None, name=None)",
    "description": "Computes the inverse modified DCT of `mdcts`."
  },
  "381": {
    "name": "inverse_stft",
    "module": "tf.signal",
    "fullName": "tf.signal.inverse_stft",
    "signature": "(stfts, frame_length, frame_step, fft_length=None, window_fn=<function hann_window at 0x7ff541cf7ee0>, name=None)",
    "description": "Computes the inverse [Short-time Fourier Transform][stft] of `stfts`."
  },
  "382": {
    "name": "inverse_stft_window_fn",
    "module": "tf.signal",
    "fullName": "tf.signal.inverse_stft_window_fn",
    "signature": "(frame_step, forward_window_fn=<function hann_window at 0x7ff541cf7ee0>, name=None)",
    "description": "Generates a window function that can be used in `inverse_stft`."
  },
  "383": {
    "name": "irfft",
    "module": "tf.signal",
    "fullName": "tf.signal.irfft",
    "signature": "(input_tensor, fft_length=None, name=None)",
    "description": "Inverse real-valued fast Fourier transform."
  },
  "384": {
    "name": "irfft2d",
    "module": "tf.signal",
    "fullName": "tf.signal.irfft2d",
    "signature": "(input_tensor, fft_length=None, name=None)",
    "description": "Inverse 2D real-valued fast Fourier transform."
  },
  "385": {
    "name": "irfft3d",
    "module": "tf.signal",
    "fullName": "tf.signal.irfft3d",
    "signature": "(input_tensor, fft_length=None, name=None)",
    "description": "Inverse 3D real-valued fast Fourier transform."
  },
  "386": {
    "name": "kaiser_bessel_derived_window",
    "module": "tf.signal",
    "fullName": "tf.signal.kaiser_bessel_derived_window",
    "signature": "(window_length, beta=12.0, dtype=tf.float32, name=None)",
    "description": "Generate a [Kaiser Bessel derived window][kbd]."
  },
  "387": {
    "name": "kaiser_window",
    "module": "tf.signal",
    "fullName": "tf.signal.kaiser_window",
    "signature": "(window_length, beta=12.0, dtype=tf.float32, name=None)",
    "description": "Generate a [Kaiser window][kaiser]."
  },
  "388": {
    "name": "linear_to_mel_weight_matrix",
    "module": "tf.signal",
    "fullName": "tf.signal.linear_to_mel_weight_matrix",
    "signature": "(num_mel_bins=20, num_spectrogram_bins=129, sample_rate=8000, lower_edge_hertz=125.0, upper_edge_hertz=3800.0, dtype=tf.float32, name=None)",
    "description": "Returns a matrix to warp linear scale spectrograms to the [mel scale][mel]."
  },
  "389": {
    "name": "mdct",
    "module": "tf.signal",
    "fullName": "tf.signal.mdct",
    "signature": "(signals, frame_length, window_fn=<function vorbis_window at 0x7ff541cf7d30>, pad_end=False, norm=None, name=None)",
    "description": "Computes the [Modified Discrete Cosine Transform][mdct] of `signals`."
  },
  "390": {
    "name": "mfccs_from_log_mel_spectrograms",
    "module": "tf.signal",
    "fullName": "tf.signal.mfccs_from_log_mel_spectrograms",
    "signature": "(log_mel_spectrograms, name=None)",
    "description": "Computes [MFCCs][mfcc] of `log_mel_spectrograms`."
  },
  "391": {
    "name": "overlap_and_add",
    "module": "tf.signal",
    "fullName": "tf.signal.overlap_and_add",
    "signature": "(signal, frame_step, name=None)",
    "description": "Reconstructs a signal from a framed representation."
  },
  "392": {
    "name": "rfft",
    "module": "tf.signal",
    "fullName": "tf.signal.rfft",
    "signature": "(input_tensor, fft_length=None, name=None)",
    "description": "Real-valued fast Fourier transform."
  },
  "393": {
    "name": "rfft2d",
    "module": "tf.signal",
    "fullName": "tf.signal.rfft2d",
    "signature": "(input_tensor, fft_length=None, name=None)",
    "description": "2D real-valued fast Fourier transform."
  },
  "394": {
    "name": "rfft3d",
    "module": "tf.signal",
    "fullName": "tf.signal.rfft3d",
    "signature": "(input_tensor, fft_length=None, name=None)",
    "description": "3D real-valued fast Fourier transform."
  },
  "395": {
    "name": "stft",
    "module": "tf.signal",
    "fullName": "tf.signal.stft",
    "signature": "(signals, frame_length, frame_step, fft_length=None, window_fn=<function hann_window at 0x7ff541cf7ee0>, pad_end=False, name=None)",
    "description": "Computes the [Short-time Fourier Transform][stft] of `signals`."
  },
  "396": {
    "name": "vorbis_window",
    "module": "tf.signal",
    "fullName": "tf.signal.vorbis_window",
    "signature": "(window_length, dtype=tf.float32, name=None)",
    "description": "Generate a [Vorbis power complementary window][vorbis]."
  },
  "397": {
    "name": "difference",
    "module": "tf.sets",
    "fullName": "tf.sets.difference",
    "signature": "(a, b, aminusb=True, validate_indices=True)",
    "description": "Compute set difference of elements in last dimension of `a` and `b`."
  },
  "398": {
    "name": "intersection",
    "module": "tf.sets",
    "fullName": "tf.sets.intersection",
    "signature": "(a, b, validate_indices=True)",
    "description": "Compute set intersection of elements in last dimension of `a` and `b`."
  },
  "399": {
    "name": "size",
    "module": "tf.sets",
    "fullName": "tf.sets.size",
    "signature": "(a, validate_indices=True)",
    "description": "Compute number of unique elements along last dimension of `a`."
  },
  "400": {
    "name": "union",
    "module": "tf.sets",
    "fullName": "tf.sets.union",
    "signature": "(a, b, validate_indices=True)",
    "description": "Compute set union of elements in last dimension of `a` and `b`."
  },
  "401": {
    "name": "Asset",
    "module": "tf.saved_model",
    "fullName": "tf.saved_model.Asset",
    "signature": "(path)",
    "description": "Represents a file asset to hermetically include in a SavedModel."
  },
  "402": {
    "name": "LoadOptions",
    "module": "tf.saved_model",
    "fullName": "tf.saved_model.LoadOptions",
    "signature": "(allow_partial_checkpoint=False, experimental_io_device=None, experimental_skip_checkpoint=False, experimental_variable_policy=None)",
    "description": "Options for loading a SavedModel."
  },
  "403": {
    "name": "SaveOptions",
    "module": "tf.saved_model",
    "fullName": "tf.saved_model.SaveOptions",
    "signature": "(namespace_whitelist=None, save_debug_info=False, function_aliases=None, experimental_io_device=None, experimental_variable_policy=None, experimental_custom_gradients=True)",
    "description": "Options for saving to SavedModel."
  },
  "404": {
    "name": "contains_saved_model",
    "module": "tf.saved_model",
    "fullName": "tf.saved_model.contains_saved_model",
    "signature": "(export_dir)",
    "description": "Checks whether the provided export directory could contain a SavedModel."
  },
  "405": {
    "name": "load",
    "module": "tf.saved_model",
    "fullName": "tf.saved_model.load",
    "signature": "(export_dir, tags=None, options=None)",
    "description": "Load a SavedModel from `export_dir`."
  },
  "406": {
    "name": "save",
    "module": "tf.saved_model",
    "fullName": "tf.saved_model.save",
    "signature": "(obj, export_dir, signatures=None, options=None)",
    "description": "Exports a [tf.Module](https://www.tensorflow.org/api_docs/python/tf/Module) (and subclasses) `obj` to [SavedModel format](https://www.tensorflow.org/guide/saved_model#the_savedmodel_format_on_disk)."
  },
  "407": {
    "name": "TrackableResource",
    "module": "tf.saved_model.experimental",
    "fullName": "tf.saved_model.experimental.TrackableResource",
    "signature": "(*args, **kwargs)",
    "description": "Holds a Tensor which a tf.function can capture."
  },
  "408": {
    "name": "VariablePolicy",
    "module": "tf.saved_model.experimental",
    "fullName": "tf.saved_model.experimental.VariablePolicy",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "Enum defining options for variable handling when saving."
  },
  "409": {
    "name": "Abort",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Abort",
    "signature": "(error_msg='', exit_without_error=False, name=None)",
    "description": "Raise a exception to abort the process when called."
  },
  "410": {
    "name": "Abs",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Abs",
    "signature": "(x, name=None)",
    "description": "Computes the absolute value of a tensor."
  },
  "411": {
    "name": "AccumulateNV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AccumulateNV2",
    "signature": "(inputs, shape, name=None)",
    "description": "Returns the element-wise sum of a list of tensors."
  },
  "412": {
    "name": "AccumulatorApplyGradient",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AccumulatorApplyGradient",
    "signature": "(handle, local_step, gradient, name=None)",
    "description": "Applies a gradient to a given accumulator."
  },
  "413": {
    "name": "AccumulatorNumAccumulated",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AccumulatorNumAccumulated",
    "signature": "(handle, name=None)",
    "description": "Returns the number of gradients aggregated in the given accumulators."
  },
  "414": {
    "name": "AccumulatorSetGlobalStep",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AccumulatorSetGlobalStep",
    "signature": "(handle, new_global_step, name=None)",
    "description": "Updates the accumulator with a new value for global_step."
  },
  "415": {
    "name": "AccumulatorTakeGradient",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AccumulatorTakeGradient",
    "signature": "(handle, num_required, dtype, name=None)",
    "description": "Extracts the average gradient in the given ConditionalAccumulator."
  },
  "416": {
    "name": "Acos",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Acos",
    "signature": "(x, name=None)",
    "description": "Computes acos of x element-wise."
  },
  "417": {
    "name": "Acosh",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Acosh",
    "signature": "(x, name=None)",
    "description": "Computes inverse hyperbolic cosine of x element-wise."
  },
  "418": {
    "name": "Add",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Add",
    "signature": "(x, y, name=None)",
    "description": "Returns x + y element-wise."
  },
  "419": {
    "name": "AddManySparseToTensorsMap",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AddManySparseToTensorsMap",
    "signature": "(sparse_indices, sparse_values, sparse_shape, container='', shared_name='', name=None)",
    "description": "Add an `N`-minibatch `SparseTensor` to a `SparseTensorsMap`, return `N` handles."
  },
  "420": {
    "name": "AddN",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AddN",
    "signature": "(inputs, name=None)",
    "description": "Add all input tensors element wise."
  },
  "421": {
    "name": "AddSparseToTensorsMap",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AddSparseToTensorsMap",
    "signature": "(sparse_indices, sparse_values, sparse_shape, container='', shared_name='', name=None)",
    "description": "Add a `SparseTensor` to a `SparseTensorsMap` return its handle."
  },
  "422": {
    "name": "AddV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AddV2",
    "signature": "(x, y, name=None)",
    "description": "Returns x + y element-wise."
  },
  "423": {
    "name": "AdjustContrastv2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AdjustContrastv2",
    "signature": "(images, contrast_factor, name=None)",
    "description": "Adjust the contrast of one or more images."
  },
  "424": {
    "name": "AdjustHue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AdjustHue",
    "signature": "(images, delta, name=None)",
    "description": "Adjust the hue of one or more images."
  },
  "425": {
    "name": "AdjustSaturation",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AdjustSaturation",
    "signature": "(images, scale, name=None)",
    "description": "Adjust the saturation of one or more images."
  },
  "426": {
    "name": "All",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.All",
    "signature": "(input, axis, keep_dims=False, name=None)",
    "description": "Computes the \"logical and\" of elements across dimensions of a tensor."
  },
  "427": {
    "name": "AllCandidateSampler",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AllCandidateSampler",
    "signature": "(true_classes, num_true, num_sampled, unique, seed=0, seed2=0, name=None)",
    "description": "Generates labels for candidate sampling with a learned unigram distribution."
  },
  "428": {
    "name": "AllToAll",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AllToAll",
    "signature": "(input, group_assignment, concat_dimension, split_dimension, split_count, name=None)",
    "description": "An Op to exchange data across TPU replicas."
  },
  "429": {
    "name": "Angle",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Angle",
    "signature": "(input, Tout=tf.float32, name=None)",
    "description": "Returns the argument of a complex number."
  },
  "430": {
    "name": "AnonymousHashTable",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AnonymousHashTable",
    "signature": "(key_dtype, value_dtype, name=None)",
    "description": "Creates a uninitialized anonymous hash table."
  },
  "431": {
    "name": "AnonymousIterator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AnonymousIterator",
    "signature": "(output_types, output_shapes, name=None)",
    "description": "A container for an iterator resource."
  },
  "432": {
    "name": "AnonymousIteratorV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AnonymousIteratorV2",
    "signature": "(output_types, output_shapes, name=None)",
    "description": "A container for an iterator resource."
  },
  "433": {
    "name": "AnonymousIteratorV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AnonymousIteratorV3",
    "signature": "(output_types, output_shapes, name=None)",
    "description": "A container for an iterator resource."
  },
  "434": {
    "name": "AnonymousMemoryCache",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AnonymousMemoryCache",
    "signature": "(name=None)",
    "description": "TODO: add doc."
  },
  "435": {
    "name": "AnonymousMultiDeviceIterator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AnonymousMultiDeviceIterator",
    "signature": "(devices, output_types, output_shapes, name=None)",
    "description": "A container for a multi device iterator resource."
  },
  "436": {
    "name": "AnonymousMultiDeviceIteratorV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AnonymousMultiDeviceIteratorV3",
    "signature": "(devices, output_types, output_shapes, name=None)",
    "description": "A container for a multi device iterator resource."
  },
  "437": {
    "name": "AnonymousMutableDenseHashTable",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AnonymousMutableDenseHashTable",
    "signature": "(empty_key, deleted_key, value_dtype, value_shape=[], initial_num_buckets=131072, max_load_factor=0.8, name=None)",
    "description": "Creates an empty anonymous mutable hash table that uses tensors as the backing store."
  },
  "438": {
    "name": "AnonymousMutableHashTable",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AnonymousMutableHashTable",
    "signature": "(key_dtype, value_dtype, name=None)",
    "description": "Creates an empty anonymous mutable hash table."
  },
  "439": {
    "name": "AnonymousMutableHashTableOfTensors",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AnonymousMutableHashTableOfTensors",
    "signature": "(key_dtype, value_dtype, value_shape=[], name=None)",
    "description": "Creates an empty anonymous mutable hash table of vector values."
  },
  "440": {
    "name": "AnonymousRandomSeedGenerator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AnonymousRandomSeedGenerator",
    "signature": "(seed, seed2, name=None)",
    "description": "TODO: add doc."
  },
  "441": {
    "name": "AnonymousSeedGenerator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AnonymousSeedGenerator",
    "signature": "(seed, seed2, reshuffle, name=None)",
    "description": "TODO: add doc."
  },
  "442": {
    "name": "Any",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Any",
    "signature": "(input, axis, keep_dims=False, name=None)",
    "description": "Computes the \"logical or\" of elements across dimensions of a tensor."
  },
  "443": {
    "name": "ApplyAdaMax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyAdaMax",
    "signature": "(var, m, v, beta1_power, lr, beta1, beta2, epsilon, grad, use_locking=False, name=None)",
    "description": "Update '*var' according to the AdaMax algorithm."
  },
  "444": {
    "name": "ApplyAdadelta",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyAdadelta",
    "signature": "(var, accum, accum_update, lr, rho, epsilon, grad, use_locking=False, name=None)",
    "description": "Update '*var' according to the adadelta scheme."
  },
  "445": {
    "name": "ApplyAdagrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyAdagrad",
    "signature": "(var, accum, lr, grad, use_locking=False, update_slots=True, name=None)",
    "description": "Update '*var' according to the adagrad scheme."
  },
  "446": {
    "name": "ApplyAdagradDA",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyAdagradDA",
    "signature": "(var, gradient_accumulator, gradient_squared_accumulator, grad, lr, l1, l2, global_step, use_locking=False, name=None)",
    "description": "Update '*var' according to the proximal adagrad scheme."
  },
  "447": {
    "name": "ApplyAdagradV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyAdagradV2",
    "signature": "(var, accum, lr, epsilon, grad, use_locking=False, update_slots=True, name=None)",
    "description": "Update '*var' according to the adagrad scheme."
  },
  "448": {
    "name": "ApplyAdam",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyAdam",
    "signature": "(var, m, v, beta1_power, beta2_power, lr, beta1, beta2, epsilon, grad, use_locking=False, use_nesterov=False, name=None)",
    "description": "Update '*var' according to the Adam algorithm."
  },
  "449": {
    "name": "ApplyAddSign",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyAddSign",
    "signature": "(var, m, lr, alpha, sign_decay, beta, grad, use_locking=False, name=None)",
    "description": "Update '*var' according to the AddSign update."
  },
  "450": {
    "name": "ApplyCenteredRMSProp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyCenteredRMSProp",
    "signature": "(var, mg, ms, mom, lr, rho, momentum, epsilon, grad, use_locking=False, name=None)",
    "description": "Update '*var' according to the centered RMSProp algorithm."
  },
  "451": {
    "name": "ApplyFtrl",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyFtrl",
    "signature": "(var, accum, linear, grad, lr, l1, l2, lr_power, use_locking=False, multiply_linear_by_lr=False, name=None)",
    "description": "Update '*var' according to the Ftrl-proximal scheme."
  },
  "452": {
    "name": "ApplyFtrlV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyFtrlV2",
    "signature": "(var, accum, linear, grad, lr, l1, l2, l2_shrinkage, lr_power, use_locking=False, multiply_linear_by_lr=False, name=None)",
    "description": "Update '*var' according to the Ftrl-proximal scheme."
  },
  "453": {
    "name": "ApplyGradientDescent",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyGradientDescent",
    "signature": "(var, alpha, delta, use_locking=False, name=None)",
    "description": "Update '*var' by subtracting 'alpha' * 'delta' from it."
  },
  "454": {
    "name": "ApplyMomentum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyMomentum",
    "signature": "(var, accum, lr, grad, momentum, use_locking=False, use_nesterov=False, name=None)",
    "description": "Update '*var' according to the momentum scheme."
  },
  "455": {
    "name": "ApplyPowerSign",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyPowerSign",
    "signature": "(var, m, lr, logbase, sign_decay, beta, grad, use_locking=False, name=None)",
    "description": "Update '*var' according to the AddSign update."
  },
  "456": {
    "name": "ApplyProximalAdagrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyProximalAdagrad",
    "signature": "(var, accum, lr, l1, l2, grad, use_locking=False, name=None)",
    "description": "Update '*var' and '*accum' according to FOBOS with Adagrad learning rate."
  },
  "457": {
    "name": "ApplyProximalGradientDescent",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyProximalGradientDescent",
    "signature": "(var, alpha, l1, l2, delta, use_locking=False, name=None)",
    "description": "Update '*var' as FOBOS algorithm with fixed learning rate."
  },
  "458": {
    "name": "ApplyRMSProp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApplyRMSProp",
    "signature": "(var, ms, mom, lr, rho, momentum, epsilon, grad, use_locking=False, name=None)",
    "description": "Update '*var' according to the RMSProp algorithm."
  },
  "459": {
    "name": "ApproxTopK",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApproxTopK",
    "signature": "(input, k, reduction_dimension=-1, recall_target=0.95, is_max_k=True, reduction_input_size_override=-1, aggregate_to_topk=True, name=None)",
    "description": "Returns min/max k values and their indices of the input operand in an approximate manner."
  },
  "460": {
    "name": "ApproximateEqual",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ApproximateEqual",
    "signature": "(x, y, tolerance=1e-05, name=None)",
    "description": "Returns the truth value of abs(x-y) < tolerance element-wise."
  },
  "461": {
    "name": "ArgMax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ArgMax",
    "signature": "(input, dimension, output_type=tf.int64, name=None)",
    "description": "Returns the index with the largest value across dimensions of a tensor."
  },
  "462": {
    "name": "ArgMin",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ArgMin",
    "signature": "(input, dimension, output_type=tf.int64, name=None)",
    "description": "Returns the index with the smallest value across dimensions of a tensor."
  },
  "463": {
    "name": "AsString",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AsString",
    "signature": "(input, precision=-1, scientific=False, shortest=False, width=-1, fill='', name=None)",
    "description": "Converts each entry in the given tensor to strings."
  },
  "464": {
    "name": "Asin",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Asin",
    "signature": "(x, name=None)",
    "description": "Computes the trignometric inverse sine of x element-wise."
  },
  "465": {
    "name": "Asinh",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Asinh",
    "signature": "(x, name=None)",
    "description": "Computes inverse hyperbolic sine of x element-wise."
  },
  "466": {
    "name": "Assert",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Assert",
    "signature": "(condition, data, summarize=3, name=None)",
    "description": "Asserts that the given condition is true."
  },
  "467": {
    "name": "AssertCardinalityDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AssertCardinalityDataset",
    "signature": "(input_dataset, cardinality, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "468": {
    "name": "AssertNextDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AssertNextDataset",
    "signature": "(input_dataset, transformations, output_types, output_shapes, name=None)",
    "description": "A transformation that asserts which transformations happen next."
  },
  "469": {
    "name": "AssertPrevDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AssertPrevDataset",
    "signature": "(input_dataset, transformations, output_types, output_shapes, name=None)",
    "description": "A transformation that asserts which transformations happened previously."
  },
  "470": {
    "name": "Assign",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Assign",
    "signature": "(ref, value, validate_shape=True, use_locking=True, name=None)",
    "description": "Update 'ref' by assigning 'value' to it."
  },
  "471": {
    "name": "AssignAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AssignAdd",
    "signature": "(ref, value, use_locking=False, name=None)",
    "description": "Update 'ref' by adding 'value' to it."
  },
  "472": {
    "name": "AssignAddVariableOp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AssignAddVariableOp",
    "signature": "(resource, value, name=None)",
    "description": "Adds a value to the current value of a variable."
  },
  "473": {
    "name": "AssignSub",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AssignSub",
    "signature": "(ref, value, use_locking=False, name=None)",
    "description": "Update 'ref' by subtracting 'value' from it."
  },
  "474": {
    "name": "AssignSubVariableOp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AssignSubVariableOp",
    "signature": "(resource, value, name=None)",
    "description": "Subtracts a value from the current value of a variable."
  },
  "475": {
    "name": "AssignVariableOp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AssignVariableOp",
    "signature": "(resource, value, validate_shape=False, name=None)",
    "description": "Assigns a new value to a variable."
  },
  "476": {
    "name": "AssignVariableXlaConcatND",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AssignVariableXlaConcatND",
    "signature": "(resource, inputs, num_concats, paddings=[], name=None)",
    "description": "Concats input tensor across all dimensions."
  },
  "477": {
    "name": "Atan",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Atan",
    "signature": "(x, name=None)",
    "description": "Computes the trignometric inverse tangent of x element-wise."
  },
  "478": {
    "name": "Atan2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Atan2",
    "signature": "(y, x, name=None)",
    "description": "Computes arctangent of `y/x` element-wise, respecting signs of the arguments."
  },
  "479": {
    "name": "Atanh",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Atanh",
    "signature": "(x, name=None)",
    "description": "Computes inverse hyperbolic tangent of x element-wise."
  },
  "480": {
    "name": "AudioSpectrogram",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AudioSpectrogram",
    "signature": "(input, window_size, stride, magnitude_squared=False, name=None)",
    "description": "Produces a visualization of audio data over time."
  },
  "481": {
    "name": "AudioSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AudioSummary",
    "signature": "(tag, tensor, sample_rate, max_outputs=3, name=None)",
    "description": "Outputs a `Summary` protocol buffer with audio."
  },
  "482": {
    "name": "AudioSummaryV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AudioSummaryV2",
    "signature": "(tag, tensor, sample_rate, max_outputs=3, name=None)",
    "description": "Outputs a `Summary` protocol buffer with audio."
  },
  "483": {
    "name": "AutoShardDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AutoShardDataset",
    "signature": "(input_dataset, num_workers, index, output_types, output_shapes, auto_shard_policy=0, num_replicas=0, name=None)",
    "description": "Creates a dataset that shards the input dataset."
  },
  "484": {
    "name": "AvgPool",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AvgPool",
    "signature": "(value, ksize, strides, padding, data_format='NHWC', name=None)",
    "description": "Performs average pooling on the input."
  },
  "485": {
    "name": "AvgPool3D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AvgPool3D",
    "signature": "(input, ksize, strides, padding, data_format='NDHWC', name=None)",
    "description": "Performs 3D average pooling on the input."
  },
  "486": {
    "name": "AvgPool3DGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AvgPool3DGrad",
    "signature": "(orig_input_shape, grad, ksize, strides, padding, data_format='NDHWC', name=None)",
    "description": "Computes gradients of average pooling function."
  },
  "487": {
    "name": "AvgPoolGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.AvgPoolGrad",
    "signature": "(orig_input_shape, grad, ksize, strides, padding, data_format='NHWC', name=None)",
    "description": "Computes gradients of the average pooling function."
  },
  "488": {
    "name": "BandedTriangularSolve",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BandedTriangularSolve",
    "signature": "(matrix, rhs, lower=True, adjoint=False, name=None)",
    "description": "TODO: add doc."
  },
  "489": {
    "name": "Barrier",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Barrier",
    "signature": "(component_types, shapes=[], capacity=-1, container='', shared_name='', name=None)",
    "description": "Defines a barrier that persists across different graph executions."
  },
  "490": {
    "name": "BarrierClose",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BarrierClose",
    "signature": "(handle, cancel_pending_enqueues=False, name=None)",
    "description": "Closes the given barrier."
  },
  "491": {
    "name": "BarrierIncompleteSize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BarrierIncompleteSize",
    "signature": "(handle, name=None)",
    "description": "Computes the number of incomplete elements in the given barrier."
  },
  "492": {
    "name": "BarrierInsertMany",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BarrierInsertMany",
    "signature": "(handle, keys, values, component_index, name=None)",
    "description": "For each key, assigns the respective value to the specified component."
  },
  "493": {
    "name": "BarrierReadySize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BarrierReadySize",
    "signature": "(handle, name=None)",
    "description": "Computes the number of complete elements in the given barrier."
  },
  "494": {
    "name": "BarrierTakeMany",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BarrierTakeMany",
    "signature": "(handle, num_elements, component_types, allow_small_batch=False, wait_for_incomplete=False, timeout_ms=-1, name=None)",
    "description": "Takes the given number of completed elements from a barrier."
  },
  "495": {
    "name": "Batch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Batch",
    "signature": "(in_tensors, num_batch_threads, max_batch_size, batch_timeout_micros, grad_timeout_micros, max_enqueued_batches=10, allowed_batch_sizes=[], container='', shared_name='', batching_queue='', name=None)",
    "description": "Batches all input tensors nondeterministically."
  },
  "496": {
    "name": "BatchCholesky",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchCholesky",
    "signature": "(input, name=None)",
    "description": "TODO: add doc."
  },
  "497": {
    "name": "BatchCholeskyGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchCholeskyGrad",
    "signature": "(l, grad, name=None)",
    "description": "TODO: add doc."
  },
  "498": {
    "name": "BatchDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchDataset",
    "signature": "(input_dataset, batch_size, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that batches `batch_size` elements from `input_dataset`."
  },
  "499": {
    "name": "BatchDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchDatasetV2",
    "signature": "(input_dataset, batch_size, drop_remainder, output_types, output_shapes, parallel_copy=False, metadata='', name=None)",
    "description": "Creates a dataset that batches `batch_size` elements from `input_dataset`."
  },
  "500": {
    "name": "BatchFFT",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchFFT",
    "signature": "(input, name=None)",
    "description": "TODO: add doc."
  },
  "501": {
    "name": "BatchFFT2D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchFFT2D",
    "signature": "(input, name=None)",
    "description": "TODO: add doc."
  },
  "502": {
    "name": "BatchFFT3D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchFFT3D",
    "signature": "(input, name=None)",
    "description": "TODO: add doc."
  },
  "503": {
    "name": "BatchFunction",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchFunction",
    "signature": "(in_tensors, captured_tensors, f, num_batch_threads, max_batch_size, batch_timeout_micros, Tout, max_enqueued_batches=10, allowed_batch_sizes=[], container='', shared_name='', batching_queue='', enable_large_batch_splitting=False, name=None)",
    "description": "Batches all the inputs tensors to the computation done by the function."
  },
  "504": {
    "name": "BatchIFFT",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchIFFT",
    "signature": "(input, name=None)",
    "description": "TODO: add doc."
  },
  "505": {
    "name": "BatchIFFT2D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchIFFT2D",
    "signature": "(input, name=None)",
    "description": "TODO: add doc."
  },
  "506": {
    "name": "BatchIFFT3D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchIFFT3D",
    "signature": "(input, name=None)",
    "description": "TODO: add doc."
  },
  "507": {
    "name": "BatchMatMul",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchMatMul",
    "signature": "(x, y, adj_x=False, adj_y=False, name=None)",
    "description": "Multiplies slices of two tensors in batches."
  },
  "508": {
    "name": "BatchMatMulV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchMatMulV2",
    "signature": "(x, y, adj_x=False, adj_y=False, name=None)",
    "description": "Multiplies slices of two tensors in batches."
  },
  "509": {
    "name": "BatchMatMulV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchMatMulV3",
    "signature": "(x, y, Tout, adj_x=False, adj_y=False, name=None)",
    "description": "Multiplies slices of two tensors in batches."
  },
  "510": {
    "name": "BatchMatrixBandPart",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchMatrixBandPart",
    "signature": "(input, num_lower, num_upper, name=None)",
    "description": "TODO: add doc."
  },
  "511": {
    "name": "BatchMatrixDeterminant",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchMatrixDeterminant",
    "signature": "(input, name=None)",
    "description": "TODO: add doc."
  },
  "512": {
    "name": "BatchMatrixDiag",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchMatrixDiag",
    "signature": "(diagonal, name=None)",
    "description": "TODO: add doc."
  },
  "513": {
    "name": "BatchMatrixDiagPart",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchMatrixDiagPart",
    "signature": "(input, name=None)",
    "description": "TODO: add doc."
  },
  "514": {
    "name": "BatchMatrixInverse",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchMatrixInverse",
    "signature": "(input, adjoint=False, name=None)",
    "description": "TODO: add doc."
  },
  "515": {
    "name": "BatchMatrixSetDiag",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchMatrixSetDiag",
    "signature": "(input, diagonal, name=None)",
    "description": "TODO: add doc."
  },
  "516": {
    "name": "BatchMatrixSolve",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchMatrixSolve",
    "signature": "(matrix, rhs, adjoint=False, name=None)",
    "description": "TODO: add doc."
  },
  "517": {
    "name": "BatchMatrixSolveLs",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchMatrixSolveLs",
    "signature": "(matrix, rhs, l2_regularizer, fast=True, name=None)",
    "description": "TODO: add doc."
  },
  "518": {
    "name": "BatchMatrixTriangularSolve",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchMatrixTriangularSolve",
    "signature": "(matrix, rhs, lower=True, adjoint=False, name=None)",
    "description": "TODO: add doc."
  },
  "519": {
    "name": "BatchSelfAdjointEig",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchSelfAdjointEig",
    "signature": "(input, name=None)",
    "description": "TODO: add doc."
  },
  "520": {
    "name": "BatchSelfAdjointEigV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchSelfAdjointEigV2",
    "signature": "(input, compute_v=True, name=None)",
    "description": "TODO: add doc."
  },
  "521": {
    "name": "BatchSvd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchSvd",
    "signature": "(input, compute_uv=True, full_matrices=False, name=None)",
    "description": "TODO: add doc."
  },
  "522": {
    "name": "BatchToSpace",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchToSpace",
    "signature": "(input, crops, block_size, name=None)",
    "description": "BatchToSpace for 4-D tensors of type T."
  },
  "523": {
    "name": "BatchToSpaceND",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BatchToSpaceND",
    "signature": "(input, block_shape, crops, name=None)",
    "description": "BatchToSpace for N-D tensors of type T."
  },
  "524": {
    "name": "BesselI0",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BesselI0",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "525": {
    "name": "BesselI0e",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BesselI0e",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "526": {
    "name": "BesselI1",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BesselI1",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "527": {
    "name": "BesselI1e",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BesselI1e",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "528": {
    "name": "BesselJ0",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BesselJ0",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "529": {
    "name": "BesselJ1",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BesselJ1",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "530": {
    "name": "BesselK0",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BesselK0",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "531": {
    "name": "BesselK0e",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BesselK0e",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "532": {
    "name": "BesselK1",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BesselK1",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "533": {
    "name": "BesselK1e",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BesselK1e",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "534": {
    "name": "BesselY0",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BesselY0",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "535": {
    "name": "BesselY1",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BesselY1",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "536": {
    "name": "Betainc",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Betainc",
    "signature": "(a, b, x, name=None)",
    "description": "Compute the regularized incomplete beta integral \\\\(I_x(a, b)\\\\)."
  },
  "537": {
    "name": "BiasAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BiasAdd",
    "signature": "(value, bias, data_format='NHWC', name=None)",
    "description": "Adds `bias` to `value`."
  },
  "538": {
    "name": "BiasAddGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BiasAddGrad",
    "signature": "(out_backprop, data_format='NHWC', name=None)",
    "description": "The backward operation for \"BiasAdd\" on the \"bias\" tensor."
  },
  "539": {
    "name": "Bincount",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Bincount",
    "signature": "(arr, size, weights, name=None)",
    "description": "Counts the number of occurrences of each value in an integer array."
  },
  "540": {
    "name": "Bitcast",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Bitcast",
    "signature": "(input, type, name=None)",
    "description": "Bitcasts a tensor from one type to another without copying data."
  },
  "541": {
    "name": "BitwiseAnd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BitwiseAnd",
    "signature": "(x, y, name=None)",
    "description": "Elementwise computes the bitwise AND of `x` and `y`."
  },
  "542": {
    "name": "BitwiseOr",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BitwiseOr",
    "signature": "(x, y, name=None)",
    "description": "Elementwise computes the bitwise OR of `x` and `y`."
  },
  "543": {
    "name": "BitwiseXor",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BitwiseXor",
    "signature": "(x, y, name=None)",
    "description": "Elementwise computes the bitwise XOR of `x` and `y`."
  },
  "544": {
    "name": "BlockLSTM",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BlockLSTM",
    "signature": "(seq_len_max, x, cs_prev, h_prev, w, wci, wcf, wco, b, forget_bias=1, cell_clip=3, use_peephole=False, name=None)",
    "description": "Computes the LSTM cell forward propagation for all the time steps."
  },
  "545": {
    "name": "BlockLSTMGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BlockLSTMGrad",
    "signature": "(seq_len_max, x, cs_prev, h_prev, w, wci, wcf, wco, b, i, cs, f, o, ci, co, h, cs_grad, h_grad, use_peephole, name=None)",
    "description": "Computes the LSTM cell backward propagation for the entire time sequence."
  },
  "546": {
    "name": "BlockLSTMGradV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BlockLSTMGradV2",
    "signature": "(seq_len_max, x, cs_prev, h_prev, w, wci, wcf, wco, b, i, cs, f, o, ci, co, h, cs_grad, h_grad, use_peephole, name=None)",
    "description": "Computes the LSTM cell backward propagation for the entire time sequence."
  },
  "547": {
    "name": "BlockLSTMV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BlockLSTMV2",
    "signature": "(seq_len_max, x, cs_prev, h_prev, w, wci, wcf, wco, b, cell_clip=0, use_peephole=False, name=None)",
    "description": "Computes the LSTM cell forward propagation for all the time steps."
  },
  "548": {
    "name": "BoostedTreesAggregateStats",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesAggregateStats",
    "signature": "(node_ids, gradients, hessians, feature, max_splits, num_buckets, name=None)",
    "description": "Aggregates the summary of accumulated stats for the batch."
  },
  "549": {
    "name": "BoostedTreesBucketize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesBucketize",
    "signature": "(float_values, bucket_boundaries, name=None)",
    "description": "Bucketize each feature based on bucket boundaries."
  },
  "550": {
    "name": "BoostedTreesCalculateBestFeatureSplit",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesCalculateBestFeatureSplit",
    "signature": "(node_id_range, stats_summary, l1, l2, tree_complexity, min_node_weight, logits_dimension, split_type='inequality', name=None)",
    "description": "Calculates gains for each feature and returns the best possible split information for the feature."
  },
  "551": {
    "name": "BoostedTreesCalculateBestFeatureSplitV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesCalculateBestFeatureSplitV2",
    "signature": "(node_id_range, stats_summaries_list, split_types, candidate_feature_ids, l1, l2, tree_complexity, min_node_weight, logits_dimension, name=None)",
    "description": "Calculates gains for each feature and returns the best possible split information for each node. However, if no split is found, then no split information is returned for that node."
  },
  "552": {
    "name": "BoostedTreesCalculateBestGainsPerFeature",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesCalculateBestGainsPerFeature",
    "signature": "(node_id_range, stats_summary_list, l1, l2, tree_complexity, min_node_weight, max_splits, name=None)",
    "description": "Calculates gains for each feature and returns the best possible split information for the feature."
  },
  "553": {
    "name": "BoostedTreesCenterBias",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesCenterBias",
    "signature": "(tree_ensemble_handle, mean_gradients, mean_hessians, l1, l2, name=None)",
    "description": "Calculates the prior from the training data (the bias) and fills in the first node with the logits' prior. Returns a boolean indicating whether to continue centering."
  },
  "554": {
    "name": "BoostedTreesCreateEnsemble",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesCreateEnsemble",
    "signature": "(tree_ensemble_handle, stamp_token, tree_ensemble_serialized, name=None)",
    "description": "Creates a tree ensemble model and returns a handle to it."
  },
  "555": {
    "name": "BoostedTreesCreateQuantileStreamResource",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesCreateQuantileStreamResource",
    "signature": "(quantile_stream_resource_handle, epsilon, num_streams, max_elements=1099511627776, name=None)",
    "description": "Create the Resource for Quantile Streams."
  },
  "556": {
    "name": "BoostedTreesDeserializeEnsemble",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesDeserializeEnsemble",
    "signature": "(tree_ensemble_handle, stamp_token, tree_ensemble_serialized, name=None)",
    "description": "Deserializes a serialized tree ensemble config and replaces current tree"
  },
  "557": {
    "name": "BoostedTreesEnsembleResourceHandleOp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesEnsembleResourceHandleOp",
    "signature": "(container='', shared_name='', name=None)",
    "description": "Creates a handle to a BoostedTreesEnsembleResource"
  },
  "558": {
    "name": "BoostedTreesExampleDebugOutputs",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesExampleDebugOutputs",
    "signature": "(tree_ensemble_handle, bucketized_features, logits_dimension, name=None)",
    "description": "Debugging/model interpretability outputs for each example."
  },
  "559": {
    "name": "BoostedTreesFlushQuantileSummaries",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesFlushQuantileSummaries",
    "signature": "(quantile_stream_resource_handle, num_features, name=None)",
    "description": "Flush the quantile summaries from each quantile stream resource."
  },
  "560": {
    "name": "BoostedTreesGetEnsembleStates",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesGetEnsembleStates",
    "signature": "(tree_ensemble_handle, name=None)",
    "description": "Retrieves the tree ensemble resource stamp token, number of trees and growing statistics."
  },
  "561": {
    "name": "BoostedTreesMakeQuantileSummaries",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesMakeQuantileSummaries",
    "signature": "(float_values, example_weights, epsilon, name=None)",
    "description": "Makes the summary of quantiles for the batch."
  },
  "562": {
    "name": "BoostedTreesMakeStatsSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesMakeStatsSummary",
    "signature": "(node_ids, gradients, hessians, bucketized_features_list, max_splits, num_buckets, name=None)",
    "description": "Makes the summary of accumulated stats for the batch."
  },
  "563": {
    "name": "BoostedTreesPredict",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesPredict",
    "signature": "(tree_ensemble_handle, bucketized_features, logits_dimension, name=None)",
    "description": "Runs multiple additive regression ensemble predictors on input instances and"
  },
  "564": {
    "name": "BoostedTreesQuantileStreamResourceAddSummaries",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesQuantileStreamResourceAddSummaries",
    "signature": "(quantile_stream_resource_handle, summaries, name=None)",
    "description": "Add the quantile summaries to each quantile stream resource."
  },
  "565": {
    "name": "BoostedTreesQuantileStreamResourceDeserialize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesQuantileStreamResourceDeserialize",
    "signature": "(quantile_stream_resource_handle, bucket_boundaries, name=None)",
    "description": "Deserialize bucket boundaries and ready flag into current QuantileAccumulator."
  },
  "566": {
    "name": "BoostedTreesQuantileStreamResourceFlush",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesQuantileStreamResourceFlush",
    "signature": "(quantile_stream_resource_handle, num_buckets, generate_quantiles=False, name=None)",
    "description": "Flush the summaries for a quantile stream resource."
  },
  "567": {
    "name": "BoostedTreesQuantileStreamResourceGetBucketBoundaries",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesQuantileStreamResourceGetBucketBoundaries",
    "signature": "(quantile_stream_resource_handle, num_features, name=None)",
    "description": "Generate the bucket boundaries for each feature based on accumulated summaries."
  },
  "568": {
    "name": "BoostedTreesQuantileStreamResourceHandleOp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesQuantileStreamResourceHandleOp",
    "signature": "(container='', shared_name='', name=None)",
    "description": "Creates a handle to a BoostedTreesQuantileStreamResource."
  },
  "569": {
    "name": "BoostedTreesSerializeEnsemble",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesSerializeEnsemble",
    "signature": "(tree_ensemble_handle, name=None)",
    "description": "Serializes the tree ensemble to a proto."
  },
  "570": {
    "name": "BoostedTreesSparseAggregateStats",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesSparseAggregateStats",
    "signature": "(node_ids, gradients, hessians, feature_indices, feature_values, feature_shape, max_splits, num_buckets, name=None)",
    "description": "Aggregates the summary of accumulated stats for the batch."
  },
  "571": {
    "name": "BoostedTreesSparseCalculateBestFeatureSplit",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesSparseCalculateBestFeatureSplit",
    "signature": "(node_id_range, stats_summary_indices, stats_summary_values, stats_summary_shape, l1, l2, tree_complexity, min_node_weight, logits_dimension, split_type='inequality', name=None)",
    "description": "Calculates gains for each feature and returns the best possible split information for the feature."
  },
  "572": {
    "name": "BoostedTreesTrainingPredict",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesTrainingPredict",
    "signature": "(tree_ensemble_handle, cached_tree_ids, cached_node_ids, bucketized_features, logits_dimension, name=None)",
    "description": "Runs multiple additive regression ensemble predictors on input instances and"
  },
  "573": {
    "name": "BoostedTreesUpdateEnsemble",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesUpdateEnsemble",
    "signature": "(tree_ensemble_handle, feature_ids, node_ids, gains, thresholds, left_node_contribs, right_node_contribs, max_depth, learning_rate, pruning_mode, name=None)",
    "description": "Updates the tree ensemble by either adding a layer to the last tree being grown"
  },
  "574": {
    "name": "BoostedTreesUpdateEnsembleV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BoostedTreesUpdateEnsembleV2",
    "signature": "(tree_ensemble_handle, feature_ids, dimension_ids, node_ids, gains, thresholds, left_node_contribs, right_node_contribs, split_types, max_depth, learning_rate, pruning_mode, logits_dimension=1, name=None)",
    "description": "Updates the tree ensemble by adding a layer to the last tree being grown"
  },
  "575": {
    "name": "BroadcastArgs",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BroadcastArgs",
    "signature": "(s0, s1, name=None)",
    "description": "Return the shape of s0 op s1 with broadcast."
  },
  "576": {
    "name": "BroadcastGradientArgs",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BroadcastGradientArgs",
    "signature": "(s0, s1, name=None)",
    "description": "Return the reduction indices for computing gradients of s0 op s1 with broadcast."
  },
  "577": {
    "name": "BroadcastTo",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BroadcastTo",
    "signature": "(input, shape, name=None)",
    "description": "Broadcast an array for a compatible shape."
  },
  "578": {
    "name": "Bucketize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Bucketize",
    "signature": "(input, boundaries, name=None)",
    "description": "Bucketizes 'input' based on 'boundaries'."
  },
  "579": {
    "name": "BytesProducedStatsDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.BytesProducedStatsDataset",
    "signature": "(input_dataset, tag, output_types, output_shapes, name=None)",
    "description": "Records the bytes size of each element of `input_dataset` in a StatsAggregator."
  },
  "580": {
    "name": "CSRSparseMatrixComponents",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CSRSparseMatrixComponents",
    "signature": "(csr_sparse_matrix, index, type, name=None)",
    "description": "Reads out the CSR components at batch `index`."
  },
  "581": {
    "name": "CSRSparseMatrixToDense",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CSRSparseMatrixToDense",
    "signature": "(sparse_input, type, name=None)",
    "description": "Convert a (possibly batched) CSRSparseMatrix to dense."
  },
  "582": {
    "name": "CSRSparseMatrixToSparseTensor",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CSRSparseMatrixToSparseTensor",
    "signature": "(sparse_matrix, type, name=None)",
    "description": "Converts a (possibly batched) CSRSparesMatrix to a SparseTensor."
  },
  "583": {
    "name": "CSVDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CSVDataset",
    "signature": "(filenames, compression_type, buffer_size, header, field_delim, use_quote_delim, na_value, select_cols, record_defaults, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "584": {
    "name": "CSVDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CSVDatasetV2",
    "signature": "(filenames, compression_type, buffer_size, header, field_delim, use_quote_delim, na_value, select_cols, record_defaults, exclude_cols, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "585": {
    "name": "CTCBeamSearchDecoder",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CTCBeamSearchDecoder",
    "signature": "(inputs, sequence_length, beam_width, top_paths, merge_repeated=True, name=None)",
    "description": "Performs beam search decoding on the logits given in input."
  },
  "586": {
    "name": "CTCGreedyDecoder",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CTCGreedyDecoder",
    "signature": "(inputs, sequence_length, merge_repeated=False, blank_index=-1, name=None)",
    "description": "Performs greedy decoding on the logits given in inputs."
  },
  "587": {
    "name": "CTCLoss",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CTCLoss",
    "signature": "(inputs, labels_indices, labels_values, sequence_length, preprocess_collapse_repeated=False, ctc_merge_repeated=True, ignore_longer_outputs_than_inputs=False, name=None)",
    "description": "Calculates the CTC Loss (log probability) for each batch entry.  Also calculates"
  },
  "588": {
    "name": "CTCLossV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CTCLossV2",
    "signature": "(inputs, labels_indices, labels_values, sequence_length, preprocess_collapse_repeated=False, ctc_merge_repeated=True, ignore_longer_outputs_than_inputs=False, name=None)",
    "description": "Calculates the CTC Loss (log probability) for each batch entry.  Also calculates"
  },
  "589": {
    "name": "CacheDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CacheDataset",
    "signature": "(input_dataset, filename, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that caches elements from `input_dataset`."
  },
  "590": {
    "name": "CacheDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CacheDatasetV2",
    "signature": "(input_dataset, filename, cache, output_types, output_shapes, metadata='', name=None)",
    "description": "TODO: add doc."
  },
  "591": {
    "name": "Case",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Case",
    "signature": "(branch_index, input, Tout, branches, output_shapes=[], name=None)",
    "description": "An n-way switch statement which calls a single branch function."
  },
  "592": {
    "name": "Cast",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Cast",
    "signature": "(x, DstT, Truncate=False, name=None)",
    "description": "Cast x of type SrcT to y of DstT."
  },
  "593": {
    "name": "Ceil",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Ceil",
    "signature": "(x, name=None)",
    "description": "Returns element-wise smallest integer not less than x."
  },
  "594": {
    "name": "CheckNumerics",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CheckNumerics",
    "signature": "(tensor, message, name=None)",
    "description": "Checks a tensor for NaN and Inf values."
  },
  "595": {
    "name": "CheckNumericsV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CheckNumericsV2",
    "signature": "(tensor, message, name=None)",
    "description": "Checks a tensor for NaN, -Inf and +Inf values."
  },
  "596": {
    "name": "Cholesky",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Cholesky",
    "signature": "(input, name=None)",
    "description": "Computes the Cholesky decomposition of one or more square matrices."
  },
  "597": {
    "name": "CholeskyGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CholeskyGrad",
    "signature": "(l, grad, name=None)",
    "description": "Computes the reverse mode backpropagated gradient of the Cholesky algorithm."
  },
  "598": {
    "name": "ChooseFastestBranchDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ChooseFastestBranchDataset",
    "signature": "(input_dataset, ratio_numerator, ratio_denominator, other_arguments, num_elements_per_branch, branches, other_arguments_lengths, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "599": {
    "name": "ChooseFastestDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ChooseFastestDataset",
    "signature": "(input_datasets, num_experiments, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "600": {
    "name": "ClipByValue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ClipByValue",
    "signature": "(t, clip_value_min, clip_value_max, name=None)",
    "description": "Clips tensor values to a specified min and max."
  },
  "601": {
    "name": "CloseSummaryWriter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CloseSummaryWriter",
    "signature": "(writer, name=None)",
    "description": "TODO: add doc."
  },
  "602": {
    "name": "CollectiveAllToAllV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CollectiveAllToAllV3",
    "signature": "(input, communicator, group_assignment, timeout_seconds=0, name=None)",
    "description": "Mutually exchanges multiple tensors of identical type and shape."
  },
  "603": {
    "name": "CollectiveAssignGroupV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CollectiveAssignGroupV2",
    "signature": "(group_assignment, device_index, base_key, name=None)",
    "description": "Assign group keys based on group assignment."
  },
  "604": {
    "name": "CollectiveBcastRecv",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CollectiveBcastRecv",
    "signature": "(T, group_size, group_key, instance_key, shape, communication_hint='auto', timeout_seconds=0, name=None)",
    "description": "Receives a tensor value broadcast from another device."
  },
  "605": {
    "name": "CollectiveBcastRecvV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CollectiveBcastRecvV2",
    "signature": "(group_size, group_key, instance_key, shape, T, communication_hint='auto', timeout_seconds=0, name=None)",
    "description": "Receives a tensor value broadcast from another device."
  },
  "606": {
    "name": "CollectiveBcastSend",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CollectiveBcastSend",
    "signature": "(input, group_size, group_key, instance_key, shape, communication_hint='auto', timeout_seconds=0, name=None)",
    "description": "Broadcasts a tensor value to one or more other devices."
  },
  "607": {
    "name": "CollectiveBcastSendV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CollectiveBcastSendV2",
    "signature": "(input, group_size, group_key, instance_key, communication_hint='auto', timeout_seconds=0, name=None)",
    "description": "Broadcasts a tensor value to one or more other devices."
  },
  "608": {
    "name": "CollectiveGather",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CollectiveGather",
    "signature": "(input, group_size, group_key, instance_key, shape, communication_hint='auto', timeout_seconds=0, name=None)",
    "description": "Mutually accumulates multiple tensors of identical type and shape."
  },
  "609": {
    "name": "CollectiveGatherV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CollectiveGatherV2",
    "signature": "(input, group_size, group_key, instance_key, ordering_token, communication_hint='auto', timeout_seconds=0, name=None)",
    "description": "Mutually accumulates multiple tensors of identical type and shape."
  },
  "610": {
    "name": "CollectiveInitializeCommunicator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CollectiveInitializeCommunicator",
    "signature": "(group_key, rank, group_size, communication_hint='auto', timeout_seconds=0, name=None)",
    "description": "Initializes a group for collective operations."
  },
  "611": {
    "name": "CollectivePermute",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CollectivePermute",
    "signature": "(input, source_target_pairs, name=None)",
    "description": "An Op to permute tensors across replicated TPU instances."
  },
  "612": {
    "name": "CollectiveReduce",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CollectiveReduce",
    "signature": "(input, group_size, group_key, instance_key, merge_op, final_op, subdiv_offsets, wait_for=[], communication_hint='auto', timeout_seconds=0, name=None)",
    "description": "Mutually reduces multiple tensors of identical type and shape."
  },
  "613": {
    "name": "CollectiveReduceV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CollectiveReduceV2",
    "signature": "(input, group_size, group_key, instance_key, ordering_token, merge_op, final_op, communication_hint='auto', timeout_seconds=0, max_subdivs_per_device=-1, name=None)",
    "description": "Mutually reduces multiple tensors of identical type and shape."
  },
  "614": {
    "name": "CollectiveReduceV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CollectiveReduceV3",
    "signature": "(input, communicator, group_assignment, reduction, timeout_seconds=0, name=None)",
    "description": "Mutually reduces multiple tensors of identical type and shape."
  },
  "615": {
    "name": "CombinedNonMaxSuppression",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CombinedNonMaxSuppression",
    "signature": "(boxes, scores, max_output_size_per_class, max_total_size, iou_threshold, score_threshold, pad_per_class=False, clip_boxes=True, name=None)",
    "description": "Greedily selects a subset of bounding boxes in descending order of score,"
  },
  "616": {
    "name": "Complex",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Complex",
    "signature": "(real, imag, Tout=tf.complex64, name=None)",
    "description": "Converts two real numbers to a complex number."
  },
  "617": {
    "name": "ComplexAbs",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ComplexAbs",
    "signature": "(x, Tout=tf.float32, name=None)",
    "description": "Computes the complex absolute value of a tensor."
  },
  "618": {
    "name": "CompositeTensorVariantFromComponents",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CompositeTensorVariantFromComponents",
    "signature": "(components, metadata, name=None)",
    "description": "Encodes an `ExtensionType` value into a `variant` scalar Tensor."
  },
  "619": {
    "name": "CompositeTensorVariantToComponents",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CompositeTensorVariantToComponents",
    "signature": "(encoded, metadata, Tcomponents, name=None)",
    "description": "Decodes a `variant` scalar Tensor into an `ExtensionType` value."
  },
  "620": {
    "name": "CompressElement",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CompressElement",
    "signature": "(components, name=None)",
    "description": "Compresses a dataset element."
  },
  "621": {
    "name": "ComputeAccidentalHits",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ComputeAccidentalHits",
    "signature": "(true_classes, sampled_candidates, num_true, seed=0, seed2=0, name=None)",
    "description": "Computes the ids of the positions in sampled_candidates that match true_labels."
  },
  "622": {
    "name": "ComputeBatchSize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ComputeBatchSize",
    "signature": "(input_dataset, name=None)",
    "description": "Computes the static batch size of a dataset sans partial batches."
  },
  "623": {
    "name": "Concat",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Concat",
    "signature": "(concat_dim, values, name=None)",
    "description": "Concatenates tensors along one dimension."
  },
  "624": {
    "name": "ConcatOffset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ConcatOffset",
    "signature": "(concat_dim, shape, name=None)",
    "description": "Computes offsets of concat inputs within its output."
  },
  "625": {
    "name": "ConcatV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ConcatV2",
    "signature": "(values, axis, name=None)",
    "description": "Concatenates tensors along one dimension."
  },
  "626": {
    "name": "ConcatenateDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ConcatenateDataset",
    "signature": "(input_dataset, another_dataset, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that concatenates `input_dataset` with `another_dataset`."
  },
  "627": {
    "name": "ConditionalAccumulator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ConditionalAccumulator",
    "signature": "(dtype, shape, container='', shared_name='', reduction_type='MEAN', name=None)",
    "description": "A conditional accumulator for aggregating gradients."
  },
  "628": {
    "name": "ConfigureDistributedTPU",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ConfigureDistributedTPU",
    "signature": "(embedding_config='', tpu_embedding_config='', is_global_init=False, enable_whole_mesh_compilations=False, compilation_failure_closes_chips=True, tpu_cancellation_closes_chips=0, name=None)",
    "description": "Sets up the centralized structures for a distributed TPU system."
  },
  "629": {
    "name": "ConfigureTPUEmbedding",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ConfigureTPUEmbedding",
    "signature": "(config, name=None)",
    "description": "Sets up TPUEmbedding in a distributed TPU system."
  },
  "630": {
    "name": "Conj",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Conj",
    "signature": "(input, name=None)",
    "description": "Returns the complex conjugate of a complex number."
  },
  "631": {
    "name": "ConjugateTranspose",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ConjugateTranspose",
    "signature": "(x, perm, name=None)",
    "description": "Shuffle dimensions of x according to a permutation and conjugate the result."
  },
  "632": {
    "name": "Const",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Const",
    "signature": "(value, dtype, name=None)",
    "description": "Returns a constant tensor."
  },
  "633": {
    "name": "ConsumeMutexLock",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ConsumeMutexLock",
    "signature": "(mutex_lock, name=None)",
    "description": "This op consumes a lock created by `MutexLock`."
  },
  "634": {
    "name": "ControlTrigger",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ControlTrigger",
    "signature": "(name=None)",
    "description": "Does nothing. Serves as a control trigger for scheduling."
  },
  "635": {
    "name": "Conv2D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Conv2D",
    "signature": "(input, filter, strides, padding, use_cudnn_on_gpu=True, explicit_paddings=[], data_format='NHWC', dilations=[1, 1, 1, 1], name=None)",
    "description": "Computes a 2-D convolution given 4-D `input` and `filter` tensors."
  },
  "636": {
    "name": "Conv2DBackpropFilter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Conv2DBackpropFilter",
    "signature": "(input, filter_sizes, out_backprop, strides, padding, use_cudnn_on_gpu=True, explicit_paddings=[], data_format='NHWC', dilations=[1, 1, 1, 1], name=None)",
    "description": "Computes the gradients of convolution with respect to the filter."
  },
  "637": {
    "name": "Conv2DBackpropInput",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Conv2DBackpropInput",
    "signature": "(input_sizes, filter, out_backprop, strides, padding, use_cudnn_on_gpu=True, explicit_paddings=[], data_format='NHWC', dilations=[1, 1, 1, 1], name=None)",
    "description": "Computes the gradients of convolution with respect to the input."
  },
  "638": {
    "name": "Conv3D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Conv3D",
    "signature": "(input, filter, strides, padding, data_format='NDHWC', dilations=[1, 1, 1, 1, 1], name=None)",
    "description": "Computes a 3-D convolution given 5-D `input` and `filter` tensors."
  },
  "639": {
    "name": "Conv3DBackpropFilter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Conv3DBackpropFilter",
    "signature": "(input, filter, out_backprop, strides, padding, dilations=[1, 1, 1, 1, 1], name=None)",
    "description": "Computes the gradients of 3-D convolution with respect to the filter."
  },
  "640": {
    "name": "Conv3DBackpropFilterV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Conv3DBackpropFilterV2",
    "signature": "(input, filter_sizes, out_backprop, strides, padding, data_format='NDHWC', dilations=[1, 1, 1, 1, 1], name=None)",
    "description": "Computes the gradients of 3-D convolution with respect to the filter."
  },
  "641": {
    "name": "Conv3DBackpropInput",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Conv3DBackpropInput",
    "signature": "(input, filter, out_backprop, strides, padding, dilations=[1, 1, 1, 1, 1], name=None)",
    "description": "Computes the gradients of 3-D convolution with respect to the input."
  },
  "642": {
    "name": "Conv3DBackpropInputV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Conv3DBackpropInputV2",
    "signature": "(input_sizes, filter, out_backprop, strides, padding, data_format='NDHWC', dilations=[1, 1, 1, 1, 1], name=None)",
    "description": "Computes the gradients of 3-D convolution with respect to the input."
  },
  "643": {
    "name": "Copy",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Copy",
    "signature": "(input, tensor_name='', debug_ops_spec=[], name=None)",
    "description": "Copy a tensor from CPU-to-CPU or GPU-to-GPU."
  },
  "644": {
    "name": "CopyHost",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CopyHost",
    "signature": "(input, tensor_name='', debug_ops_spec=[], name=None)",
    "description": "Copy a tensor to host."
  },
  "645": {
    "name": "Cos",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Cos",
    "signature": "(x, name=None)",
    "description": "Computes cos of x element-wise."
  },
  "646": {
    "name": "Cosh",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Cosh",
    "signature": "(x, name=None)",
    "description": "Computes hyperbolic cosine of x element-wise."
  },
  "647": {
    "name": "CountUpTo",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CountUpTo",
    "signature": "(ref, limit, name=None)",
    "description": "Increments 'ref' until it reaches 'limit'."
  },
  "648": {
    "name": "CreateSummaryDbWriter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CreateSummaryDbWriter",
    "signature": "(writer, db_uri, experiment_name, run_name, user_name, name=None)",
    "description": "TODO: add doc."
  },
  "649": {
    "name": "CreateSummaryFileWriter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CreateSummaryFileWriter",
    "signature": "(writer, logdir, max_queue, flush_millis, filename_suffix, name=None)",
    "description": "TODO: add doc."
  },
  "650": {
    "name": "CropAndResize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CropAndResize",
    "signature": "(image, boxes, box_ind, crop_size, method='bilinear', extrapolation_value=0, name=None)",
    "description": "Extracts crops from the input image tensor and resizes them."
  },
  "651": {
    "name": "CropAndResizeGradBoxes",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CropAndResizeGradBoxes",
    "signature": "(grads, image, boxes, box_ind, method='bilinear', name=None)",
    "description": "Computes the gradient of the crop_and_resize op wrt the input boxes tensor."
  },
  "652": {
    "name": "CropAndResizeGradImage",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CropAndResizeGradImage",
    "signature": "(grads, boxes, box_ind, image_size, T, method='bilinear', name=None)",
    "description": "Computes the gradient of the crop_and_resize op wrt the input image tensor."
  },
  "653": {
    "name": "Cross",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Cross",
    "signature": "(a, b, name=None)",
    "description": "Compute the pairwise cross product."
  },
  "654": {
    "name": "CrossReplicaSum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CrossReplicaSum",
    "signature": "(input, group_assignment, name=None)",
    "description": "An Op to sum inputs across replicated TPU instances."
  },
  "655": {
    "name": "CudnnRNN",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CudnnRNN",
    "signature": "(input, input_h, input_c, params, rnn_mode='lstm', input_mode='linear_input', direction='unidirectional', dropout=0, seed=0, seed2=0, is_training=True, name=None)",
    "description": "A RNN backed by cuDNN."
  },
  "656": {
    "name": "CudnnRNNBackprop",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CudnnRNNBackprop",
    "signature": "(input, input_h, input_c, params, output, output_h, output_c, output_backprop, output_h_backprop, output_c_backprop, reserve_space, rnn_mode='lstm', input_mode='linear_input', direction='unidirectional', dropout=0, seed=0, seed2=0, name=None)",
    "description": "Backprop step of CudnnRNN."
  },
  "657": {
    "name": "CudnnRNNBackpropV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CudnnRNNBackpropV2",
    "signature": "(input, input_h, input_c, params, output, output_h, output_c, output_backprop, output_h_backprop, output_c_backprop, reserve_space, host_reserved, rnn_mode='lstm', input_mode='linear_input', direction='unidirectional', dropout=0, seed=0, seed2=0, name=None)",
    "description": "Backprop step of CudnnRNN."
  },
  "658": {
    "name": "CudnnRNNBackpropV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CudnnRNNBackpropV3",
    "signature": "(input, input_h, input_c, params, sequence_lengths, output, output_h, output_c, output_backprop, output_h_backprop, output_c_backprop, reserve_space, host_reserved, rnn_mode='lstm', input_mode='linear_input', direction='unidirectional', dropout=0, seed=0, seed2=0, num_proj=0, time_major=True, name=None)",
    "description": "Backprop step of CudnnRNNV3."
  },
  "659": {
    "name": "CudnnRNNCanonicalToParams",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CudnnRNNCanonicalToParams",
    "signature": "(num_layers, num_units, input_size, weights, biases, rnn_mode='lstm', input_mode='linear_input', direction='unidirectional', dropout=0, seed=0, seed2=0, name=None)",
    "description": "Converts CudnnRNN params from canonical form to usable form."
  },
  "660": {
    "name": "CudnnRNNCanonicalToParamsV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CudnnRNNCanonicalToParamsV2",
    "signature": "(num_layers, num_units, input_size, weights, biases, rnn_mode='lstm', input_mode='linear_input', direction='unidirectional', dropout=0, seed=0, seed2=0, num_proj=0, name=None)",
    "description": "Converts CudnnRNN params from canonical form to usable form. It supports the projection in LSTM."
  },
  "661": {
    "name": "CudnnRNNParamsSize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CudnnRNNParamsSize",
    "signature": "(num_layers, num_units, input_size, T, S, rnn_mode='lstm', input_mode='linear_input', direction='unidirectional', dropout=0, seed=0, seed2=0, num_proj=0, name=None)",
    "description": "Computes size of weights that can be used by a Cudnn RNN model."
  },
  "662": {
    "name": "CudnnRNNParamsToCanonical",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CudnnRNNParamsToCanonical",
    "signature": "(num_layers, num_units, input_size, params, num_params, rnn_mode='lstm', input_mode='linear_input', direction='unidirectional', dropout=0, seed=0, seed2=0, name=None)",
    "description": "Retrieves CudnnRNN params in canonical form."
  },
  "663": {
    "name": "CudnnRNNParamsToCanonicalV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CudnnRNNParamsToCanonicalV2",
    "signature": "(num_layers, num_units, input_size, params, num_params_weights, num_params_biases, rnn_mode='lstm', input_mode='linear_input', direction='unidirectional', dropout=0, seed=0, seed2=0, num_proj=0, name=None)",
    "description": "Retrieves CudnnRNN params in canonical form. It supports the projection in LSTM."
  },
  "664": {
    "name": "CudnnRNNV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CudnnRNNV2",
    "signature": "(input, input_h, input_c, params, rnn_mode='lstm', input_mode='linear_input', direction='unidirectional', dropout=0, seed=0, seed2=0, is_training=True, name=None)",
    "description": "A RNN backed by cuDNN."
  },
  "665": {
    "name": "CudnnRNNV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CudnnRNNV3",
    "signature": "(input, input_h, input_c, params, sequence_lengths, rnn_mode='lstm', input_mode='linear_input', direction='unidirectional', dropout=0, seed=0, seed2=0, num_proj=0, is_training=True, time_major=True, name=None)",
    "description": "A RNN backed by cuDNN."
  },
  "666": {
    "name": "Cumprod",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Cumprod",
    "signature": "(x, axis, exclusive=False, reverse=False, name=None)",
    "description": "Compute the cumulative product of the tensor `x` along `axis`."
  },
  "667": {
    "name": "Cumsum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Cumsum",
    "signature": "(x, axis, exclusive=False, reverse=False, name=None)",
    "description": "Compute the cumulative sum of the tensor `x` along `axis`."
  },
  "668": {
    "name": "CumulativeLogsumexp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.CumulativeLogsumexp",
    "signature": "(x, axis, exclusive=False, reverse=False, name=None)",
    "description": "Compute the cumulative product of the tensor `x` along `axis`."
  },
  "669": {
    "name": "DataFormatDimMap",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DataFormatDimMap",
    "signature": "(x, src_format='NHWC', dst_format='NCHW', name=None)",
    "description": "Returns the dimension index in the destination data format given the one in"
  },
  "670": {
    "name": "DataFormatVecPermute",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DataFormatVecPermute",
    "signature": "(x, src_format='NHWC', dst_format='NCHW', name=None)",
    "description": "Permute input tensor from `src_format` to `dst_format`."
  },
  "671": {
    "name": "DataServiceDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DataServiceDataset",
    "signature": "(dataset_id, processing_mode, address, protocol, job_name, max_outstanding_requests, iteration_counter, output_types, output_shapes, task_refresh_interval_hint_ms=-1, data_transfer_protocol='', target_workers='AUTO', cross_trainer_cache_options='', name=None)",
    "description": "Creates a dataset that reads data from the tf.data service."
  },
  "672": {
    "name": "DataServiceDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DataServiceDatasetV2",
    "signature": "(dataset_id, processing_mode, address, protocol, job_name, consumer_index, num_consumers, max_outstanding_requests, iteration_counter, output_types, output_shapes, task_refresh_interval_hint_ms=-1, data_transfer_protocol='', target_workers='AUTO', cross_trainer_cache_options='', name=None)",
    "description": "Creates a dataset that reads data from the tf.data service."
  },
  "673": {
    "name": "DataServiceDatasetV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DataServiceDatasetV3",
    "signature": "(dataset_id, processing_mode, address, protocol, job_name, consumer_index, num_consumers, max_outstanding_requests, iteration_counter, output_types, output_shapes, uncompress_fn, task_refresh_interval_hint_ms=-1, data_transfer_protocol='', target_workers='AUTO', uncompress=False, cross_trainer_cache_options='', name=None)",
    "description": "Creates a dataset that reads data from the tf.data service."
  },
  "674": {
    "name": "DataServiceDatasetV4",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DataServiceDatasetV4",
    "signature": "(dataset_id, processing_mode, address, protocol, job_name, consumer_index, num_consumers, max_outstanding_requests, iteration_counter, output_types, output_shapes, uncompress_fn, task_refresh_interval_hint_ms=-1, data_transfer_protocol='', target_workers='AUTO', uncompress=False, cross_trainer_cache_options='', name=None)",
    "description": "Creates a dataset that reads data from the tf.data service."
  },
  "675": {
    "name": "DatasetCardinality",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DatasetCardinality",
    "signature": "(input_dataset, name=None)",
    "description": "Returns the cardinality of `input_dataset`."
  },
  "676": {
    "name": "DatasetFromGraph",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DatasetFromGraph",
    "signature": "(graph_def, name=None)",
    "description": "Creates a dataset from the given `graph_def`."
  },
  "677": {
    "name": "DatasetToGraph",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DatasetToGraph",
    "signature": "(input_dataset, stateful_whitelist=[], allow_stateful=False, strip_device_assignment=False, name=None)",
    "description": "Returns a serialized GraphDef representing `input_dataset`."
  },
  "678": {
    "name": "DatasetToGraphV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DatasetToGraphV2",
    "signature": "(input_dataset, external_state_policy=0, strip_device_assignment=False, name=None)",
    "description": "Returns a serialized GraphDef representing `input_dataset`."
  },
  "679": {
    "name": "DatasetToSingleElement",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DatasetToSingleElement",
    "signature": "(dataset, output_types, output_shapes, metadata='', name=None)",
    "description": "Outputs the single element from the given dataset."
  },
  "680": {
    "name": "DatasetToTFRecord",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DatasetToTFRecord",
    "signature": "(input_dataset, filename, compression_type, name=None)",
    "description": "Writes the given dataset to the given file using the TFRecord format."
  },
  "681": {
    "name": "Dawsn",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Dawsn",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "682": {
    "name": "DebugGradientIdentity",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DebugGradientIdentity",
    "signature": "(input, name=None)",
    "description": "Identity op for gradient debugging."
  },
  "683": {
    "name": "DebugGradientRefIdentity",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DebugGradientRefIdentity",
    "signature": "(input, name=None)",
    "description": "Identity op for gradient debugging."
  },
  "684": {
    "name": "DebugIdentity",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DebugIdentity",
    "signature": "(input, device_name='', tensor_name='', debug_urls=[], gated_grpc=False, name=None)",
    "description": "Provides an identity mapping of the non-Ref type input tensor for debugging."
  },
  "685": {
    "name": "DebugIdentityV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DebugIdentityV2",
    "signature": "(input, tfdbg_context_id='', op_name='', output_slot=-1, tensor_debug_mode=-1, debug_urls=[], circular_buffer_size=1000, tfdbg_run_id='', name=None)",
    "description": "Debug Identity V2 Op."
  },
  "686": {
    "name": "DebugNanCount",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DebugNanCount",
    "signature": "(input, device_name='', tensor_name='', debug_urls=[], gated_grpc=False, name=None)",
    "description": "Debug NaN Value Counter Op."
  },
  "687": {
    "name": "DebugNumericSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DebugNumericSummary",
    "signature": "(input, device_name='', tensor_name='', debug_urls=[], lower_bound=-inf, upper_bound=inf, mute_if_healthy=False, gated_grpc=False, name=None)",
    "description": "Debug Numeric Summary Op."
  },
  "688": {
    "name": "DebugNumericSummaryV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DebugNumericSummaryV2",
    "signature": "(input, output_dtype=tf.float32, tensor_debug_mode=-1, tensor_id=-1, name=None)",
    "description": "Debug Numeric Summary V2 Op."
  },
  "689": {
    "name": "DecodeAndCropJpeg",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DecodeAndCropJpeg",
    "signature": "(contents, crop_window, channels=0, ratio=1, fancy_upscaling=True, try_recover_truncated=False, acceptable_fraction=1, dct_method='', name=None)",
    "description": "Decode and Crop a JPEG-encoded image to a uint8 tensor."
  },
  "690": {
    "name": "DecodeBase64",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DecodeBase64",
    "signature": "(input, name=None)",
    "description": "Decode web-safe base64-encoded strings."
  },
  "691": {
    "name": "DecodeBmp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DecodeBmp",
    "signature": "(contents, channels=0, name=None)",
    "description": "Decode the first frame of a BMP-encoded image to a uint8 tensor."
  },
  "692": {
    "name": "DecodeCSV",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DecodeCSV",
    "signature": "(records, record_defaults, field_delim=',', use_quote_delim=True, na_value='', select_cols=[], name=None)",
    "description": "Convert CSV records to tensors. Each column maps to one tensor."
  },
  "693": {
    "name": "DecodeCompressed",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DecodeCompressed",
    "signature": "(bytes, compression_type='', name=None)",
    "description": "Decompress strings."
  },
  "694": {
    "name": "DecodeGif",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DecodeGif",
    "signature": "(contents, name=None)",
    "description": "Decode the frame(s) of a GIF-encoded image to a uint8 tensor."
  },
  "695": {
    "name": "DecodeImage",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DecodeImage",
    "signature": "(contents, channels=0, dtype=tf.uint8, expand_animations=True, name=None)",
    "description": "Function for decode_bmp, decode_gif, decode_jpeg, and decode_png."
  },
  "696": {
    "name": "DecodeJSONExample",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DecodeJSONExample",
    "signature": "(json_examples, name=None)",
    "description": "Convert JSON-encoded Example records to binary protocol buffer strings."
  },
  "697": {
    "name": "DecodeJpeg",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DecodeJpeg",
    "signature": "(contents, channels=0, ratio=1, fancy_upscaling=True, try_recover_truncated=False, acceptable_fraction=1, dct_method='', name=None)",
    "description": "Decode a JPEG-encoded image to a uint8 tensor."
  },
  "698": {
    "name": "DecodePaddedRaw",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DecodePaddedRaw",
    "signature": "(input_bytes, fixed_length, out_type, little_endian=True, name=None)",
    "description": "Reinterpret the bytes of a string as a vector of numbers."
  },
  "699": {
    "name": "DecodePng",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DecodePng",
    "signature": "(contents, channels=0, dtype=tf.uint8, name=None)",
    "description": "Decode a PNG-encoded image to a uint8 or uint16 tensor."
  },
  "700": {
    "name": "DecodeProtoV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DecodeProtoV2",
    "signature": "(bytes, message_type, field_names, output_types, descriptor_source='local://', message_format='binary', sanitize=False, name=None)",
    "description": "The op extracts fields from a serialized protocol buffers message into tensors."
  },
  "701": {
    "name": "DecodeRaw",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DecodeRaw",
    "signature": "(bytes, out_type, little_endian=True, name=None)",
    "description": "Reinterpret the bytes of a string as a vector of numbers."
  },
  "702": {
    "name": "DecodeWav",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DecodeWav",
    "signature": "(contents, desired_channels=-1, desired_samples=-1, name=None)",
    "description": "Decode a 16-bit PCM WAV file to a float tensor."
  },
  "703": {
    "name": "DeepCopy",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DeepCopy",
    "signature": "(x, name=None)",
    "description": "Makes a copy of `x`."
  },
  "704": {
    "name": "DeleteIterator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DeleteIterator",
    "signature": "(handle, deleter, name=None)",
    "description": "A container for an iterator resource."
  },
  "705": {
    "name": "DeleteMemoryCache",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DeleteMemoryCache",
    "signature": "(handle, deleter, name=None)",
    "description": "TODO: add doc."
  },
  "706": {
    "name": "DeleteMultiDeviceIterator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DeleteMultiDeviceIterator",
    "signature": "(multi_device_iterator, iterators, deleter, name=None)",
    "description": "A container for an iterator resource."
  },
  "707": {
    "name": "DeleteRandomSeedGenerator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DeleteRandomSeedGenerator",
    "signature": "(handle, deleter, name=None)",
    "description": "TODO: add doc."
  },
  "708": {
    "name": "DeleteSeedGenerator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DeleteSeedGenerator",
    "signature": "(handle, deleter, name=None)",
    "description": "TODO: add doc."
  },
  "709": {
    "name": "DeleteSessionTensor",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DeleteSessionTensor",
    "signature": "(handle, name=None)",
    "description": "Delete the tensor specified by its handle in the session."
  },
  "710": {
    "name": "DenseBincount",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DenseBincount",
    "signature": "(input, size, weights, binary_output=False, name=None)",
    "description": "Counts the number of occurrences of each value in an integer array."
  },
  "711": {
    "name": "DenseCountSparseOutput",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DenseCountSparseOutput",
    "signature": "(values, weights, binary_output, minlength=-1, maxlength=-1, name=None)",
    "description": "Performs sparse-output bin counting for a tf.tensor input."
  },
  "712": {
    "name": "DenseToCSRSparseMatrix",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DenseToCSRSparseMatrix",
    "signature": "(dense_input, indices, name=None)",
    "description": "Converts a dense tensor to a (possibly batched) CSRSparseMatrix."
  },
  "713": {
    "name": "DenseToDenseSetOperation",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DenseToDenseSetOperation",
    "signature": "(set1, set2, set_operation, validate_indices=True, name=None)",
    "description": "Applies set operation along last dimension of 2 `Tensor` inputs."
  },
  "714": {
    "name": "DenseToSparseBatchDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DenseToSparseBatchDataset",
    "signature": "(input_dataset, batch_size, row_shape, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that batches input elements into a SparseTensor."
  },
  "715": {
    "name": "DenseToSparseSetOperation",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DenseToSparseSetOperation",
    "signature": "(set1, set2_indices, set2_values, set2_shape, set_operation, validate_indices=True, name=None)",
    "description": "Applies set operation along last dimension of `Tensor` and `SparseTensor`."
  },
  "716": {
    "name": "DepthToSpace",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DepthToSpace",
    "signature": "(input, block_size, data_format='NHWC', name=None)",
    "description": "DepthToSpace for tensors of type T."
  },
  "717": {
    "name": "DepthwiseConv2dNative",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DepthwiseConv2dNative",
    "signature": "(input, filter, strides, padding, explicit_paddings=[], data_format='NHWC', dilations=[1, 1, 1, 1], name=None)",
    "description": "Computes a 2-D depthwise convolution given 4-D `input` and `filter` tensors."
  },
  "718": {
    "name": "DepthwiseConv2dNativeBackpropFilter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DepthwiseConv2dNativeBackpropFilter",
    "signature": "(input, filter_sizes, out_backprop, strides, padding, explicit_paddings=[], data_format='NHWC', dilations=[1, 1, 1, 1], name=None)",
    "description": "Computes the gradients of depthwise convolution with respect to the filter."
  },
  "719": {
    "name": "DepthwiseConv2dNativeBackpropInput",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DepthwiseConv2dNativeBackpropInput",
    "signature": "(input_sizes, filter, out_backprop, strides, padding, explicit_paddings=[], data_format='NHWC', dilations=[1, 1, 1, 1], name=None)",
    "description": "Computes the gradients of depthwise convolution with respect to the input."
  },
  "720": {
    "name": "Dequantize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Dequantize",
    "signature": "(input, min_range, max_range, mode='MIN_COMBINED', narrow_range=False, axis=-1, dtype=tf.float32, name=None)",
    "description": "Dequantize the 'input' tensor into a float or bfloat16 Tensor."
  },
  "721": {
    "name": "DeserializeIterator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DeserializeIterator",
    "signature": "(resource_handle, serialized, name=None)",
    "description": "Converts the given variant tensor to an iterator and stores it in the given resource."
  },
  "722": {
    "name": "DeserializeManySparse",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DeserializeManySparse",
    "signature": "(serialized_sparse, dtype, name=None)",
    "description": "Deserialize and concatenate `SparseTensors` from a serialized minibatch."
  },
  "723": {
    "name": "DeserializeSparse",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DeserializeSparse",
    "signature": "(serialized_sparse, dtype, name=None)",
    "description": "Deserialize `SparseTensor` objects."
  },
  "724": {
    "name": "DestroyResourceOp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DestroyResourceOp",
    "signature": "(resource, ignore_lookup_error=True, name=None)",
    "description": "Deletes the resource specified by the handle."
  },
  "725": {
    "name": "DestroyTemporaryVariable",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DestroyTemporaryVariable",
    "signature": "(ref, var_name, name=None)",
    "description": "Destroys the temporary variable and returns its final value."
  },
  "726": {
    "name": "DeviceIndex",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DeviceIndex",
    "signature": "(device_names, name=None)",
    "description": "Return the index of device the op runs."
  },
  "727": {
    "name": "Diag",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Diag",
    "signature": "(diagonal, name=None)",
    "description": "Returns a diagonal tensor with a given diagonal values."
  },
  "728": {
    "name": "DiagPart",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DiagPart",
    "signature": "(input, name=None)",
    "description": "Returns the diagonal part of the tensor."
  },
  "729": {
    "name": "Digamma",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Digamma",
    "signature": "(x, name=None)",
    "description": "Computes Psi, the derivative of Lgamma (the log of the absolute value of"
  },
  "730": {
    "name": "Dilation2D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Dilation2D",
    "signature": "(input, filter, strides, rates, padding, name=None)",
    "description": "Computes the grayscale dilation of 4-D `input` and 3-D `filter` tensors."
  },
  "731": {
    "name": "Dilation2DBackpropFilter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Dilation2DBackpropFilter",
    "signature": "(input, filter, out_backprop, strides, rates, padding, name=None)",
    "description": "Computes the gradient of morphological 2-D dilation with respect to the filter."
  },
  "732": {
    "name": "Dilation2DBackpropInput",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Dilation2DBackpropInput",
    "signature": "(input, filter, out_backprop, strides, rates, padding, name=None)",
    "description": "Computes the gradient of morphological 2-D dilation with respect to the input."
  },
  "733": {
    "name": "DirectedInterleaveDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DirectedInterleaveDataset",
    "signature": "(selector_input_dataset, data_input_datasets, output_types, output_shapes, stop_on_empty_dataset=False, name=None)",
    "description": "A substitute for `InterleaveDataset` on a fixed list of `N` datasets."
  },
  "734": {
    "name": "DisableCopyOnRead",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DisableCopyOnRead",
    "signature": "(resource, name=None)",
    "description": "Turns off the copy-on-read mode."
  },
  "735": {
    "name": "Div",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Div",
    "signature": "(x, y, name=None)",
    "description": "Returns x / y element-wise."
  },
  "736": {
    "name": "DivNoNan",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DivNoNan",
    "signature": "(x, y, name=None)",
    "description": "Returns 0 if the denominator is zero."
  },
  "737": {
    "name": "DrawBoundingBoxes",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DrawBoundingBoxes",
    "signature": "(images, boxes, name=None)",
    "description": "Draw bounding boxes on a batch of images."
  },
  "738": {
    "name": "DrawBoundingBoxesV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DrawBoundingBoxesV2",
    "signature": "(images, boxes, colors, name=None)",
    "description": "Draw bounding boxes on a batch of images."
  },
  "739": {
    "name": "DummyIterationCounter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DummyIterationCounter",
    "signature": "(name=None)",
    "description": "TODO: add doc."
  },
  "740": {
    "name": "DummyMemoryCache",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DummyMemoryCache",
    "signature": "(name=None)",
    "description": "TODO: add doc."
  },
  "741": {
    "name": "DummySeedGenerator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DummySeedGenerator",
    "signature": "(name=None)",
    "description": "TODO: add doc."
  },
  "742": {
    "name": "DynamicEnqueueTPUEmbeddingArbitraryTensorBatch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DynamicEnqueueTPUEmbeddingArbitraryTensorBatch",
    "signature": "(sample_indices_or_row_splits, embedding_indices, aggregation_weights, mode_override, device_ordinal, combiners=[], name=None)",
    "description": "Eases the porting of code that uses tf.nn.embedding_lookup_sparse()."
  },
  "743": {
    "name": "DynamicPartition",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DynamicPartition",
    "signature": "(data, partitions, num_partitions, name=None)",
    "description": "Partitions `data` into `num_partitions` tensors using indices from `partitions`."
  },
  "744": {
    "name": "DynamicStitch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.DynamicStitch",
    "signature": "(indices, data, name=None)",
    "description": "Interleave the values from the `data` tensors into a single tensor."
  },
  "745": {
    "name": "EagerPyFunc",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EagerPyFunc",
    "signature": "(input, token, Tout, is_async=False, name=None)",
    "description": "Eagerly executes a python function to compute func(input)->output. The"
  },
  "746": {
    "name": "EditDistance",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EditDistance",
    "signature": "(hypothesis_indices, hypothesis_values, hypothesis_shape, truth_indices, truth_values, truth_shape, normalize=True, name=None)",
    "description": "Computes the (possibly normalized) Levenshtein Edit Distance."
  },
  "747": {
    "name": "Eig",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Eig",
    "signature": "(input, Tout, compute_v=True, name=None)",
    "description": "Computes the eigen decomposition of one or more square matrices."
  },
  "748": {
    "name": "Einsum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Einsum",
    "signature": "(inputs, equation, name=None)",
    "description": "Tensor contraction according to Einstein summation convention."
  },
  "749": {
    "name": "Elu",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Elu",
    "signature": "(features, name=None)",
    "description": "Computes the exponential linear function."
  },
  "750": {
    "name": "EluGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EluGrad",
    "signature": "(gradients, outputs, name=None)",
    "description": "Computes gradients for the exponential linear (Elu) operation."
  },
  "751": {
    "name": "Empty",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Empty",
    "signature": "(shape, dtype, init=False, name=None)",
    "description": "Creates a tensor with the given shape."
  },
  "752": {
    "name": "EmptyTensorList",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EmptyTensorList",
    "signature": "(element_shape, max_num_elements, element_dtype, name=None)",
    "description": "Creates and returns an empty tensor list."
  },
  "753": {
    "name": "EncodeBase64",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EncodeBase64",
    "signature": "(input, pad=False, name=None)",
    "description": "Encode strings into web-safe base64 format."
  },
  "754": {
    "name": "EncodeJpeg",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EncodeJpeg",
    "signature": "(image, format='', quality=95, progressive=False, optimize_size=False, chroma_downsampling=True, density_unit='in', x_density=300, y_density=300, xmp_metadata='', name=None)",
    "description": "JPEG-encode an image."
  },
  "755": {
    "name": "EncodeJpegVariableQuality",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EncodeJpegVariableQuality",
    "signature": "(images, quality, name=None)",
    "description": "JPEG encode input image with provided compression quality."
  },
  "756": {
    "name": "EncodePng",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EncodePng",
    "signature": "(image, compression=-1, name=None)",
    "description": "PNG-encode an image."
  },
  "757": {
    "name": "EncodeProto",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EncodeProto",
    "signature": "(sizes, values, field_names, message_type, descriptor_source='local://', name=None)",
    "description": "The op serializes protobuf messages provided in the input tensors."
  },
  "758": {
    "name": "EncodeWav",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EncodeWav",
    "signature": "(audio, sample_rate, name=None)",
    "description": "Encode audio data using the WAV file format."
  },
  "759": {
    "name": "EnqueueTPUEmbeddingArbitraryTensorBatch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EnqueueTPUEmbeddingArbitraryTensorBatch",
    "signature": "(sample_indices_or_row_splits, embedding_indices, aggregation_weights, mode_override, device_ordinal=-1, combiners=[], name=None)",
    "description": "Eases the porting of code that uses tf.nn.embedding_lookup_sparse()."
  },
  "760": {
    "name": "EnqueueTPUEmbeddingIntegerBatch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EnqueueTPUEmbeddingIntegerBatch",
    "signature": "(batch, mode_override, device_ordinal=-1, name=None)",
    "description": "An op that enqueues a list of input batch tensors to TPUEmbedding."
  },
  "761": {
    "name": "EnqueueTPUEmbeddingRaggedTensorBatch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EnqueueTPUEmbeddingRaggedTensorBatch",
    "signature": "(sample_splits, embedding_indices, aggregation_weights, mode_override, table_ids, device_ordinal=-1, combiners=[], max_sequence_lengths=[], num_features=[], name=None)",
    "description": "Eases the porting of code that uses tf.nn.embedding_lookup()."
  },
  "762": {
    "name": "EnqueueTPUEmbeddingSparseBatch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EnqueueTPUEmbeddingSparseBatch",
    "signature": "(sample_indices, embedding_indices, aggregation_weights, mode_override, device_ordinal=-1, combiners=[], name=None)",
    "description": "An op that enqueues TPUEmbedding input indices from a SparseTensor."
  },
  "763": {
    "name": "EnqueueTPUEmbeddingSparseTensorBatch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EnqueueTPUEmbeddingSparseTensorBatch",
    "signature": "(sample_indices, embedding_indices, aggregation_weights, mode_override, table_ids, device_ordinal=-1, combiners=[], max_sequence_lengths=[], num_features=[], name=None)",
    "description": "Eases the porting of code that uses tf.nn.embedding_lookup_sparse()."
  },
  "764": {
    "name": "EnsureShape",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EnsureShape",
    "signature": "(input, shape, name=None)",
    "description": "Ensures that the tensor's shape matches the expected shape."
  },
  "765": {
    "name": "Enter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Enter",
    "signature": "(data, frame_name, is_constant=False, parallel_iterations=10, name=None)",
    "description": "Creates or finds a child frame, and makes `data` available to the child frame."
  },
  "766": {
    "name": "Equal",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Equal",
    "signature": "(x, y, incompatible_shape_error=True, name=None)",
    "description": "Returns the truth value of (x == y) element-wise."
  },
  "767": {
    "name": "Erf",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Erf",
    "signature": "(x, name=None)",
    "description": "Computes the [Gauss error function](https://en.wikipedia.org/wiki/Error_function) of `x` element-wise. In statistics, for non-negative values of $x$, the error function has the following interpretation: for a random variable $Y$ that is normally distributed with mean 0 and variance $1/\\sqrt{2}$, $erf(x)$ is the probability that $Y$ falls in the range $[\u2212x, x]$."
  },
  "768": {
    "name": "Erfc",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Erfc",
    "signature": "(x, name=None)",
    "description": "Computes the complementary error function of `x` element-wise."
  },
  "769": {
    "name": "Erfinv",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Erfinv",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "770": {
    "name": "EuclideanNorm",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.EuclideanNorm",
    "signature": "(input, axis, keep_dims=False, name=None)",
    "description": "Computes the euclidean norm of elements across dimensions of a tensor."
  },
  "771": {
    "name": "Exit",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Exit",
    "signature": "(data, name=None)",
    "description": "Exits the current frame to its parent frame."
  },
  "772": {
    "name": "Exp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Exp",
    "signature": "(x, name=None)",
    "description": "Computes exponential of x element-wise.  \\\\(y = e^x\\\\)."
  },
  "773": {
    "name": "ExpandDims",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExpandDims",
    "signature": "(input, axis, name=None)",
    "description": "Inserts a dimension of 1 into a tensor's shape."
  },
  "774": {
    "name": "ExperimentalAssertNextDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalAssertNextDataset",
    "signature": "(input_dataset, transformations, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "775": {
    "name": "ExperimentalAutoShardDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalAutoShardDataset",
    "signature": "(input_dataset, num_workers, index, output_types, output_shapes, auto_shard_policy=0, name=None)",
    "description": "Creates a dataset that shards the input dataset."
  },
  "776": {
    "name": "ExperimentalBytesProducedStatsDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalBytesProducedStatsDataset",
    "signature": "(input_dataset, tag, output_types, output_shapes, name=None)",
    "description": "Records the bytes size of each element of `input_dataset` in a StatsAggregator."
  },
  "777": {
    "name": "ExperimentalCSVDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalCSVDataset",
    "signature": "(filenames, compression_type, buffer_size, header, field_delim, use_quote_delim, na_value, select_cols, record_defaults, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "778": {
    "name": "ExperimentalChooseFastestDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalChooseFastestDataset",
    "signature": "(input_datasets, num_experiments, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "779": {
    "name": "ExperimentalDatasetCardinality",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalDatasetCardinality",
    "signature": "(input_dataset, name=None)",
    "description": "Returns the cardinality of `input_dataset`."
  },
  "780": {
    "name": "ExperimentalDatasetToTFRecord",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalDatasetToTFRecord",
    "signature": "(input_dataset, filename, compression_type, name=None)",
    "description": "Writes the given dataset to the given file using the TFRecord format."
  },
  "781": {
    "name": "ExperimentalDenseToSparseBatchDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalDenseToSparseBatchDataset",
    "signature": "(input_dataset, batch_size, row_shape, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that batches input elements into a SparseTensor."
  },
  "782": {
    "name": "ExperimentalDirectedInterleaveDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalDirectedInterleaveDataset",
    "signature": "(selector_input_dataset, data_input_datasets, output_types, output_shapes, name=None)",
    "description": "A substitute for `InterleaveDataset` on a fixed list of `N` datasets."
  },
  "783": {
    "name": "ExperimentalGroupByReducerDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalGroupByReducerDataset",
    "signature": "(input_dataset, key_func_other_arguments, init_func_other_arguments, reduce_func_other_arguments, finalize_func_other_arguments, key_func, init_func, reduce_func, finalize_func, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that computes a group-by on `input_dataset`."
  },
  "784": {
    "name": "ExperimentalGroupByWindowDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalGroupByWindowDataset",
    "signature": "(input_dataset, key_func_other_arguments, reduce_func_other_arguments, window_size_func_other_arguments, key_func, reduce_func, window_size_func, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that computes a windowed group-by on `input_dataset`."
  },
  "785": {
    "name": "ExperimentalIgnoreErrorsDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalIgnoreErrorsDataset",
    "signature": "(input_dataset, output_types, output_shapes, log_warning=False, name=None)",
    "description": "Creates a dataset that contains the elements of `input_dataset` ignoring errors."
  },
  "786": {
    "name": "ExperimentalIteratorGetDevice",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalIteratorGetDevice",
    "signature": "(resource, name=None)",
    "description": "Returns the name of the device on which `resource` has been placed."
  },
  "787": {
    "name": "ExperimentalLMDBDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalLMDBDataset",
    "signature": "(filenames, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "788": {
    "name": "ExperimentalLatencyStatsDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalLatencyStatsDataset",
    "signature": "(input_dataset, tag, output_types, output_shapes, name=None)",
    "description": "Records the latency of producing `input_dataset` elements in a StatsAggregator."
  },
  "789": {
    "name": "ExperimentalMapAndBatchDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalMapAndBatchDataset",
    "signature": "(input_dataset, other_arguments, batch_size, num_parallel_calls, drop_remainder, f, output_types, output_shapes, preserve_cardinality=False, name=None)",
    "description": "Creates a dataset that fuses mapping with batching."
  },
  "790": {
    "name": "ExperimentalMapDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalMapDataset",
    "signature": "(input_dataset, other_arguments, f, output_types, output_shapes, use_inter_op_parallelism=True, preserve_cardinality=False, name=None)",
    "description": "Creates a dataset that applies `f` to the outputs of `input_dataset`."
  },
  "791": {
    "name": "ExperimentalMatchingFilesDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalMatchingFilesDataset",
    "signature": "(patterns, name=None)",
    "description": "TODO: add doc."
  },
  "792": {
    "name": "ExperimentalMaxIntraOpParallelismDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalMaxIntraOpParallelismDataset",
    "signature": "(input_dataset, max_intra_op_parallelism, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that overrides the maximum intra-op parallelism."
  },
  "793": {
    "name": "ExperimentalNonSerializableDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalNonSerializableDataset",
    "signature": "(input_dataset, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "794": {
    "name": "ExperimentalParallelInterleaveDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalParallelInterleaveDataset",
    "signature": "(input_dataset, other_arguments, cycle_length, block_length, sloppy, buffer_output_elements, prefetch_input_elements, f, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that applies `f` to the outputs of `input_dataset`."
  },
  "795": {
    "name": "ExperimentalParseExampleDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalParseExampleDataset",
    "signature": "(input_dataset, num_parallel_calls, dense_defaults, sparse_keys, dense_keys, sparse_types, dense_shapes, output_types, output_shapes, sloppy=False, name=None)",
    "description": "Transforms `input_dataset` containing `Example` protos as vectors of DT_STRING into a dataset of `Tensor` or `SparseTensor` objects representing the parsed features."
  },
  "796": {
    "name": "ExperimentalPrivateThreadPoolDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalPrivateThreadPoolDataset",
    "signature": "(input_dataset, num_threads, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that uses a custom thread pool to compute `input_dataset`."
  },
  "797": {
    "name": "ExperimentalRandomDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalRandomDataset",
    "signature": "(seed, seed2, output_types, output_shapes, name=None)",
    "description": "Creates a Dataset that returns pseudorandom numbers."
  },
  "798": {
    "name": "ExperimentalRebatchDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalRebatchDataset",
    "signature": "(input_dataset, num_replicas, output_types, output_shapes, use_fallback=True, name=None)",
    "description": "Creates a dataset that changes the batch size."
  },
  "799": {
    "name": "ExperimentalScanDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalScanDataset",
    "signature": "(input_dataset, initial_state, other_arguments, f, output_types, output_shapes, preserve_cardinality=False, name=None)",
    "description": "Creates a dataset successively reduces `f` over the elements of `input_dataset`."
  },
  "800": {
    "name": "ExperimentalSetStatsAggregatorDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalSetStatsAggregatorDataset",
    "signature": "(input_dataset, stats_aggregator, tag, counter_prefix, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "801": {
    "name": "ExperimentalSleepDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalSleepDataset",
    "signature": "(input_dataset, sleep_microseconds, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "802": {
    "name": "ExperimentalSlidingWindowDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalSlidingWindowDataset",
    "signature": "(input_dataset, window_size, window_shift, window_stride, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that passes a sliding window over `input_dataset`."
  },
  "803": {
    "name": "ExperimentalSqlDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalSqlDataset",
    "signature": "(driver_name, data_source_name, query, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that executes a SQL query and emits rows of the result set."
  },
  "804": {
    "name": "ExperimentalStatsAggregatorHandle",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalStatsAggregatorHandle",
    "signature": "(container='', shared_name='', name=None)",
    "description": "Creates a statistics manager resource."
  },
  "805": {
    "name": "ExperimentalStatsAggregatorSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalStatsAggregatorSummary",
    "signature": "(iterator, name=None)",
    "description": "Produces a summary of any statistics recorded by the given statistics manager."
  },
  "806": {
    "name": "ExperimentalTakeWhileDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalTakeWhileDataset",
    "signature": "(input_dataset, other_arguments, predicate, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that stops iteration when predicate` is false."
  },
  "807": {
    "name": "ExperimentalThreadPoolDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalThreadPoolDataset",
    "signature": "(input_dataset, thread_pool, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that uses a custom thread pool to compute `input_dataset`."
  },
  "808": {
    "name": "ExperimentalThreadPoolHandle",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalThreadPoolHandle",
    "signature": "(num_threads, display_name, max_intra_op_parallelism=1, container='', shared_name='', name=None)",
    "description": "Creates a dataset that uses a custom thread pool to compute `input_dataset`."
  },
  "809": {
    "name": "ExperimentalUnbatchDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalUnbatchDataset",
    "signature": "(input_dataset, output_types, output_shapes, name=None)",
    "description": "A dataset that splits the elements of its input into multiple elements."
  },
  "810": {
    "name": "ExperimentalUniqueDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExperimentalUniqueDataset",
    "signature": "(input_dataset, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that contains the unique elements of `input_dataset`."
  },
  "811": {
    "name": "Expint",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Expint",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "812": {
    "name": "Expm1",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Expm1",
    "signature": "(x, name=None)",
    "description": "Computes `exp(x) - 1` element-wise."
  },
  "813": {
    "name": "ExtractGlimpse",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExtractGlimpse",
    "signature": "(input, size, offsets, centered=True, normalized=True, uniform_noise=True, noise='uniform', name=None)",
    "description": "Extracts a glimpse from the input tensor."
  },
  "814": {
    "name": "ExtractGlimpseV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExtractGlimpseV2",
    "signature": "(input, size, offsets, centered=True, normalized=True, uniform_noise=True, noise='uniform', name=None)",
    "description": "Extracts a glimpse from the input tensor."
  },
  "815": {
    "name": "ExtractImagePatches",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExtractImagePatches",
    "signature": "(images, ksizes, strides, rates, padding, name=None)",
    "description": "Extract `patches` from `images` and put them in the \"depth\" output dimension."
  },
  "816": {
    "name": "ExtractJpegShape",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExtractJpegShape",
    "signature": "(contents, output_type=tf.int32, name=None)",
    "description": "Extract the shape information of a JPEG-encoded image."
  },
  "817": {
    "name": "ExtractVolumePatches",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ExtractVolumePatches",
    "signature": "(input, ksizes, strides, padding, name=None)",
    "description": "Extract `patches` from `input` and put them in the `\"depth\"` output dimension. 3D extension of `extract_image_patches`."
  },
  "818": {
    "name": "FFT",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FFT",
    "signature": "(input, name=None)",
    "description": "Fast Fourier transform."
  },
  "819": {
    "name": "FFT2D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FFT2D",
    "signature": "(input, name=None)",
    "description": "2D fast Fourier transform."
  },
  "820": {
    "name": "FFT3D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FFT3D",
    "signature": "(input, name=None)",
    "description": "3D fast Fourier transform."
  },
  "821": {
    "name": "FIFOQueue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FIFOQueue",
    "signature": "(component_types, shapes=[], capacity=-1, container='', shared_name='', name=None)",
    "description": "A queue that produces elements in first-in first-out order."
  },
  "822": {
    "name": "FIFOQueueV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FIFOQueueV2",
    "signature": "(component_types, shapes=[], capacity=-1, container='', shared_name='', name=None)",
    "description": "A queue that produces elements in first-in first-out order."
  },
  "823": {
    "name": "Fact",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Fact",
    "signature": "(name=None)",
    "description": "Output a fact about factorials."
  },
  "824": {
    "name": "FakeParam",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FakeParam",
    "signature": "(dtype, shape, name=None)",
    "description": "This op is used as a placeholder in If branch functions. It doesn't provide a"
  },
  "825": {
    "name": "FakeQuantWithMinMaxArgs",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FakeQuantWithMinMaxArgs",
    "signature": "(inputs, min=-6, max=6, num_bits=8, narrow_range=False, name=None)",
    "description": "Fake-quantize the 'inputs' tensor, type float to 'outputs' tensor of same type."
  },
  "826": {
    "name": "FakeQuantWithMinMaxArgsGradient",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FakeQuantWithMinMaxArgsGradient",
    "signature": "(gradients, inputs, min=-6, max=6, num_bits=8, narrow_range=False, name=None)",
    "description": "Compute gradients for a FakeQuantWithMinMaxArgs operation."
  },
  "827": {
    "name": "FakeQuantWithMinMaxVars",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FakeQuantWithMinMaxVars",
    "signature": "(inputs, min, max, num_bits=8, narrow_range=False, name=None)",
    "description": "Fake-quantize the 'inputs' tensor of type float via global float scalars"
  },
  "828": {
    "name": "FakeQuantWithMinMaxVarsGradient",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FakeQuantWithMinMaxVarsGradient",
    "signature": "(gradients, inputs, min, max, num_bits=8, narrow_range=False, name=None)",
    "description": "Compute gradients for a FakeQuantWithMinMaxVars operation."
  },
  "829": {
    "name": "FakeQuantWithMinMaxVarsPerChannel",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FakeQuantWithMinMaxVarsPerChannel",
    "signature": "(inputs, min, max, num_bits=8, narrow_range=False, name=None)",
    "description": "Fake-quantize the 'inputs' tensor of type float via per-channel floats"
  },
  "830": {
    "name": "FakeQuantWithMinMaxVarsPerChannelGradient",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FakeQuantWithMinMaxVarsPerChannelGradient",
    "signature": "(gradients, inputs, min, max, num_bits=8, narrow_range=False, name=None)",
    "description": "Compute gradients for a FakeQuantWithMinMaxVarsPerChannel operation."
  },
  "831": {
    "name": "Fill",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Fill",
    "signature": "(dims, value, name=None)",
    "description": "Creates a tensor filled with a scalar value."
  },
  "832": {
    "name": "FilterByLastComponentDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FilterByLastComponentDataset",
    "signature": "(input_dataset, output_types, output_shapes, name=None)",
    "description": "Creates a dataset containing elements of first component of `input_dataset` having true in the last component."
  },
  "833": {
    "name": "FilterDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FilterDataset",
    "signature": "(input_dataset, other_arguments, predicate, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset containing elements of `input_dataset` matching `predicate`."
  },
  "834": {
    "name": "FinalizeDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FinalizeDataset",
    "signature": "(input_dataset, output_types, output_shapes, has_captured_ref=False, name=None)",
    "description": "Creates a dataset by applying `tf.data.Options` to `input_dataset`."
  },
  "835": {
    "name": "Fingerprint",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Fingerprint",
    "signature": "(data, method, name=None)",
    "description": "Generates fingerprint values."
  },
  "836": {
    "name": "FixedLengthRecordDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FixedLengthRecordDataset",
    "signature": "(filenames, header_bytes, record_bytes, footer_bytes, buffer_size, metadata='', name=None)",
    "description": "Creates a dataset that emits the records from one or more binary files."
  },
  "837": {
    "name": "FixedLengthRecordDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FixedLengthRecordDatasetV2",
    "signature": "(filenames, header_bytes, record_bytes, footer_bytes, buffer_size, compression_type, metadata='', name=None)",
    "description": "TODO: add doc."
  },
  "838": {
    "name": "FixedLengthRecordReader",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FixedLengthRecordReader",
    "signature": "(record_bytes, header_bytes=0, footer_bytes=0, hop_bytes=0, container='', shared_name='', name=None)",
    "description": "A Reader that outputs fixed-length records from a file."
  },
  "839": {
    "name": "FixedLengthRecordReaderV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FixedLengthRecordReaderV2",
    "signature": "(record_bytes, header_bytes=0, footer_bytes=0, hop_bytes=0, container='', shared_name='', encoding='', name=None)",
    "description": "A Reader that outputs fixed-length records from a file."
  },
  "840": {
    "name": "FixedUnigramCandidateSampler",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FixedUnigramCandidateSampler",
    "signature": "(true_classes, num_true, num_sampled, unique, range_max, vocab_file='', distortion=1, num_reserved_ids=0, num_shards=1, shard=0, unigrams=[], seed=0, seed2=0, name=None)",
    "description": "Generates labels for candidate sampling with a learned unigram distribution."
  },
  "841": {
    "name": "FlatMapDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FlatMapDataset",
    "signature": "(input_dataset, other_arguments, f, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that applies `f` to the outputs of `input_dataset`."
  },
  "842": {
    "name": "Floor",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Floor",
    "signature": "(x, name=None)",
    "description": "Returns element-wise largest integer not greater than x."
  },
  "843": {
    "name": "FloorDiv",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FloorDiv",
    "signature": "(x, y, name=None)",
    "description": "Returns x // y element-wise."
  },
  "844": {
    "name": "FloorMod",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FloorMod",
    "signature": "(x, y, name=None)",
    "description": "Returns element-wise remainder of division. When `x < 0` xor `y < 0` is"
  },
  "845": {
    "name": "FlushSummaryWriter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FlushSummaryWriter",
    "signature": "(writer, name=None)",
    "description": "TODO: add doc."
  },
  "846": {
    "name": "For",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.For",
    "signature": "(start, limit, delta, input, body, name=None)",
    "description": "Applies a for loop."
  },
  "847": {
    "name": "FractionalAvgPool",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FractionalAvgPool",
    "signature": "(value, pooling_ratio, pseudo_random=False, overlapping=False, deterministic=False, seed=0, seed2=0, name=None)",
    "description": "Performs fractional average pooling on the input."
  },
  "848": {
    "name": "FractionalAvgPoolGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FractionalAvgPoolGrad",
    "signature": "(orig_input_tensor_shape, out_backprop, row_pooling_sequence, col_pooling_sequence, overlapping=False, name=None)",
    "description": "Computes gradient of the FractionalAvgPool function."
  },
  "849": {
    "name": "FractionalMaxPool",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FractionalMaxPool",
    "signature": "(value, pooling_ratio, pseudo_random=False, overlapping=False, deterministic=False, seed=0, seed2=0, name=None)",
    "description": "Performs fractional max pooling on the input."
  },
  "850": {
    "name": "FractionalMaxPoolGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FractionalMaxPoolGrad",
    "signature": "(orig_input, orig_output, out_backprop, row_pooling_sequence, col_pooling_sequence, overlapping=False, name=None)",
    "description": "Computes gradient of the FractionalMaxPool function."
  },
  "851": {
    "name": "FresnelCos",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FresnelCos",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "852": {
    "name": "FresnelSin",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FresnelSin",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "853": {
    "name": "FusedBatchNorm",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FusedBatchNorm",
    "signature": "(x, scale, offset, mean, variance, epsilon=0.0001, exponential_avg_factor=1, data_format='NHWC', is_training=True, name=None)",
    "description": "Batch normalization."
  },
  "854": {
    "name": "FusedBatchNormGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FusedBatchNormGrad",
    "signature": "(y_backprop, x, scale, reserve_space_1, reserve_space_2, epsilon=0.0001, data_format='NHWC', is_training=True, name=None)",
    "description": "Gradient for batch normalization."
  },
  "855": {
    "name": "FusedBatchNormGradV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FusedBatchNormGradV2",
    "signature": "(y_backprop, x, scale, reserve_space_1, reserve_space_2, epsilon=0.0001, data_format='NHWC', is_training=True, name=None)",
    "description": "Gradient for batch normalization."
  },
  "856": {
    "name": "FusedBatchNormGradV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FusedBatchNormGradV3",
    "signature": "(y_backprop, x, scale, reserve_space_1, reserve_space_2, reserve_space_3, epsilon=0.0001, data_format='NHWC', is_training=True, name=None)",
    "description": "Gradient for batch normalization."
  },
  "857": {
    "name": "FusedBatchNormV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FusedBatchNormV2",
    "signature": "(x, scale, offset, mean, variance, epsilon=0.0001, exponential_avg_factor=1, data_format='NHWC', is_training=True, name=None)",
    "description": "Batch normalization."
  },
  "858": {
    "name": "FusedBatchNormV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FusedBatchNormV3",
    "signature": "(x, scale, offset, mean, variance, epsilon=0.0001, exponential_avg_factor=1, data_format='NHWC', is_training=True, name=None)",
    "description": "Batch normalization."
  },
  "859": {
    "name": "FusedPadConv2D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FusedPadConv2D",
    "signature": "(input, paddings, filter, mode, strides, padding, name=None)",
    "description": "Performs a padding as a preprocess during a convolution."
  },
  "860": {
    "name": "FusedResizeAndPadConv2D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.FusedResizeAndPadConv2D",
    "signature": "(input, size, paddings, filter, mode, strides, padding, resize_align_corners=False, name=None)",
    "description": "Performs a resize and padding as a preprocess during a convolution."
  },
  "861": {
    "name": "GRUBlockCell",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GRUBlockCell",
    "signature": "(x, h_prev, w_ru, w_c, b_ru, b_c, name=None)",
    "description": "Computes the GRU cell forward propagation for 1 time step."
  },
  "862": {
    "name": "GRUBlockCellGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GRUBlockCellGrad",
    "signature": "(x, h_prev, w_ru, w_c, b_ru, b_c, r, u, c, d_h, name=None)",
    "description": "Computes the GRU cell back-propagation for 1 time step."
  },
  "863": {
    "name": "GatherNd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GatherNd",
    "signature": "(params, indices, name=None)",
    "description": "Gather slices from `params` into a Tensor with shape specified by `indices`."
  },
  "864": {
    "name": "GatherV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GatherV2",
    "signature": "(params, indices, axis, batch_dims=0, name=None)",
    "description": "Gather slices from `params` axis `axis` according to `indices`."
  },
  "865": {
    "name": "GenerateBoundingBoxProposals",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GenerateBoundingBoxProposals",
    "signature": "(scores, bbox_deltas, image_info, anchors, nms_threshold, pre_nms_topn, min_size, post_nms_topn=300, name=None)",
    "description": "This op produces Region of Interests from given bounding boxes(bbox_deltas) encoded wrt anchors according to eq.2 in arXiv:1506.01497"
  },
  "866": {
    "name": "GenerateVocabRemapping",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GenerateVocabRemapping",
    "signature": "(new_vocab_file, old_vocab_file, new_vocab_offset, num_new_vocab, old_vocab_size=-1, name=None)",
    "description": "Given a path to new and old vocabulary files, returns a remapping Tensor of"
  },
  "867": {
    "name": "GeneratorDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GeneratorDataset",
    "signature": "(init_func_other_args, next_func_other_args, finalize_func_other_args, init_func, next_func, finalize_func, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that invokes a function to generate elements."
  },
  "868": {
    "name": "GetElementAtIndex",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GetElementAtIndex",
    "signature": "(dataset, index, output_types, output_shapes, name=None)",
    "description": "Gets the element at the specified index in a dataset."
  },
  "869": {
    "name": "GetOptions",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GetOptions",
    "signature": "(input_dataset, name=None)",
    "description": "Returns the `tf.data.Options` attached to `input_dataset`."
  },
  "870": {
    "name": "GetSessionHandle",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GetSessionHandle",
    "signature": "(value, name=None)",
    "description": "Store the input tensor in the state of the current session."
  },
  "871": {
    "name": "GetSessionHandleV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GetSessionHandleV2",
    "signature": "(value, name=None)",
    "description": "Store the input tensor in the state of the current session."
  },
  "872": {
    "name": "GetSessionTensor",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GetSessionTensor",
    "signature": "(handle, dtype, name=None)",
    "description": "Get the value of the tensor specified by its handle."
  },
  "873": {
    "name": "Greater",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Greater",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x > y) element-wise."
  },
  "874": {
    "name": "GreaterEqual",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GreaterEqual",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x >= y) element-wise."
  },
  "875": {
    "name": "GroupByReducerDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GroupByReducerDataset",
    "signature": "(input_dataset, key_func_other_arguments, init_func_other_arguments, reduce_func_other_arguments, finalize_func_other_arguments, key_func, init_func, reduce_func, finalize_func, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that computes a group-by on `input_dataset`."
  },
  "876": {
    "name": "GroupByWindowDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GroupByWindowDataset",
    "signature": "(input_dataset, key_func_other_arguments, reduce_func_other_arguments, window_size_func_other_arguments, key_func, reduce_func, window_size_func, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that computes a windowed group-by on `input_dataset`."
  },
  "877": {
    "name": "GuaranteeConst",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.GuaranteeConst",
    "signature": "(input, name=None)",
    "description": "Gives a guarantee to the TF runtime that the input tensor is a constant."
  },
  "878": {
    "name": "HSVToRGB",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.HSVToRGB",
    "signature": "(images, name=None)",
    "description": "Convert one or more images from HSV to RGB."
  },
  "879": {
    "name": "HashTable",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.HashTable",
    "signature": "(key_dtype, value_dtype, container='', shared_name='', use_node_name_sharing=False, name=None)",
    "description": "Creates a non-initialized hash table."
  },
  "880": {
    "name": "HashTableV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.HashTableV2",
    "signature": "(key_dtype, value_dtype, container='', shared_name='', use_node_name_sharing=False, name=None)",
    "description": "Creates a non-initialized hash table."
  },
  "881": {
    "name": "HistogramFixedWidth",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.HistogramFixedWidth",
    "signature": "(values, value_range, nbins, dtype=tf.int32, name=None)",
    "description": "Return histogram of values."
  },
  "882": {
    "name": "HistogramSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.HistogramSummary",
    "signature": "(tag, values, name=None)",
    "description": "Outputs a `Summary` protocol buffer with a histogram."
  },
  "883": {
    "name": "IFFT",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IFFT",
    "signature": "(input, name=None)",
    "description": "Inverse fast Fourier transform."
  },
  "884": {
    "name": "IFFT2D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IFFT2D",
    "signature": "(input, name=None)",
    "description": "Inverse 2D fast Fourier transform."
  },
  "885": {
    "name": "IFFT3D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IFFT3D",
    "signature": "(input, name=None)",
    "description": "Inverse 3D fast Fourier transform."
  },
  "886": {
    "name": "IRFFT",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IRFFT",
    "signature": "(input, fft_length, Treal=tf.float32, name=None)",
    "description": "Inverse real-valued fast Fourier transform."
  },
  "887": {
    "name": "IRFFT2D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IRFFT2D",
    "signature": "(input, fft_length, Treal=tf.float32, name=None)",
    "description": "Inverse 2D real-valued fast Fourier transform."
  },
  "888": {
    "name": "IRFFT3D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IRFFT3D",
    "signature": "(input, fft_length, Treal=tf.float32, name=None)",
    "description": "Inverse 3D real-valued fast Fourier transform."
  },
  "889": {
    "name": "Identity",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Identity",
    "signature": "(input, name=None)",
    "description": "Return a tensor with the same shape and contents as the input tensor or value."
  },
  "890": {
    "name": "IdentityN",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IdentityN",
    "signature": "(input, name=None)",
    "description": "Returns a list of tensors with the same shapes and contents as the input"
  },
  "891": {
    "name": "IdentityReader",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IdentityReader",
    "signature": "(container='', shared_name='', name=None)",
    "description": "A Reader that outputs the queued work as both the key and value."
  },
  "892": {
    "name": "IdentityReaderV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IdentityReaderV2",
    "signature": "(container='', shared_name='', name=None)",
    "description": "A Reader that outputs the queued work as both the key and value."
  },
  "893": {
    "name": "If",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.If",
    "signature": "(cond, input, Tout, then_branch, else_branch, output_shapes=[], name=None)",
    "description": "output = cond ? then_branch(input) : else_branch(input)"
  },
  "894": {
    "name": "Igamma",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Igamma",
    "signature": "(a, x, name=None)",
    "description": "Compute the lower regularized incomplete Gamma function `P(a, x)`."
  },
  "895": {
    "name": "IgammaGradA",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IgammaGradA",
    "signature": "(a, x, name=None)",
    "description": "Computes the gradient of `igamma(a, x)` wrt `a`."
  },
  "896": {
    "name": "Igammac",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Igammac",
    "signature": "(a, x, name=None)",
    "description": "Compute the upper regularized incomplete Gamma function `Q(a, x)`."
  },
  "897": {
    "name": "IgnoreErrorsDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IgnoreErrorsDataset",
    "signature": "(input_dataset, output_types, output_shapes, log_warning=False, name=None)",
    "description": "Creates a dataset that contains the elements of `input_dataset` ignoring errors."
  },
  "898": {
    "name": "Imag",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Imag",
    "signature": "(input, Tout=tf.float32, name=None)",
    "description": "Returns the imaginary part of a complex number."
  },
  "899": {
    "name": "ImageProjectiveTransformV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ImageProjectiveTransformV2",
    "signature": "(images, transforms, output_shape, interpolation, fill_mode='CONSTANT', name=None)",
    "description": "Applies the given transform to each of the images."
  },
  "900": {
    "name": "ImageProjectiveTransformV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ImageProjectiveTransformV3",
    "signature": "(images, transforms, output_shape, fill_value, interpolation, fill_mode='CONSTANT', name=None)",
    "description": "Applies the given transform to each of the images."
  },
  "901": {
    "name": "ImageSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ImageSummary",
    "signature": "(tag, tensor, max_images=3, bad_color=dtype: DT_UINT8\ntensor_shape {\n  dim {\n    size: 4\n  }\n}\nint_val: 255\nint_val: 0\nint_val: 0\nint_val: 255\n, name=None)",
    "description": "Outputs a `Summary` protocol buffer with images."
  },
  "902": {
    "name": "ImmutableConst",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ImmutableConst",
    "signature": "(dtype, shape, memory_region_name, name=None)",
    "description": "Returns immutable tensor from memory region."
  },
  "903": {
    "name": "ImportEvent",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ImportEvent",
    "signature": "(writer, event, name=None)",
    "description": "TODO: add doc."
  },
  "904": {
    "name": "InTopK",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InTopK",
    "signature": "(predictions, targets, k, name=None)",
    "description": "Says whether the targets are in the top `K` predictions."
  },
  "905": {
    "name": "InTopKV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InTopKV2",
    "signature": "(predictions, targets, k, name=None)",
    "description": "Says whether the targets are in the top `K` predictions."
  },
  "906": {
    "name": "InfeedDequeue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InfeedDequeue",
    "signature": "(dtype, shape, name=None)",
    "description": "A placeholder op for a value that will be fed into the computation."
  },
  "907": {
    "name": "InfeedDequeueTuple",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InfeedDequeueTuple",
    "signature": "(dtypes, shapes, name=None)",
    "description": "Fetches multiple values from infeed as an XLA tuple."
  },
  "908": {
    "name": "InfeedEnqueue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InfeedEnqueue",
    "signature": "(input, shape=[], layout=[], device_ordinal=-1, name=None)",
    "description": "An op which feeds a single Tensor value into the computation."
  },
  "909": {
    "name": "InfeedEnqueuePrelinearizedBuffer",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InfeedEnqueuePrelinearizedBuffer",
    "signature": "(input, device_ordinal=-1, name=None)",
    "description": "An op which enqueues prelinearized buffer into TPU infeed."
  },
  "910": {
    "name": "InfeedEnqueueTuple",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InfeedEnqueueTuple",
    "signature": "(inputs, shapes, layouts=[], device_ordinal=-1, name=None)",
    "description": "Feeds multiple Tensor values into the computation as an XLA tuple."
  },
  "911": {
    "name": "InitializeTable",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InitializeTable",
    "signature": "(table_handle, keys, values, name=None)",
    "description": "Table initializer that takes two tensors for keys and values respectively."
  },
  "912": {
    "name": "InitializeTableFromDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InitializeTableFromDataset",
    "signature": "(table_handle, dataset, name=None)",
    "description": "TODO: add doc."
  },
  "913": {
    "name": "InitializeTableFromTextFile",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InitializeTableFromTextFile",
    "signature": "(table_handle, filename, key_index, value_index, vocab_size=-1, delimiter='\\t', offset=0, name=None)",
    "description": "Initializes a table from a text file."
  },
  "914": {
    "name": "InitializeTableFromTextFileV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InitializeTableFromTextFileV2",
    "signature": "(table_handle, filename, key_index, value_index, vocab_size=-1, delimiter='\\t', offset=0, name=None)",
    "description": "Initializes a table from a text file."
  },
  "915": {
    "name": "InitializeTableV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InitializeTableV2",
    "signature": "(table_handle, keys, values, name=None)",
    "description": "Table initializer that takes two tensors for keys and values respectively."
  },
  "916": {
    "name": "InplaceAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InplaceAdd",
    "signature": "(x, i, v, name=None)",
    "description": "Adds v into specified rows of x."
  },
  "917": {
    "name": "InplaceSub",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InplaceSub",
    "signature": "(x, i, v, name=None)",
    "description": "Subtracts `v` into specified rows of `x`."
  },
  "918": {
    "name": "InplaceUpdate",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InplaceUpdate",
    "signature": "(x, i, v, name=None)",
    "description": "Updates specified rows 'i' with values 'v'."
  },
  "919": {
    "name": "InterleaveDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InterleaveDataset",
    "signature": "(input_dataset, other_arguments, cycle_length, block_length, f, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that applies `f` to the outputs of `input_dataset`."
  },
  "920": {
    "name": "Inv",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Inv",
    "signature": "(x, name=None)",
    "description": "Computes the reciprocal of x element-wise."
  },
  "921": {
    "name": "InvGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InvGrad",
    "signature": "(y, dy, name=None)",
    "description": "Computes the gradient for the inverse of `x` wrt its input."
  },
  "922": {
    "name": "Invert",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Invert",
    "signature": "(x, name=None)",
    "description": "Invert (flip) each bit of supported types; for example, type `uint8` value 01010101 becomes 10101010."
  },
  "923": {
    "name": "InvertPermutation",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.InvertPermutation",
    "signature": "(x, name=None)",
    "description": "Computes the inverse permutation of a tensor."
  },
  "924": {
    "name": "IsBoostedTreesEnsembleInitialized",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IsBoostedTreesEnsembleInitialized",
    "signature": "(tree_ensemble_handle, name=None)",
    "description": "Checks whether a tree ensemble has been initialized."
  },
  "925": {
    "name": "IsBoostedTreesQuantileStreamResourceInitialized",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IsBoostedTreesQuantileStreamResourceInitialized",
    "signature": "(quantile_stream_resource_handle, name=None)",
    "description": "Checks whether a quantile stream has been initialized."
  },
  "926": {
    "name": "IsFinite",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IsFinite",
    "signature": "(x, name=None)",
    "description": "Returns which elements of x are finite."
  },
  "927": {
    "name": "IsInf",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IsInf",
    "signature": "(x, name=None)",
    "description": "Returns which elements of x are Inf."
  },
  "928": {
    "name": "IsNan",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IsNan",
    "signature": "(x, name=None)",
    "description": "Returns which elements of x are NaN."
  },
  "929": {
    "name": "IsTPUEmbeddingInitialized",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IsTPUEmbeddingInitialized",
    "signature": "(config='', name=None)",
    "description": "Whether TPU Embedding is initialized in a distributed TPU system."
  },
  "930": {
    "name": "IsVariableInitialized",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IsVariableInitialized",
    "signature": "(ref, name=None)",
    "description": "Checks whether a tensor has been initialized."
  },
  "931": {
    "name": "IsotonicRegression",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IsotonicRegression",
    "signature": "(input, output_dtype=tf.float32, name=None)",
    "description": "Solves a batch of isotonic regression problems."
  },
  "932": {
    "name": "Iterator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Iterator",
    "signature": "(shared_name, container, output_types, output_shapes, name=None)",
    "description": "A container for an iterator resource."
  },
  "933": {
    "name": "IteratorFromStringHandle",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IteratorFromStringHandle",
    "signature": "(string_handle, output_types=[], output_shapes=[], name=None)",
    "description": "Converts the given string representing a handle to an iterator to a resource."
  },
  "934": {
    "name": "IteratorFromStringHandleV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IteratorFromStringHandleV2",
    "signature": "(string_handle, output_types=[], output_shapes=[], name=None)",
    "description": "TODO: add doc."
  },
  "935": {
    "name": "IteratorGetDevice",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IteratorGetDevice",
    "signature": "(resource, name=None)",
    "description": "Returns the name of the device on which `resource` has been placed."
  },
  "936": {
    "name": "IteratorGetNext",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IteratorGetNext",
    "signature": "(iterator, output_types, output_shapes, name=None)",
    "description": "Gets the next output from the given iterator ."
  },
  "937": {
    "name": "IteratorGetNextAsOptional",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IteratorGetNextAsOptional",
    "signature": "(iterator, output_types, output_shapes, name=None)",
    "description": "Gets the next output from the given iterator as an Optional variant."
  },
  "938": {
    "name": "IteratorGetNextSync",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IteratorGetNextSync",
    "signature": "(iterator, output_types, output_shapes, name=None)",
    "description": "Gets the next output from the given iterator."
  },
  "939": {
    "name": "IteratorToStringHandle",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IteratorToStringHandle",
    "signature": "(resource_handle, name=None)",
    "description": "Converts the given `resource_handle` representing an iterator to a string."
  },
  "940": {
    "name": "IteratorV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.IteratorV2",
    "signature": "(shared_name, container, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "941": {
    "name": "L2Loss",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.L2Loss",
    "signature": "(t, name=None)",
    "description": "L2 Loss."
  },
  "942": {
    "name": "LMDBDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LMDBDataset",
    "signature": "(filenames, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that emits the key-value pairs in one or more LMDB files."
  },
  "943": {
    "name": "LMDBReader",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LMDBReader",
    "signature": "(container='', shared_name='', name=None)",
    "description": "A Reader that outputs the records from a LMDB file."
  },
  "944": {
    "name": "LRN",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LRN",
    "signature": "(input, depth_radius=5, bias=1, alpha=1, beta=0.5, name=None)",
    "description": "Local Response Normalization."
  },
  "945": {
    "name": "LRNGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LRNGrad",
    "signature": "(input_grads, input_image, output_image, depth_radius=5, bias=1, alpha=1, beta=0.5, name=None)",
    "description": "Gradients for Local Response Normalization."
  },
  "946": {
    "name": "LSTMBlockCell",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LSTMBlockCell",
    "signature": "(x, cs_prev, h_prev, w, wci, wcf, wco, b, forget_bias=1, cell_clip=3, use_peephole=False, name=None)",
    "description": "Computes the LSTM cell forward propagation for 1 time step."
  },
  "947": {
    "name": "LSTMBlockCellGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LSTMBlockCellGrad",
    "signature": "(x, cs_prev, h_prev, w, wci, wcf, wco, b, i, cs, f, o, ci, co, cs_grad, h_grad, use_peephole, name=None)",
    "description": "Computes the LSTM cell backward propagation for 1 timestep."
  },
  "948": {
    "name": "LatencyStatsDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LatencyStatsDataset",
    "signature": "(input_dataset, tag, output_types, output_shapes, name=None)",
    "description": "Records the latency of producing `input_dataset` elements in a StatsAggregator."
  },
  "949": {
    "name": "LeakyRelu",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LeakyRelu",
    "signature": "(features, alpha=0.2, name=None)",
    "description": "Computes rectified linear: `max(features, features * alpha)`."
  },
  "950": {
    "name": "LeakyReluGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LeakyReluGrad",
    "signature": "(gradients, features, alpha=0.2, name=None)",
    "description": "Computes rectified linear gradients for a LeakyRelu operation."
  },
  "951": {
    "name": "LearnedUnigramCandidateSampler",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LearnedUnigramCandidateSampler",
    "signature": "(true_classes, num_true, num_sampled, unique, range_max, seed=0, seed2=0, name=None)",
    "description": "Generates labels for candidate sampling with a learned unigram distribution."
  },
  "952": {
    "name": "LeftShift",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LeftShift",
    "signature": "(x, y, name=None)",
    "description": "Elementwise computes the bitwise left-shift of `x` and `y`."
  },
  "953": {
    "name": "LegacyParallelInterleaveDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LegacyParallelInterleaveDatasetV2",
    "signature": "(input_dataset, other_arguments, cycle_length, block_length, buffer_output_elements, prefetch_input_elements, f, output_types, output_shapes, deterministic='default', metadata='', name=None)",
    "description": "Creates a dataset that applies `f` to the outputs of `input_dataset`."
  },
  "954": {
    "name": "Less",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Less",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x < y) element-wise."
  },
  "955": {
    "name": "LessEqual",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LessEqual",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x <= y) element-wise."
  },
  "956": {
    "name": "Lgamma",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Lgamma",
    "signature": "(x, name=None)",
    "description": "Computes the log of the absolute value of `Gamma(x)` element-wise."
  },
  "957": {
    "name": "LinSpace",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LinSpace",
    "signature": "(start, stop, num, name=None)",
    "description": "Generates values in an interval."
  },
  "958": {
    "name": "ListDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ListDataset",
    "signature": "(tensors, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that emits each of `tensors` once."
  },
  "959": {
    "name": "ListDiff",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ListDiff",
    "signature": "(x, y, out_idx=tf.int32, name=None)",
    "description": "Computes the difference between two lists of numbers or strings."
  },
  "960": {
    "name": "LoadAndRemapMatrix",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadAndRemapMatrix",
    "signature": "(ckpt_path, old_tensor_name, row_remapping, col_remapping, initializing_values, num_rows, num_cols, max_rows_in_memory=-1, name=None)",
    "description": "Loads a 2-D (matrix) `Tensor` with name `old_tensor_name` from the checkpoint"
  },
  "961": {
    "name": "LoadDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadDataset",
    "signature": "(path, reader_func_other_args, output_types, output_shapes, reader_func, compression='', name=None)",
    "description": "TODO: add doc."
  },
  "962": {
    "name": "LoadTPUEmbeddingADAMParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadTPUEmbeddingADAMParameters",
    "signature": "(parameters, momenta, velocities, num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Load ADAM embedding parameters."
  },
  "963": {
    "name": "LoadTPUEmbeddingAdadeltaParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadTPUEmbeddingAdadeltaParameters",
    "signature": "(parameters, accumulators, updates, num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Load Adadelta embedding parameters."
  },
  "964": {
    "name": "LoadTPUEmbeddingAdagradMomentumParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadTPUEmbeddingAdagradMomentumParameters",
    "signature": "(parameters, accumulators, momenta, num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Load Adagrad Momentum embedding parameters."
  },
  "965": {
    "name": "LoadTPUEmbeddingAdagradParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadTPUEmbeddingAdagradParameters",
    "signature": "(parameters, accumulators, num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Load Adagrad embedding parameters."
  },
  "966": {
    "name": "LoadTPUEmbeddingCenteredRMSPropParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadTPUEmbeddingCenteredRMSPropParameters",
    "signature": "(parameters, ms, mom, mg, num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Load centered RMSProp embedding parameters."
  },
  "967": {
    "name": "LoadTPUEmbeddingFTRLParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadTPUEmbeddingFTRLParameters",
    "signature": "(parameters, accumulators, linears, num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Load FTRL embedding parameters."
  },
  "968": {
    "name": "LoadTPUEmbeddingFrequencyEstimatorParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadTPUEmbeddingFrequencyEstimatorParameters",
    "signature": "(parameters, last_hit_step, num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Load frequency estimator embedding parameters."
  },
  "969": {
    "name": "LoadTPUEmbeddingMDLAdagradLightParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadTPUEmbeddingMDLAdagradLightParameters",
    "signature": "(parameters, accumulators, weights, benefits, num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Load MDL Adagrad Light embedding parameters."
  },
  "970": {
    "name": "LoadTPUEmbeddingMomentumParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadTPUEmbeddingMomentumParameters",
    "signature": "(parameters, momenta, num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Load Momentum embedding parameters."
  },
  "971": {
    "name": "LoadTPUEmbeddingProximalAdagradParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadTPUEmbeddingProximalAdagradParameters",
    "signature": "(parameters, accumulators, num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Load proximal Adagrad embedding parameters."
  },
  "972": {
    "name": "LoadTPUEmbeddingProximalYogiParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadTPUEmbeddingProximalYogiParameters",
    "signature": "(parameters, v, m, num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "TODO: add doc."
  },
  "973": {
    "name": "LoadTPUEmbeddingRMSPropParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadTPUEmbeddingRMSPropParameters",
    "signature": "(parameters, ms, mom, num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Load RMSProp embedding parameters."
  },
  "974": {
    "name": "LoadTPUEmbeddingStochasticGradientDescentParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoadTPUEmbeddingStochasticGradientDescentParameters",
    "signature": "(parameters, num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Load SGD embedding parameters."
  },
  "975": {
    "name": "Log",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Log",
    "signature": "(x, name=None)",
    "description": "Computes natural logarithm of x element-wise."
  },
  "976": {
    "name": "Log1p",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Log1p",
    "signature": "(x, name=None)",
    "description": "Computes natural logarithm of (1 + x) element-wise."
  },
  "977": {
    "name": "LogMatrixDeterminant",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LogMatrixDeterminant",
    "signature": "(input, name=None)",
    "description": "Computes the sign and the log of the absolute value of the determinant of"
  },
  "978": {
    "name": "LogSoftmax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LogSoftmax",
    "signature": "(logits, name=None)",
    "description": "Computes log softmax activations."
  },
  "979": {
    "name": "LogUniformCandidateSampler",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LogUniformCandidateSampler",
    "signature": "(true_classes, num_true, num_sampled, unique, range_max, seed=0, seed2=0, name=None)",
    "description": "Generates labels for candidate sampling with a log-uniform distribution."
  },
  "980": {
    "name": "LogicalAnd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LogicalAnd",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of x AND y element-wise."
  },
  "981": {
    "name": "LogicalNot",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LogicalNot",
    "signature": "(x, name=None)",
    "description": "Returns the truth value of `NOT x` element-wise."
  },
  "982": {
    "name": "LogicalOr",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LogicalOr",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of x OR y element-wise."
  },
  "983": {
    "name": "LookupTableExport",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LookupTableExport",
    "signature": "(table_handle, Tkeys, Tvalues, name=None)",
    "description": "Outputs all keys and values in the table."
  },
  "984": {
    "name": "LookupTableExportV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LookupTableExportV2",
    "signature": "(table_handle, Tkeys, Tvalues, name=None)",
    "description": "Outputs all keys and values in the table."
  },
  "985": {
    "name": "LookupTableFind",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LookupTableFind",
    "signature": "(table_handle, keys, default_value, name=None)",
    "description": "Looks up keys in a table, outputs the corresponding values."
  },
  "986": {
    "name": "LookupTableFindV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LookupTableFindV2",
    "signature": "(table_handle, keys, default_value, name=None)",
    "description": "Looks up keys in a table, outputs the corresponding values."
  },
  "987": {
    "name": "LookupTableImport",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LookupTableImport",
    "signature": "(table_handle, keys, values, name=None)",
    "description": "Replaces the contents of the table with the specified keys and values."
  },
  "988": {
    "name": "LookupTableImportV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LookupTableImportV2",
    "signature": "(table_handle, keys, values, name=None)",
    "description": "Replaces the contents of the table with the specified keys and values."
  },
  "989": {
    "name": "LookupTableInsert",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LookupTableInsert",
    "signature": "(table_handle, keys, values, name=None)",
    "description": "Updates the table to associates keys with values."
  },
  "990": {
    "name": "LookupTableInsertV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LookupTableInsertV2",
    "signature": "(table_handle, keys, values, name=None)",
    "description": "Updates the table to associates keys with values."
  },
  "991": {
    "name": "LookupTableRemoveV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LookupTableRemoveV2",
    "signature": "(table_handle, keys, name=None)",
    "description": "Removes keys and its associated values from a table."
  },
  "992": {
    "name": "LookupTableSize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LookupTableSize",
    "signature": "(table_handle, name=None)",
    "description": "Computes the number of elements in the given table."
  },
  "993": {
    "name": "LookupTableSizeV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LookupTableSizeV2",
    "signature": "(table_handle, name=None)",
    "description": "Computes the number of elements in the given table."
  },
  "994": {
    "name": "LoopCond",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LoopCond",
    "signature": "(input, name=None)",
    "description": "Forwards the input to the output."
  },
  "995": {
    "name": "LowerBound",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.LowerBound",
    "signature": "(sorted_inputs, values, out_type=tf.int32, name=None)",
    "description": "Applies lower_bound(sorted_search_values, values) along each row."
  },
  "996": {
    "name": "Lu",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Lu",
    "signature": "(input, output_idx_type=tf.int32, name=None)",
    "description": "Computes the LU decomposition of one or more square matrices."
  },
  "997": {
    "name": "MakeIterator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MakeIterator",
    "signature": "(dataset, iterator, name=None)",
    "description": "Makes a new iterator from the given `dataset` and stores it in `iterator`."
  },
  "998": {
    "name": "MapAndBatchDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MapAndBatchDataset",
    "signature": "(input_dataset, other_arguments, batch_size, num_parallel_calls, drop_remainder, f, output_types, output_shapes, preserve_cardinality=False, metadata='', name=None)",
    "description": "Creates a dataset that fuses mapping with batching."
  },
  "999": {
    "name": "MapClear",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MapClear",
    "signature": "(dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op removes all elements in the underlying container."
  },
  "1000": {
    "name": "MapDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MapDataset",
    "signature": "(input_dataset, other_arguments, f, output_types, output_shapes, use_inter_op_parallelism=True, preserve_cardinality=False, metadata='', name=None)",
    "description": "Creates a dataset that applies `f` to the outputs of `input_dataset`."
  },
  "1001": {
    "name": "MapDefun",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MapDefun",
    "signature": "(arguments, captured_inputs, output_types, output_shapes, f, max_intra_op_parallelism=1, name=None)",
    "description": "Maps a function on the list of tensors unpacked from arguments on dimension 0."
  },
  "1002": {
    "name": "MapIncompleteSize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MapIncompleteSize",
    "signature": "(dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op returns the number of incomplete elements in the underlying container."
  },
  "1003": {
    "name": "MapPeek",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MapPeek",
    "signature": "(key, indices, dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op peeks at the values at the specified key.  If the"
  },
  "1004": {
    "name": "MapSize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MapSize",
    "signature": "(dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op returns the number of elements in the underlying container."
  },
  "1005": {
    "name": "MapStage",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MapStage",
    "signature": "(key, indices, values, dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Stage (key, values) in the underlying container which behaves like a hashtable."
  },
  "1006": {
    "name": "MapUnstage",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MapUnstage",
    "signature": "(key, indices, dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op removes and returns the values associated with the key"
  },
  "1007": {
    "name": "MapUnstageNoKey",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MapUnstageNoKey",
    "signature": "(indices, dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op removes and returns a random (key, value)"
  },
  "1008": {
    "name": "MatMul",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatMul",
    "signature": "(a, b, transpose_a=False, transpose_b=False, name=None)",
    "description": "Multiply the matrix \"a\" by the matrix \"b\"."
  },
  "1009": {
    "name": "MatchingFiles",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatchingFiles",
    "signature": "(pattern, name=None)",
    "description": "Returns the set of files matching one or more glob patterns."
  },
  "1010": {
    "name": "MatchingFilesDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatchingFilesDataset",
    "signature": "(patterns, name=None)",
    "description": "TODO: add doc."
  },
  "1011": {
    "name": "MatrixBandPart",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixBandPart",
    "signature": "(input, num_lower, num_upper, name=None)",
    "description": "Copy a tensor setting everything outside a central band in each innermost matrix to zero."
  },
  "1012": {
    "name": "MatrixDeterminant",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixDeterminant",
    "signature": "(input, name=None)",
    "description": "Computes the determinant of one or more square matrices."
  },
  "1013": {
    "name": "MatrixDiag",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixDiag",
    "signature": "(diagonal, name=None)",
    "description": "Returns a batched diagonal tensor with a given batched diagonal values."
  },
  "1014": {
    "name": "MatrixDiagPart",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixDiagPart",
    "signature": "(input, name=None)",
    "description": "Returns the batched diagonal part of a batched tensor."
  },
  "1015": {
    "name": "MatrixDiagPartV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixDiagPartV2",
    "signature": "(input, k, padding_value, name=None)",
    "description": "Returns the batched diagonal part of a batched tensor."
  },
  "1016": {
    "name": "MatrixDiagPartV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixDiagPartV3",
    "signature": "(input, k, padding_value, align='RIGHT_LEFT', name=None)",
    "description": "Returns the batched diagonal part of a batched tensor."
  },
  "1017": {
    "name": "MatrixDiagV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixDiagV2",
    "signature": "(diagonal, k, num_rows, num_cols, padding_value, name=None)",
    "description": "Returns a batched diagonal tensor with given batched diagonal values."
  },
  "1018": {
    "name": "MatrixDiagV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixDiagV3",
    "signature": "(diagonal, k, num_rows, num_cols, padding_value, align='RIGHT_LEFT', name=None)",
    "description": "Returns a batched diagonal tensor with given batched diagonal values."
  },
  "1019": {
    "name": "MatrixInverse",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixInverse",
    "signature": "(input, adjoint=False, name=None)",
    "description": "Computes the inverse of one or more square invertible matrices or their adjoints (conjugate transposes)."
  },
  "1020": {
    "name": "MatrixLogarithm",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixLogarithm",
    "signature": "(input, name=None)",
    "description": "Computes the matrix logarithm of one or more square matrices:"
  },
  "1021": {
    "name": "MatrixSetDiag",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixSetDiag",
    "signature": "(input, diagonal, name=None)",
    "description": "Returns a batched matrix tensor with new batched diagonal values."
  },
  "1022": {
    "name": "MatrixSetDiagV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixSetDiagV2",
    "signature": "(input, diagonal, k, name=None)",
    "description": "Returns a batched matrix tensor with new batched diagonal values."
  },
  "1023": {
    "name": "MatrixSetDiagV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixSetDiagV3",
    "signature": "(input, diagonal, k, align='RIGHT_LEFT', name=None)",
    "description": "Returns a batched matrix tensor with new batched diagonal values."
  },
  "1024": {
    "name": "MatrixSolve",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixSolve",
    "signature": "(matrix, rhs, adjoint=False, name=None)",
    "description": "Solves systems of linear equations."
  },
  "1025": {
    "name": "MatrixSolveLs",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixSolveLs",
    "signature": "(matrix, rhs, l2_regularizer, fast=True, name=None)",
    "description": "Solves one or more linear least-squares problems."
  },
  "1026": {
    "name": "MatrixSquareRoot",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixSquareRoot",
    "signature": "(input, name=None)",
    "description": "Computes the matrix square root of one or more square matrices:"
  },
  "1027": {
    "name": "MatrixTriangularSolve",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MatrixTriangularSolve",
    "signature": "(matrix, rhs, lower=True, adjoint=False, name=None)",
    "description": "Solves systems of linear equations with upper or lower triangular matrices by backsubstitution."
  },
  "1028": {
    "name": "Max",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Max",
    "signature": "(input, axis, keep_dims=False, name=None)",
    "description": "Computes the maximum of elements across dimensions of a tensor."
  },
  "1029": {
    "name": "MaxIntraOpParallelismDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MaxIntraOpParallelismDataset",
    "signature": "(input_dataset, max_intra_op_parallelism, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that overrides the maximum intra-op parallelism."
  },
  "1030": {
    "name": "MaxPool",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MaxPool",
    "signature": "(input, ksize, strides, padding, explicit_paddings=[], data_format='NHWC', name=None)",
    "description": "Performs max pooling on the input."
  },
  "1031": {
    "name": "MaxPool3D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MaxPool3D",
    "signature": "(input, ksize, strides, padding, data_format='NDHWC', name=None)",
    "description": "Performs 3D max pooling on the input."
  },
  "1032": {
    "name": "MaxPool3DGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MaxPool3DGrad",
    "signature": "(orig_input, orig_output, grad, ksize, strides, padding, data_format='NDHWC', name=None)",
    "description": "Computes gradients of 3D max pooling function."
  },
  "1033": {
    "name": "MaxPool3DGradGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MaxPool3DGradGrad",
    "signature": "(orig_input, orig_output, grad, ksize, strides, padding, data_format='NDHWC', name=None)",
    "description": "Computes second-order gradients of the maxpooling function."
  },
  "1034": {
    "name": "MaxPoolGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MaxPoolGrad",
    "signature": "(orig_input, orig_output, grad, ksize, strides, padding, explicit_paddings=[], data_format='NHWC', name=None)",
    "description": "Computes gradients of the maxpooling function."
  },
  "1035": {
    "name": "MaxPoolGradGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MaxPoolGradGrad",
    "signature": "(orig_input, orig_output, grad, ksize, strides, padding, data_format='NHWC', name=None)",
    "description": "Computes second-order gradients of the maxpooling function."
  },
  "1036": {
    "name": "MaxPoolGradGradV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MaxPoolGradGradV2",
    "signature": "(orig_input, orig_output, grad, ksize, strides, padding, data_format='NHWC', name=None)",
    "description": "Computes second-order gradients of the maxpooling function."
  },
  "1037": {
    "name": "MaxPoolGradGradWithArgmax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MaxPoolGradGradWithArgmax",
    "signature": "(input, grad, argmax, ksize, strides, padding, include_batch_in_index=False, name=None)",
    "description": "Computes second-order gradients of the maxpooling function."
  },
  "1038": {
    "name": "MaxPoolGradV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MaxPoolGradV2",
    "signature": "(orig_input, orig_output, grad, ksize, strides, padding, data_format='NHWC', name=None)",
    "description": "Computes gradients of the maxpooling function."
  },
  "1039": {
    "name": "MaxPoolGradWithArgmax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MaxPoolGradWithArgmax",
    "signature": "(input, grad, argmax, ksize, strides, padding, include_batch_in_index=False, name=None)",
    "description": "Computes gradients of the maxpooling function."
  },
  "1040": {
    "name": "MaxPoolV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MaxPoolV2",
    "signature": "(input, ksize, strides, padding, data_format='NHWC', name=None)",
    "description": "Performs max pooling on the input."
  },
  "1041": {
    "name": "MaxPoolWithArgmax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MaxPoolWithArgmax",
    "signature": "(input, ksize, strides, padding, Targmax=tf.int64, include_batch_in_index=False, name=None)",
    "description": "Performs max pooling on the input and outputs both max values and indices."
  },
  "1042": {
    "name": "Maximum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Maximum",
    "signature": "(x, y, name=None)",
    "description": "Returns the max of x and y (i.e. x > y ? x : y) element-wise."
  },
  "1043": {
    "name": "Mean",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Mean",
    "signature": "(input, axis, keep_dims=False, name=None)",
    "description": "Computes the mean of elements across dimensions of a tensor."
  },
  "1044": {
    "name": "Merge",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Merge",
    "signature": "(inputs, name=None)",
    "description": "Forwards the value of an available tensor from `inputs` to `output`."
  },
  "1045": {
    "name": "MergeSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MergeSummary",
    "signature": "(inputs, name=None)",
    "description": "Merges summaries."
  },
  "1046": {
    "name": "MergeV2Checkpoints",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MergeV2Checkpoints",
    "signature": "(checkpoint_prefixes, destination_prefix, delete_old_dirs=True, allow_missing_files=False, name=None)",
    "description": "V2 format specific: merges the metadata files of sharded checkpoints.  The"
  },
  "1047": {
    "name": "Mfcc",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Mfcc",
    "signature": "(spectrogram, sample_rate, upper_frequency_limit=4000, lower_frequency_limit=20, filterbank_channel_count=40, dct_coefficient_count=13, name=None)",
    "description": "Transforms a spectrogram into a form that's useful for speech recognition."
  },
  "1048": {
    "name": "Min",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Min",
    "signature": "(input, axis, keep_dims=False, name=None)",
    "description": "Computes the minimum of elements across dimensions of a tensor."
  },
  "1049": {
    "name": "Minimum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Minimum",
    "signature": "(x, y, name=None)",
    "description": "Returns the min of x and y (i.e. x < y ? x : y) element-wise."
  },
  "1050": {
    "name": "MirrorPad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MirrorPad",
    "signature": "(input, paddings, mode, name=None)",
    "description": "Pads a tensor with mirrored values."
  },
  "1051": {
    "name": "MirrorPadGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MirrorPadGrad",
    "signature": "(input, paddings, mode, name=None)",
    "description": "Gradient op for `MirrorPad` op. This op folds a mirror-padded tensor."
  },
  "1052": {
    "name": "Mod",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Mod",
    "signature": "(x, y, name=None)",
    "description": "Returns element-wise remainder of division. This emulates C semantics in that"
  },
  "1053": {
    "name": "ModelDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ModelDataset",
    "signature": "(input_dataset, output_types, output_shapes, algorithm=0, cpu_budget=0, ram_budget=0, name=None)",
    "description": "Identity transformation that models performance."
  },
  "1054": {
    "name": "Mul",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Mul",
    "signature": "(x, y, name=None)",
    "description": "Returns x * y element-wise."
  },
  "1055": {
    "name": "MulNoNan",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MulNoNan",
    "signature": "(x, y, name=None)",
    "description": "Returns x * y element-wise. Returns zero if y is zero, even if x if infinite or NaN."
  },
  "1056": {
    "name": "MultiDeviceIterator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MultiDeviceIterator",
    "signature": "(devices, shared_name, container, output_types, output_shapes, name=None)",
    "description": "Creates a MultiDeviceIterator resource."
  },
  "1057": {
    "name": "MultiDeviceIteratorFromStringHandle",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MultiDeviceIteratorFromStringHandle",
    "signature": "(string_handle, output_types=[], output_shapes=[], name=None)",
    "description": "Generates a MultiDeviceIterator resource from its provided string handle."
  },
  "1058": {
    "name": "MultiDeviceIteratorGetNextFromShard",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MultiDeviceIteratorGetNextFromShard",
    "signature": "(multi_device_iterator, shard_num, incarnation_id, output_types, output_shapes, name=None)",
    "description": "Gets next element for the provided shard number."
  },
  "1059": {
    "name": "MultiDeviceIteratorInit",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MultiDeviceIteratorInit",
    "signature": "(dataset, multi_device_iterator, max_buffer_size, name=None)",
    "description": "Initializes the multi device iterator with the given dataset."
  },
  "1060": {
    "name": "MultiDeviceIteratorToStringHandle",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MultiDeviceIteratorToStringHandle",
    "signature": "(multi_device_iterator, name=None)",
    "description": "Produces a string handle for the given MultiDeviceIterator."
  },
  "1061": {
    "name": "Multinomial",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Multinomial",
    "signature": "(logits, num_samples, seed=0, seed2=0, output_dtype=tf.int64, name=None)",
    "description": "Draws samples from a multinomial distribution."
  },
  "1062": {
    "name": "MutableDenseHashTable",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MutableDenseHashTable",
    "signature": "(empty_key, value_dtype, container='', shared_name='', use_node_name_sharing=False, value_shape=[], initial_num_buckets=131072, max_load_factor=0.8, name=None)",
    "description": "Creates an empty hash table that uses tensors as the backing store."
  },
  "1063": {
    "name": "MutableDenseHashTableV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MutableDenseHashTableV2",
    "signature": "(empty_key, deleted_key, value_dtype, container='', shared_name='', use_node_name_sharing=False, value_shape=[], initial_num_buckets=131072, max_load_factor=0.8, name=None)",
    "description": "Creates an empty hash table that uses tensors as the backing store."
  },
  "1064": {
    "name": "MutableHashTable",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MutableHashTable",
    "signature": "(key_dtype, value_dtype, container='', shared_name='', use_node_name_sharing=False, name=None)",
    "description": "Creates an empty hash table."
  },
  "1065": {
    "name": "MutableHashTableOfTensors",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MutableHashTableOfTensors",
    "signature": "(key_dtype, value_dtype, container='', shared_name='', use_node_name_sharing=False, value_shape=[], name=None)",
    "description": "Creates an empty hash table."
  },
  "1066": {
    "name": "MutableHashTableOfTensorsV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MutableHashTableOfTensorsV2",
    "signature": "(key_dtype, value_dtype, container='', shared_name='', use_node_name_sharing=False, value_shape=[], name=None)",
    "description": "Creates an empty hash table."
  },
  "1067": {
    "name": "MutableHashTableV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MutableHashTableV2",
    "signature": "(key_dtype, value_dtype, container='', shared_name='', use_node_name_sharing=False, name=None)",
    "description": "Creates an empty hash table."
  },
  "1068": {
    "name": "MutexLock",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MutexLock",
    "signature": "(mutex, name=None)",
    "description": "Locks a mutex resource.  The output is the lock.  So long as the lock tensor"
  },
  "1069": {
    "name": "MutexV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.MutexV2",
    "signature": "(container='', shared_name='', name=None)",
    "description": "Creates a Mutex resource that can be locked by `MutexLock`."
  },
  "1070": {
    "name": "NcclAllReduce",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NcclAllReduce",
    "signature": "(input, reduction, num_devices, shared_name, name=None)",
    "description": "Outputs a tensor containing the reduction across all input tensors."
  },
  "1071": {
    "name": "NcclBroadcast",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NcclBroadcast",
    "signature": "(input, shape, name=None)",
    "description": "Sends `input` to all devices that are connected to the output."
  },
  "1072": {
    "name": "NcclReduce",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NcclReduce",
    "signature": "(input, reduction, name=None)",
    "description": "Reduces `input` from `num_devices` using `reduction` to a single device."
  },
  "1073": {
    "name": "Ndtri",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Ndtri",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "1074": {
    "name": "Neg",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Neg",
    "signature": "(x, name=None)",
    "description": "Computes numerical negative value element-wise."
  },
  "1075": {
    "name": "NextAfter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NextAfter",
    "signature": "(x1, x2, name=None)",
    "description": "Returns the next representable value of `x1` in the direction of `x2`, element-wise."
  },
  "1076": {
    "name": "NextIteration",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NextIteration",
    "signature": "(data, name=None)",
    "description": "Makes its input available to the next iteration."
  },
  "1077": {
    "name": "NoOp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NoOp",
    "signature": "(name=None)",
    "description": "Does nothing. Only useful as a placeholder for control edges."
  },
  "1078": {
    "name": "NonDeterministicInts",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NonDeterministicInts",
    "signature": "(shape, dtype=tf.int64, name=None)",
    "description": "Non-deterministically generates some integers."
  },
  "1079": {
    "name": "NonMaxSuppression",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NonMaxSuppression",
    "signature": "(boxes, scores, max_output_size, iou_threshold=0.5, name=None)",
    "description": "Greedily selects a subset of bounding boxes in descending order of score,"
  },
  "1080": {
    "name": "NonMaxSuppressionV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NonMaxSuppressionV2",
    "signature": "(boxes, scores, max_output_size, iou_threshold, name=None)",
    "description": "Greedily selects a subset of bounding boxes in descending order of score,"
  },
  "1081": {
    "name": "NonMaxSuppressionV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NonMaxSuppressionV3",
    "signature": "(boxes, scores, max_output_size, iou_threshold, score_threshold, name=None)",
    "description": "Greedily selects a subset of bounding boxes in descending order of score,"
  },
  "1082": {
    "name": "NonMaxSuppressionV4",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NonMaxSuppressionV4",
    "signature": "(boxes, scores, max_output_size, iou_threshold, score_threshold, pad_to_max_output_size=False, name=None)",
    "description": "Greedily selects a subset of bounding boxes in descending order of score,"
  },
  "1083": {
    "name": "NonMaxSuppressionV5",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NonMaxSuppressionV5",
    "signature": "(boxes, scores, max_output_size, iou_threshold, score_threshold, soft_nms_sigma, pad_to_max_output_size=False, name=None)",
    "description": "Greedily selects a subset of bounding boxes in descending order of score,"
  },
  "1084": {
    "name": "NonMaxSuppressionWithOverlaps",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NonMaxSuppressionWithOverlaps",
    "signature": "(overlaps, scores, max_output_size, overlap_threshold, score_threshold, name=None)",
    "description": "Greedily selects a subset of bounding boxes in descending order of score,"
  },
  "1085": {
    "name": "NonSerializableDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NonSerializableDataset",
    "signature": "(input_dataset, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "1086": {
    "name": "NotEqual",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NotEqual",
    "signature": "(x, y, incompatible_shape_error=True, name=None)",
    "description": "Returns the truth value of (x != y) element-wise."
  },
  "1087": {
    "name": "NthElement",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.NthElement",
    "signature": "(input, n, reverse=False, name=None)",
    "description": "Finds values of the `n`-th order statistic for the last dimension."
  },
  "1088": {
    "name": "OneHot",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OneHot",
    "signature": "(indices, depth, on_value, off_value, axis=-1, name=None)",
    "description": "Returns a one-hot tensor."
  },
  "1089": {
    "name": "OneShotIterator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OneShotIterator",
    "signature": "(dataset_factory, output_types, output_shapes, container='', shared_name='', name=None)",
    "description": "Makes a \"one-shot\" iterator that can be iterated only once."
  },
  "1090": {
    "name": "OnesLike",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OnesLike",
    "signature": "(x, name=None)",
    "description": "Returns a tensor of ones with the same shape and type as x."
  },
  "1091": {
    "name": "OptimizeDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OptimizeDataset",
    "signature": "(input_dataset, optimizations, output_types, output_shapes, optimization_configs=[], name=None)",
    "description": "Creates a dataset by applying optimizations to `input_dataset`."
  },
  "1092": {
    "name": "OptimizeDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OptimizeDatasetV2",
    "signature": "(input_dataset, optimizations_enabled, optimizations_disabled, optimizations_default, output_types, output_shapes, optimization_configs=[], name=None)",
    "description": "Creates a dataset by applying related optimizations to `input_dataset`."
  },
  "1093": {
    "name": "OptionalFromValue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OptionalFromValue",
    "signature": "(components, name=None)",
    "description": "Constructs an Optional variant from a tuple of tensors."
  },
  "1094": {
    "name": "OptionalGetValue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OptionalGetValue",
    "signature": "(optional, output_types, output_shapes, name=None)",
    "description": "Returns the value stored in an Optional variant or raises an error if none exists."
  },
  "1095": {
    "name": "OptionalHasValue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OptionalHasValue",
    "signature": "(optional, name=None)",
    "description": "Returns true if and only if the given Optional variant has a value."
  },
  "1096": {
    "name": "OptionalNone",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OptionalNone",
    "signature": "(name=None)",
    "description": "Creates an Optional variant with no value."
  },
  "1097": {
    "name": "OptionsDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OptionsDataset",
    "signature": "(input_dataset, serialized_options, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset by attaching tf.data.Options to `input_dataset`."
  },
  "1098": {
    "name": "OrderedMapClear",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OrderedMapClear",
    "signature": "(dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op removes all elements in the underlying container."
  },
  "1099": {
    "name": "OrderedMapIncompleteSize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OrderedMapIncompleteSize",
    "signature": "(dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op returns the number of incomplete elements in the underlying container."
  },
  "1100": {
    "name": "OrderedMapPeek",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OrderedMapPeek",
    "signature": "(key, indices, dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op peeks at the values at the specified key.  If the"
  },
  "1101": {
    "name": "OrderedMapSize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OrderedMapSize",
    "signature": "(dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op returns the number of elements in the underlying container."
  },
  "1102": {
    "name": "OrderedMapStage",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OrderedMapStage",
    "signature": "(key, indices, values, dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Stage (key, values) in the underlying container which behaves like a ordered"
  },
  "1103": {
    "name": "OrderedMapUnstage",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OrderedMapUnstage",
    "signature": "(key, indices, dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op removes and returns the values associated with the key"
  },
  "1104": {
    "name": "OrderedMapUnstageNoKey",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OrderedMapUnstageNoKey",
    "signature": "(indices, dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op removes and returns the (key, value) element with the smallest"
  },
  "1105": {
    "name": "OutfeedDequeue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OutfeedDequeue",
    "signature": "(dtype, shape, device_ordinal=-1, name=None)",
    "description": "Retrieves a single tensor from the computation outfeed."
  },
  "1106": {
    "name": "OutfeedDequeueTuple",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OutfeedDequeueTuple",
    "signature": "(dtypes, shapes, device_ordinal=-1, name=None)",
    "description": "Retrieve multiple values from the computation outfeed."
  },
  "1107": {
    "name": "OutfeedDequeueTupleV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OutfeedDequeueTupleV2",
    "signature": "(device_ordinal, dtypes, shapes, name=None)",
    "description": "Retrieve multiple values from the computation outfeed. Device ordinal is a"
  },
  "1108": {
    "name": "OutfeedDequeueV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OutfeedDequeueV2",
    "signature": "(device_ordinal, dtype, shape, name=None)",
    "description": "Retrieves a single tensor from the computation outfeed. Device ordinal is a"
  },
  "1109": {
    "name": "OutfeedEnqueue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OutfeedEnqueue",
    "signature": "(input, name=None)",
    "description": "Enqueue a Tensor on the computation outfeed."
  },
  "1110": {
    "name": "OutfeedEnqueueTuple",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.OutfeedEnqueueTuple",
    "signature": "(inputs, name=None)",
    "description": "Enqueue multiple Tensor values on the computation outfeed."
  },
  "1111": {
    "name": "Pack",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Pack",
    "signature": "(values, axis=0, name=None)",
    "description": "Packs a list of `N` rank-`R` tensors into one rank-`(R+1)` tensor."
  },
  "1112": {
    "name": "Pad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Pad",
    "signature": "(input, paddings, name=None)",
    "description": "Pads a tensor with zeros."
  },
  "1113": {
    "name": "PadV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PadV2",
    "signature": "(input, paddings, constant_values, name=None)",
    "description": "Pads a tensor."
  },
  "1114": {
    "name": "PaddedBatchDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PaddedBatchDataset",
    "signature": "(input_dataset, batch_size, padded_shapes, padding_values, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that batches and pads `batch_size` elements from the input."
  },
  "1115": {
    "name": "PaddedBatchDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PaddedBatchDatasetV2",
    "signature": "(input_dataset, batch_size, padded_shapes, padding_values, drop_remainder, output_shapes, parallel_copy=False, metadata='', name=None)",
    "description": "Creates a dataset that batches and pads `batch_size` elements from the input."
  },
  "1116": {
    "name": "PaddingFIFOQueue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PaddingFIFOQueue",
    "signature": "(component_types, shapes=[], capacity=-1, container='', shared_name='', name=None)",
    "description": "A queue that produces elements in first-in first-out order."
  },
  "1117": {
    "name": "PaddingFIFOQueueV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PaddingFIFOQueueV2",
    "signature": "(component_types, shapes=[], capacity=-1, container='', shared_name='', name=None)",
    "description": "A queue that produces elements in first-in first-out order."
  },
  "1118": {
    "name": "ParallelBatchDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParallelBatchDataset",
    "signature": "(input_dataset, batch_size, num_parallel_calls, drop_remainder, output_types, output_shapes, parallel_copy=False, deterministic='default', metadata='', name=None)",
    "description": "TODO: add doc."
  },
  "1119": {
    "name": "ParallelConcat",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParallelConcat",
    "signature": "(values, shape, name=None)",
    "description": "Concatenates a list of `N` tensors along the first dimension."
  },
  "1120": {
    "name": "ParallelDynamicStitch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParallelDynamicStitch",
    "signature": "(indices, data, name=None)",
    "description": "Interleave the values from the `data` tensors into a single tensor."
  },
  "1121": {
    "name": "ParallelFilterDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParallelFilterDataset",
    "signature": "(input_dataset, other_arguments, num_parallel_calls, predicate, output_types, output_shapes, deterministic='default', metadata='', name=None)",
    "description": "Creates a dataset containing elements of `input_dataset` matching `predicate`."
  },
  "1122": {
    "name": "ParallelInterleaveDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParallelInterleaveDatasetV2",
    "signature": "(input_dataset, other_arguments, cycle_length, block_length, num_parallel_calls, f, output_types, output_shapes, sloppy=False, metadata='', name=None)",
    "description": "Creates a dataset that applies `f` to the outputs of `input_dataset`."
  },
  "1123": {
    "name": "ParallelInterleaveDatasetV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParallelInterleaveDatasetV3",
    "signature": "(input_dataset, other_arguments, cycle_length, block_length, num_parallel_calls, f, output_types, output_shapes, deterministic='default', metadata='', name=None)",
    "description": "Creates a dataset that applies `f` to the outputs of `input_dataset`."
  },
  "1124": {
    "name": "ParallelInterleaveDatasetV4",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParallelInterleaveDatasetV4",
    "signature": "(input_dataset, other_arguments, cycle_length, block_length, buffer_output_elements, prefetch_input_elements, num_parallel_calls, f, output_types, output_shapes, deterministic='default', metadata='', name=None)",
    "description": "Creates a dataset that applies `f` to the outputs of `input_dataset`."
  },
  "1125": {
    "name": "ParallelMapDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParallelMapDataset",
    "signature": "(input_dataset, other_arguments, num_parallel_calls, f, output_types, output_shapes, use_inter_op_parallelism=True, sloppy=False, preserve_cardinality=False, metadata='', name=None)",
    "description": "Creates a dataset that applies `f` to the outputs of `input_dataset`."
  },
  "1126": {
    "name": "ParallelMapDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParallelMapDatasetV2",
    "signature": "(input_dataset, other_arguments, num_parallel_calls, f, output_types, output_shapes, use_inter_op_parallelism=True, deterministic='default', preserve_cardinality=False, metadata='', name=None)",
    "description": "Creates a dataset that applies `f` to the outputs of `input_dataset`."
  },
  "1127": {
    "name": "ParameterizedTruncatedNormal",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParameterizedTruncatedNormal",
    "signature": "(shape, means, stdevs, minvals, maxvals, seed=0, seed2=0, name=None)",
    "description": "Outputs random values from a normal distribution. The parameters may each be a"
  },
  "1128": {
    "name": "ParseExample",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParseExample",
    "signature": "(serialized, names, sparse_keys, dense_keys, dense_defaults, sparse_types, dense_shapes, name=None)",
    "description": "Transforms a vector of brain.Example protos (as strings) into typed tensors."
  },
  "1129": {
    "name": "ParseExampleDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParseExampleDataset",
    "signature": "(input_dataset, num_parallel_calls, dense_defaults, sparse_keys, dense_keys, sparse_types, dense_shapes, output_types, output_shapes, sloppy=False, ragged_keys=[], ragged_value_types=[], ragged_split_types=[], name=None)",
    "description": "Transforms `input_dataset` containing `Example` protos as vectors of DT_STRING into a dataset of `Tensor` or `SparseTensor` objects representing the parsed features."
  },
  "1130": {
    "name": "ParseExampleDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParseExampleDatasetV2",
    "signature": "(input_dataset, num_parallel_calls, dense_defaults, sparse_keys, dense_keys, sparse_types, dense_shapes, output_types, output_shapes, deterministic='default', ragged_keys=[], ragged_value_types=[], ragged_split_types=[], name=None)",
    "description": "Transforms `input_dataset` containing `Example` protos as vectors of DT_STRING into a dataset of `Tensor` or `SparseTensor` objects representing the parsed features."
  },
  "1131": {
    "name": "ParseExampleV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParseExampleV2",
    "signature": "(serialized, names, sparse_keys, dense_keys, ragged_keys, dense_defaults, num_sparse, sparse_types, ragged_value_types, ragged_split_types, dense_shapes, name=None)",
    "description": "Transforms a vector of tf.Example protos (as strings) into typed tensors."
  },
  "1132": {
    "name": "ParseSequenceExample",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParseSequenceExample",
    "signature": "(serialized, debug_name, context_dense_defaults, feature_list_dense_missing_assumed_empty, context_sparse_keys, context_dense_keys, feature_list_sparse_keys, feature_list_dense_keys, Ncontext_sparse=0, Ncontext_dense=0, Nfeature_list_sparse=0, Nfeature_list_dense=0, context_sparse_types=[], feature_list_dense_types=[], context_dense_shapes=[], feature_list_sparse_types=[], feature_list_dense_shapes=[], name=None)",
    "description": "Transforms a vector of brain.SequenceExample protos (as strings) into typed tensors."
  },
  "1133": {
    "name": "ParseSequenceExampleV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParseSequenceExampleV2",
    "signature": "(serialized, debug_name, context_sparse_keys, context_dense_keys, context_ragged_keys, feature_list_sparse_keys, feature_list_dense_keys, feature_list_ragged_keys, feature_list_dense_missing_assumed_empty, context_dense_defaults, Ncontext_sparse=0, context_sparse_types=[], context_ragged_value_types=[], context_ragged_split_types=[], context_dense_shapes=[], Nfeature_list_sparse=0, Nfeature_list_dense=0, feature_list_dense_types=[], feature_list_sparse_types=[], feature_list_ragged_value_types=[], feature_list_ragged_split_types=[], feature_list_dense_shapes=[], name=None)",
    "description": "Transforms a vector of tf.io.SequenceExample protos (as strings) into"
  },
  "1134": {
    "name": "ParseSingleExample",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParseSingleExample",
    "signature": "(serialized, dense_defaults, num_sparse, sparse_keys, dense_keys, sparse_types, dense_shapes, name=None)",
    "description": "Transforms a tf.Example proto (as a string) into typed tensors."
  },
  "1135": {
    "name": "ParseSingleSequenceExample",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParseSingleSequenceExample",
    "signature": "(serialized, feature_list_dense_missing_assumed_empty, context_sparse_keys, context_dense_keys, feature_list_sparse_keys, feature_list_dense_keys, context_dense_defaults, debug_name, context_sparse_types=[], feature_list_dense_types=[], context_dense_shapes=[], feature_list_sparse_types=[], feature_list_dense_shapes=[], name=None)",
    "description": "Transforms a scalar brain.SequenceExample proto (as strings) into typed tensors."
  },
  "1136": {
    "name": "ParseTensor",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ParseTensor",
    "signature": "(serialized, out_type, name=None)",
    "description": "Transforms a serialized tensorflow.TensorProto proto into a Tensor."
  },
  "1137": {
    "name": "PartitionedCall",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PartitionedCall",
    "signature": "(args, Tout, f, config='', config_proto='', executor_type='', name=None)",
    "description": "returns `f(inputs)`, where `f`'s body is placed and partitioned."
  },
  "1138": {
    "name": "Placeholder",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Placeholder",
    "signature": "(dtype, shape=None, name=None)",
    "description": "A placeholder op for a value that will be fed into the computation."
  },
  "1139": {
    "name": "PlaceholderV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PlaceholderV2",
    "signature": "(dtype, shape, name=None)",
    "description": "A placeholder op for a value that will be fed into the computation."
  },
  "1140": {
    "name": "PlaceholderWithDefault",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PlaceholderWithDefault",
    "signature": "(input, shape, name=None)",
    "description": "A placeholder op that passes through `input` when its output is not fed."
  },
  "1141": {
    "name": "Polygamma",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Polygamma",
    "signature": "(a, x, name=None)",
    "description": "Compute the polygamma function \\\\(\\psi^{(n)}(x)\\\\)."
  },
  "1142": {
    "name": "PopulationCount",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PopulationCount",
    "signature": "(x, name=None)",
    "description": "Computes element-wise population count (a.k.a. popcount, bitsum, bitcount)."
  },
  "1143": {
    "name": "Pow",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Pow",
    "signature": "(x, y, name=None)",
    "description": "Computes the power of one value to another."
  },
  "1144": {
    "name": "PrefetchDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PrefetchDataset",
    "signature": "(input_dataset, buffer_size, output_types, output_shapes, slack_period=0, legacy_autotune=True, buffer_size_min=0, metadata='', name=None)",
    "description": "Creates a dataset that asynchronously prefetches elements from `input_dataset`."
  },
  "1145": {
    "name": "Prelinearize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Prelinearize",
    "signature": "(input, shape=[], layout=[], name=None)",
    "description": "An op which linearizes one Tensor value to an opaque variant tensor."
  },
  "1146": {
    "name": "PrelinearizeTuple",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PrelinearizeTuple",
    "signature": "(inputs, shapes, layouts=[], name=None)",
    "description": "An op which linearizes multiple Tensor values to an opaque variant tensor."
  },
  "1147": {
    "name": "PreventGradient",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PreventGradient",
    "signature": "(input, message='', name=None)",
    "description": "An identity op that triggers an error if a gradient is requested."
  },
  "1148": {
    "name": "Print",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Print",
    "signature": "(input, data, message='', first_n=-1, summarize=3, name=None)",
    "description": "Prints a list of tensors."
  },
  "1149": {
    "name": "PrintV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PrintV2",
    "signature": "(input, output_stream='stderr', end='\\n', name=None)",
    "description": "Prints a string scalar."
  },
  "1150": {
    "name": "PriorityQueue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PriorityQueue",
    "signature": "(shapes, component_types=[], capacity=-1, container='', shared_name='', name=None)",
    "description": "A queue that produces elements sorted by the first component value."
  },
  "1151": {
    "name": "PriorityQueueV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PriorityQueueV2",
    "signature": "(shapes, component_types=[], capacity=-1, container='', shared_name='', name=None)",
    "description": "A queue that produces elements sorted by the first component value."
  },
  "1152": {
    "name": "PrivateThreadPoolDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PrivateThreadPoolDataset",
    "signature": "(input_dataset, num_threads, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that uses a custom thread pool to compute `input_dataset`."
  },
  "1153": {
    "name": "Prod",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Prod",
    "signature": "(input, axis, keep_dims=False, name=None)",
    "description": "Computes the product of elements across dimensions of a tensor."
  },
  "1154": {
    "name": "PyFunc",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PyFunc",
    "signature": "(input, token, Tout, name=None)",
    "description": "Invokes a python function to compute func(input)->output."
  },
  "1155": {
    "name": "PyFuncStateless",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.PyFuncStateless",
    "signature": "(input, token, Tout, name=None)",
    "description": "A stateless version of PyFunc."
  },
  "1156": {
    "name": "Qr",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Qr",
    "signature": "(input, full_matrices=False, name=None)",
    "description": "Computes the QR decompositions of one or more matrices."
  },
  "1157": {
    "name": "QuantizeAndDequantize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizeAndDequantize",
    "signature": "(input, signed_input=True, num_bits=8, range_given=False, input_min=0, input_max=0, name=None)",
    "description": "Use QuantizeAndDequantizeV2 instead."
  },
  "1158": {
    "name": "QuantizeAndDequantizeV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizeAndDequantizeV2",
    "signature": "(input, input_min, input_max, signed_input=True, num_bits=8, range_given=False, round_mode='HALF_TO_EVEN', narrow_range=False, axis=-1, name=None)",
    "description": "Quantizes then dequantizes a tensor."
  },
  "1159": {
    "name": "QuantizeAndDequantizeV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizeAndDequantizeV3",
    "signature": "(input, input_min, input_max, num_bits, signed_input=True, range_given=True, narrow_range=False, axis=-1, name=None)",
    "description": "Quantizes then dequantizes a tensor."
  },
  "1160": {
    "name": "QuantizeAndDequantizeV4",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizeAndDequantizeV4",
    "signature": "(input, input_min, input_max, signed_input=True, num_bits=8, range_given=False, round_mode='HALF_TO_EVEN', narrow_range=False, axis=-1, name=None)",
    "description": "Quantizes then dequantizes a tensor."
  },
  "1161": {
    "name": "QuantizeAndDequantizeV4Grad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizeAndDequantizeV4Grad",
    "signature": "(gradients, input, input_min, input_max, axis=-1, name=None)",
    "description": "Returns the gradient of `QuantizeAndDequantizeV4`."
  },
  "1162": {
    "name": "QuantizeDownAndShrinkRange",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizeDownAndShrinkRange",
    "signature": "(input, input_min, input_max, out_type, name=None)",
    "description": "Convert the quantized 'input' tensor into a lower-precision 'output', using the"
  },
  "1163": {
    "name": "QuantizeV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizeV2",
    "signature": "(input, min_range, max_range, T, mode='MIN_COMBINED', round_mode='HALF_AWAY_FROM_ZERO', narrow_range=False, axis=-1, ensure_minimum_range=0.01, name=None)",
    "description": "Quantize the 'input' tensor of type float to 'output' tensor of type 'T'."
  },
  "1164": {
    "name": "QuantizedAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedAdd",
    "signature": "(x, y, min_x, max_x, min_y, max_y, Toutput=tf.qint32, name=None)",
    "description": "Returns x + y element-wise, working on quantized buffers."
  },
  "1165": {
    "name": "QuantizedAvgPool",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedAvgPool",
    "signature": "(input, min_input, max_input, ksize, strides, padding, name=None)",
    "description": "Produces the average pool of the input tensor for quantized types."
  },
  "1166": {
    "name": "QuantizedBiasAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedBiasAdd",
    "signature": "(input, bias, min_input, max_input, min_bias, max_bias, out_type, name=None)",
    "description": "Adds Tensor 'bias' to Tensor 'input' for Quantized types."
  },
  "1167": {
    "name": "QuantizedConcat",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedConcat",
    "signature": "(concat_dim, values, input_mins, input_maxes, name=None)",
    "description": "Concatenates quantized tensors along one dimension."
  },
  "1168": {
    "name": "QuantizedConv2D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedConv2D",
    "signature": "(input, filter, min_input, max_input, min_filter, max_filter, strides, padding, out_type=tf.qint32, dilations=[1, 1, 1, 1], name=None)",
    "description": "Computes a 2D convolution given quantized 4D input and filter tensors."
  },
  "1169": {
    "name": "QuantizedConv2DAndRelu",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedConv2DAndRelu",
    "signature": "(input, filter, min_input, max_input, min_filter, max_filter, strides, padding, out_type=tf.qint32, dilations=[1, 1, 1, 1], padding_list=[], name=None)",
    "description": "TODO: add doc."
  },
  "1170": {
    "name": "QuantizedConv2DAndReluAndRequantize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedConv2DAndReluAndRequantize",
    "signature": "(input, filter, min_input, max_input, min_filter, max_filter, min_freezed_output, max_freezed_output, strides, padding, out_type=tf.quint8, dilations=[1, 1, 1, 1], padding_list=[], name=None)",
    "description": "TODO: add doc."
  },
  "1171": {
    "name": "QuantizedConv2DAndRequantize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedConv2DAndRequantize",
    "signature": "(input, filter, min_input, max_input, min_filter, max_filter, min_freezed_output, max_freezed_output, strides, padding, out_type=tf.qint8, dilations=[1, 1, 1, 1], padding_list=[], name=None)",
    "description": "TODO: add doc."
  },
  "1172": {
    "name": "QuantizedConv2DPerChannel",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedConv2DPerChannel",
    "signature": "(input, filter, min_input, max_input, min_filter, max_filter, strides, padding, out_type=tf.qint32, dilations=[1, 1, 1, 1], name=None)",
    "description": "Computes QuantizedConv2D per channel."
  },
  "1173": {
    "name": "QuantizedConv2DWithBias",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedConv2DWithBias",
    "signature": "(input, filter, bias, min_input, max_input, min_filter, max_filter, strides, padding, out_type=tf.qint32, dilations=[1, 1, 1, 1], padding_list=[], name=None)",
    "description": "TODO: add doc."
  },
  "1174": {
    "name": "QuantizedConv2DWithBiasAndRelu",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedConv2DWithBiasAndRelu",
    "signature": "(input, filter, bias, min_input, max_input, min_filter, max_filter, strides, padding, out_type=tf.qint32, dilations=[1, 1, 1, 1], padding_list=[], name=None)",
    "description": "TODO: add doc."
  },
  "1175": {
    "name": "QuantizedConv2DWithBiasAndReluAndRequantize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedConv2DWithBiasAndReluAndRequantize",
    "signature": "(input, filter, bias, min_input, max_input, min_filter, max_filter, min_freezed_output, max_freezed_output, strides, padding, out_type=tf.quint8, dilations=[1, 1, 1, 1], padding_list=[], name=None)",
    "description": "TODO: add doc."
  },
  "1176": {
    "name": "QuantizedConv2DWithBiasAndRequantize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedConv2DWithBiasAndRequantize",
    "signature": "(input, filter, bias, min_input, max_input, min_filter, max_filter, min_freezed_output, max_freezed_output, strides, padding, out_type=tf.qint8, dilations=[1, 1, 1, 1], padding_list=[], name=None)",
    "description": "TODO: add doc."
  },
  "1177": {
    "name": "QuantizedConv2DWithBiasSignedSumAndReluAndRequantize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedConv2DWithBiasSignedSumAndReluAndRequantize",
    "signature": "(input, filter, bias, min_input, max_input, min_filter, max_filter, min_freezed_output, max_freezed_output, summand, min_summand, max_summand, strides, padding, out_type=tf.quint8, dilations=[1, 1, 1, 1], padding_list=[], name=None)",
    "description": "TODO: add doc."
  },
  "1178": {
    "name": "QuantizedConv2DWithBiasSumAndRelu",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedConv2DWithBiasSumAndRelu",
    "signature": "(input, filter, bias, min_input, max_input, min_filter, max_filter, summand, strides, padding, out_type=tf.qint32, dilations=[1, 1, 1, 1], padding_list=[], name=None)",
    "description": "TODO: add doc."
  },
  "1179": {
    "name": "QuantizedConv2DWithBiasSumAndReluAndRequantize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedConv2DWithBiasSumAndReluAndRequantize",
    "signature": "(input, filter, bias, min_input, max_input, min_filter, max_filter, min_freezed_output, max_freezed_output, summand, min_summand, max_summand, strides, padding, out_type=tf.quint8, dilations=[1, 1, 1, 1], padding_list=[], name=None)",
    "description": "TODO: add doc."
  },
  "1180": {
    "name": "QuantizedDepthwiseConv2D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedDepthwiseConv2D",
    "signature": "(input, filter, min_input, max_input, min_filter, max_filter, strides, padding, out_type=tf.qint32, dilations=[1, 1, 1, 1], name=None)",
    "description": "Computes quantized depthwise Conv2D."
  },
  "1181": {
    "name": "QuantizedDepthwiseConv2DWithBias",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedDepthwiseConv2DWithBias",
    "signature": "(input, filter, bias, min_input, max_input, min_filter, max_filter, strides, padding, out_type=tf.qint32, dilations=[1, 1, 1, 1], name=None)",
    "description": "Computes quantized depthwise Conv2D with Bias."
  },
  "1182": {
    "name": "QuantizedDepthwiseConv2DWithBiasAndRelu",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedDepthwiseConv2DWithBiasAndRelu",
    "signature": "(input, filter, bias, min_input, max_input, min_filter, max_filter, strides, padding, out_type=tf.qint32, dilations=[1, 1, 1, 1], padding_list=[], name=None)",
    "description": "Computes quantized depthwise Conv2D with Bias and Relu."
  },
  "1183": {
    "name": "QuantizedDepthwiseConv2DWithBiasAndReluAndRequantize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedDepthwiseConv2DWithBiasAndReluAndRequantize",
    "signature": "(input, filter, bias, min_input, max_input, min_filter, max_filter, min_freezed_output, max_freezed_output, strides, padding, out_type=tf.quint8, dilations=[1, 1, 1, 1], padding_list=[], name=None)",
    "description": "Computes quantized depthwise Conv2D with Bias, Relu and Requantize."
  },
  "1184": {
    "name": "QuantizedInstanceNorm",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedInstanceNorm",
    "signature": "(x, x_min, x_max, output_range_given=False, given_y_min=0, given_y_max=0, variance_epsilon=1e-05, min_separation=0.001, name=None)",
    "description": "Quantized Instance normalization."
  },
  "1185": {
    "name": "QuantizedMatMul",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedMatMul",
    "signature": "(a, b, min_a, max_a, min_b, max_b, Toutput=tf.qint32, transpose_a=False, transpose_b=False, Tactivation=tf.quint8, name=None)",
    "description": "Perform a quantized matrix multiplication of  `a` by the matrix `b`."
  },
  "1186": {
    "name": "QuantizedMatMulWithBias",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedMatMulWithBias",
    "signature": "(a, b, bias, min_a, max_a, min_b, max_b, Toutput=tf.qint32, transpose_a=False, transpose_b=False, input_quant_mode='MIN_FIRST', name=None)",
    "description": "Performs a quantized matrix multiplication of `a` by the matrix `b` with bias"
  },
  "1187": {
    "name": "QuantizedMatMulWithBiasAndDequantize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedMatMulWithBiasAndDequantize",
    "signature": "(a, b, bias, min_a, max_a, min_b, max_b, min_freezed_output, max_freezed_output, Toutput, transpose_a=False, transpose_b=False, input_quant_mode='MIN_FIRST', name=None)",
    "description": "TODO: add doc."
  },
  "1188": {
    "name": "QuantizedMatMulWithBiasAndRelu",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedMatMulWithBiasAndRelu",
    "signature": "(a, b, bias, min_a, max_a, min_b, max_b, Toutput=tf.qint32, transpose_a=False, transpose_b=False, input_quant_mode='MIN_FIRST', name=None)",
    "description": "Perform a quantized matrix multiplication of  `a` by the matrix `b` with bias"
  },
  "1189": {
    "name": "QuantizedMatMulWithBiasAndReluAndRequantize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedMatMulWithBiasAndReluAndRequantize",
    "signature": "(a, b, bias, min_a, max_a, min_b, max_b, min_freezed_output, max_freezed_output, Toutput=tf.quint8, transpose_a=False, transpose_b=False, input_quant_mode='MIN_FIRST', name=None)",
    "description": "Perform a quantized matrix multiplication of  `a` by the matrix `b` with bias"
  },
  "1190": {
    "name": "QuantizedMatMulWithBiasAndRequantize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedMatMulWithBiasAndRequantize",
    "signature": "(a, b, bias, min_a, max_a, min_b, max_b, min_freezed_output, max_freezed_output, Toutput=tf.quint8, transpose_a=False, transpose_b=False, input_quant_mode='MIN_FIRST', name=None)",
    "description": "TODO: add doc."
  },
  "1191": {
    "name": "QuantizedMaxPool",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedMaxPool",
    "signature": "(input, min_input, max_input, ksize, strides, padding, name=None)",
    "description": "Produces the max pool of the input tensor for quantized types."
  },
  "1192": {
    "name": "QuantizedMul",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedMul",
    "signature": "(x, y, min_x, max_x, min_y, max_y, Toutput=tf.qint32, name=None)",
    "description": "Returns x * y element-wise, working on quantized buffers."
  },
  "1193": {
    "name": "QuantizedRelu",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedRelu",
    "signature": "(features, min_features, max_features, out_type=tf.quint8, name=None)",
    "description": "Computes Quantized Rectified Linear: `max(features, 0)`"
  },
  "1194": {
    "name": "QuantizedRelu6",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedRelu6",
    "signature": "(features, min_features, max_features, out_type=tf.quint8, name=None)",
    "description": "Computes Quantized Rectified Linear 6: `min(max(features, 0), 6)`"
  },
  "1195": {
    "name": "QuantizedReluX",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedReluX",
    "signature": "(features, max_value, min_features, max_features, out_type=tf.quint8, name=None)",
    "description": "Computes Quantized Rectified Linear X: `min(max(features, 0), max_value)`"
  },
  "1196": {
    "name": "QuantizedReshape",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedReshape",
    "signature": "(tensor, shape, input_min, input_max, name=None)",
    "description": "Reshapes a quantized tensor as per the Reshape op."
  },
  "1197": {
    "name": "QuantizedResizeBilinear",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QuantizedResizeBilinear",
    "signature": "(images, size, min, max, align_corners=False, half_pixel_centers=False, name=None)",
    "description": "Resize quantized `images` to `size` using quantized bilinear interpolation."
  },
  "1198": {
    "name": "QueueClose",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueClose",
    "signature": "(handle, cancel_pending_enqueues=False, name=None)",
    "description": "Closes the given queue."
  },
  "1199": {
    "name": "QueueCloseV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueCloseV2",
    "signature": "(handle, cancel_pending_enqueues=False, name=None)",
    "description": "Closes the given queue."
  },
  "1200": {
    "name": "QueueDequeue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueDequeue",
    "signature": "(handle, component_types, timeout_ms=-1, name=None)",
    "description": "Dequeues a tuple of one or more tensors from the given queue."
  },
  "1201": {
    "name": "QueueDequeueMany",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueDequeueMany",
    "signature": "(handle, n, component_types, timeout_ms=-1, name=None)",
    "description": "Dequeues `n` tuples of one or more tensors from the given queue."
  },
  "1202": {
    "name": "QueueDequeueManyV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueDequeueManyV2",
    "signature": "(handle, n, component_types, timeout_ms=-1, name=None)",
    "description": "Dequeues `n` tuples of one or more tensors from the given queue."
  },
  "1203": {
    "name": "QueueDequeueUpTo",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueDequeueUpTo",
    "signature": "(handle, n, component_types, timeout_ms=-1, name=None)",
    "description": "Dequeues `n` tuples of one or more tensors from the given queue."
  },
  "1204": {
    "name": "QueueDequeueUpToV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueDequeueUpToV2",
    "signature": "(handle, n, component_types, timeout_ms=-1, name=None)",
    "description": "Dequeues `n` tuples of one or more tensors from the given queue."
  },
  "1205": {
    "name": "QueueDequeueV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueDequeueV2",
    "signature": "(handle, component_types, timeout_ms=-1, name=None)",
    "description": "Dequeues a tuple of one or more tensors from the given queue."
  },
  "1206": {
    "name": "QueueEnqueue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueEnqueue",
    "signature": "(handle, components, timeout_ms=-1, name=None)",
    "description": "Enqueues a tuple of one or more tensors in the given queue."
  },
  "1207": {
    "name": "QueueEnqueueMany",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueEnqueueMany",
    "signature": "(handle, components, timeout_ms=-1, name=None)",
    "description": "Enqueues zero or more tuples of one or more tensors in the given queue."
  },
  "1208": {
    "name": "QueueEnqueueManyV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueEnqueueManyV2",
    "signature": "(handle, components, timeout_ms=-1, name=None)",
    "description": "Enqueues zero or more tuples of one or more tensors in the given queue."
  },
  "1209": {
    "name": "QueueEnqueueV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueEnqueueV2",
    "signature": "(handle, components, timeout_ms=-1, name=None)",
    "description": "Enqueues a tuple of one or more tensors in the given queue."
  },
  "1210": {
    "name": "QueueIsClosed",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueIsClosed",
    "signature": "(handle, name=None)",
    "description": "Returns true if queue is closed."
  },
  "1211": {
    "name": "QueueIsClosedV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueIsClosedV2",
    "signature": "(handle, name=None)",
    "description": "Returns true if queue is closed."
  },
  "1212": {
    "name": "QueueSize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueSize",
    "signature": "(handle, name=None)",
    "description": "Computes the number of elements in the given queue."
  },
  "1213": {
    "name": "QueueSizeV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.QueueSizeV2",
    "signature": "(handle, name=None)",
    "description": "Computes the number of elements in the given queue."
  },
  "1214": {
    "name": "RFFT",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RFFT",
    "signature": "(input, fft_length, Tcomplex=tf.complex64, name=None)",
    "description": "Real-valued fast Fourier transform."
  },
  "1215": {
    "name": "RFFT2D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RFFT2D",
    "signature": "(input, fft_length, Tcomplex=tf.complex64, name=None)",
    "description": "2D real-valued fast Fourier transform."
  },
  "1216": {
    "name": "RFFT3D",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RFFT3D",
    "signature": "(input, fft_length, Tcomplex=tf.complex64, name=None)",
    "description": "3D real-valued fast Fourier transform."
  },
  "1217": {
    "name": "RGBToHSV",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RGBToHSV",
    "signature": "(images, name=None)",
    "description": "Converts one or more images from RGB to HSV."
  },
  "1218": {
    "name": "RaggedBincount",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RaggedBincount",
    "signature": "(splits, values, size, weights, binary_output=False, name=None)",
    "description": "Counts the number of occurrences of each value in an integer array."
  },
  "1219": {
    "name": "RaggedCountSparseOutput",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RaggedCountSparseOutput",
    "signature": "(splits, values, weights, binary_output, minlength=-1, maxlength=-1, name=None)",
    "description": "Performs sparse-output bin counting for a ragged tensor input."
  },
  "1220": {
    "name": "RaggedCross",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RaggedCross",
    "signature": "(ragged_values, ragged_row_splits, sparse_indices, sparse_values, sparse_shape, dense_inputs, input_order, hashed_output, num_buckets, hash_key, out_values_type, out_row_splits_type, name=None)",
    "description": "Generates a feature cross from a list of tensors, and returns it as a"
  },
  "1221": {
    "name": "RaggedRange",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RaggedRange",
    "signature": "(starts, limits, deltas, Tsplits=tf.int64, name=None)",
    "description": "Returns a `RaggedTensor` containing the specified sequences of numbers."
  },
  "1222": {
    "name": "RaggedTensorFromVariant",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RaggedTensorFromVariant",
    "signature": "(encoded_ragged, input_ragged_rank, output_ragged_rank, Tvalues, Tsplits=tf.int64, name=None)",
    "description": "Decodes a `variant` Tensor into a `RaggedTensor`."
  },
  "1223": {
    "name": "RaggedTensorToSparse",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RaggedTensorToSparse",
    "signature": "(rt_nested_splits, rt_dense_values, name=None)",
    "description": "Converts a `RaggedTensor` into a `SparseTensor` with the same values."
  },
  "1224": {
    "name": "RaggedTensorToTensor",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RaggedTensorToTensor",
    "signature": "(shape, values, default_value, row_partition_tensors, row_partition_types, name=None)",
    "description": "Create a dense tensor from a ragged tensor, possibly altering its shape."
  },
  "1225": {
    "name": "RaggedTensorToVariant",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RaggedTensorToVariant",
    "signature": "(rt_nested_splits, rt_dense_values, batched_input, name=None)",
    "description": "Encodes a `RaggedTensor` into a `variant` Tensor."
  },
  "1226": {
    "name": "RaggedTensorToVariantGradient",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RaggedTensorToVariantGradient",
    "signature": "(encoded_ragged_grad, row_splits, dense_values_shape, Tvalues, name=None)",
    "description": "Helper used to compute the gradient for `RaggedTensorToVariant`."
  },
  "1227": {
    "name": "RandomCrop",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RandomCrop",
    "signature": "(image, size, seed=0, seed2=0, name=None)",
    "description": "Randomly crop `image`."
  },
  "1228": {
    "name": "RandomDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RandomDataset",
    "signature": "(seed, seed2, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a Dataset that returns pseudorandom numbers."
  },
  "1229": {
    "name": "RandomGamma",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RandomGamma",
    "signature": "(shape, alpha, seed=0, seed2=0, name=None)",
    "description": "Outputs random values from the Gamma distribution(s) described by alpha."
  },
  "1230": {
    "name": "RandomGammaGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RandomGammaGrad",
    "signature": "(alpha, sample, name=None)",
    "description": "Computes the derivative of a Gamma random sample w.r.t. `alpha`."
  },
  "1231": {
    "name": "RandomIndexShuffle",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RandomIndexShuffle",
    "signature": "(index, seed, max_index, name=None)",
    "description": "Outputs the position of `value` in a permutation of [0, ..., max_index]."
  },
  "1232": {
    "name": "RandomPoisson",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RandomPoisson",
    "signature": "(shape, rate, seed=0, seed2=0, name=None)",
    "description": "Use RandomPoissonV2 instead."
  },
  "1233": {
    "name": "RandomPoissonV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RandomPoissonV2",
    "signature": "(shape, rate, seed=0, seed2=0, dtype=tf.int64, name=None)",
    "description": "Outputs random values from the Poisson distribution(s) described by rate."
  },
  "1234": {
    "name": "RandomShuffle",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RandomShuffle",
    "signature": "(value, seed=0, seed2=0, name=None)",
    "description": "Randomly shuffles a tensor along its first dimension."
  },
  "1235": {
    "name": "RandomShuffleQueue",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RandomShuffleQueue",
    "signature": "(component_types, shapes=[], capacity=-1, min_after_dequeue=0, seed=0, seed2=0, container='', shared_name='', name=None)",
    "description": "A queue that randomizes the order of elements."
  },
  "1236": {
    "name": "RandomShuffleQueueV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RandomShuffleQueueV2",
    "signature": "(component_types, shapes=[], capacity=-1, min_after_dequeue=0, seed=0, seed2=0, container='', shared_name='', name=None)",
    "description": "A queue that randomizes the order of elements."
  },
  "1237": {
    "name": "RandomStandardNormal",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RandomStandardNormal",
    "signature": "(shape, dtype, seed=0, seed2=0, name=None)",
    "description": "Outputs random values from a normal distribution."
  },
  "1238": {
    "name": "RandomUniform",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RandomUniform",
    "signature": "(shape, dtype, seed=0, seed2=0, name=None)",
    "description": "Outputs random values from a uniform distribution."
  },
  "1239": {
    "name": "RandomUniformInt",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RandomUniformInt",
    "signature": "(shape, minval, maxval, seed=0, seed2=0, name=None)",
    "description": "Outputs random integers from a uniform distribution."
  },
  "1240": {
    "name": "Range",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Range",
    "signature": "(start, limit, delta, name=None)",
    "description": "Creates a sequence of numbers."
  },
  "1241": {
    "name": "RangeDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RangeDataset",
    "signature": "(start, stop, step, output_types, output_shapes, metadata='', replicate_on_split=False, name=None)",
    "description": "Creates a dataset with a range of values. Corresponds to python's xrange."
  },
  "1242": {
    "name": "Rank",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Rank",
    "signature": "(input, name=None)",
    "description": "Returns the rank of a tensor."
  },
  "1243": {
    "name": "ReadFile",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReadFile",
    "signature": "(filename, name=None)",
    "description": "Reads and outputs the entire contents of the input filename."
  },
  "1244": {
    "name": "ReadVariableOp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReadVariableOp",
    "signature": "(resource, dtype, name=None)",
    "description": "Reads the value of a variable."
  },
  "1245": {
    "name": "ReadVariableXlaSplitND",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReadVariableXlaSplitND",
    "signature": "(resource, T, N, num_splits, paddings=[], name=None)",
    "description": "Splits resource variable input tensor across all dimensions."
  },
  "1246": {
    "name": "ReaderNumRecordsProduced",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReaderNumRecordsProduced",
    "signature": "(reader_handle, name=None)",
    "description": "Returns the number of records this Reader has produced."
  },
  "1247": {
    "name": "ReaderNumRecordsProducedV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReaderNumRecordsProducedV2",
    "signature": "(reader_handle, name=None)",
    "description": "Returns the number of records this Reader has produced."
  },
  "1248": {
    "name": "ReaderNumWorkUnitsCompleted",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReaderNumWorkUnitsCompleted",
    "signature": "(reader_handle, name=None)",
    "description": "Returns the number of work units this Reader has finished processing."
  },
  "1249": {
    "name": "ReaderNumWorkUnitsCompletedV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReaderNumWorkUnitsCompletedV2",
    "signature": "(reader_handle, name=None)",
    "description": "Returns the number of work units this Reader has finished processing."
  },
  "1250": {
    "name": "ReaderRead",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReaderRead",
    "signature": "(reader_handle, queue_handle, name=None)",
    "description": "Returns the next record (key, value pair) produced by a Reader."
  },
  "1251": {
    "name": "ReaderReadUpTo",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReaderReadUpTo",
    "signature": "(reader_handle, queue_handle, num_records, name=None)",
    "description": "Returns up to `num_records` (key, value) pairs produced by a Reader."
  },
  "1252": {
    "name": "ReaderReadUpToV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReaderReadUpToV2",
    "signature": "(reader_handle, queue_handle, num_records, name=None)",
    "description": "Returns up to `num_records` (key, value) pairs produced by a Reader."
  },
  "1253": {
    "name": "ReaderReadV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReaderReadV2",
    "signature": "(reader_handle, queue_handle, name=None)",
    "description": "Returns the next record (key, value pair) produced by a Reader."
  },
  "1254": {
    "name": "ReaderReset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReaderReset",
    "signature": "(reader_handle, name=None)",
    "description": "Restore a Reader to its initial clean state."
  },
  "1255": {
    "name": "ReaderResetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReaderResetV2",
    "signature": "(reader_handle, name=None)",
    "description": "Restore a Reader to its initial clean state."
  },
  "1256": {
    "name": "ReaderRestoreState",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReaderRestoreState",
    "signature": "(reader_handle, state, name=None)",
    "description": "Restore a reader to a previously saved state."
  },
  "1257": {
    "name": "ReaderRestoreStateV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReaderRestoreStateV2",
    "signature": "(reader_handle, state, name=None)",
    "description": "Restore a reader to a previously saved state."
  },
  "1258": {
    "name": "ReaderSerializeState",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReaderSerializeState",
    "signature": "(reader_handle, name=None)",
    "description": "Produce a string tensor that encodes the state of a Reader."
  },
  "1259": {
    "name": "ReaderSerializeStateV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReaderSerializeStateV2",
    "signature": "(reader_handle, name=None)",
    "description": "Produce a string tensor that encodes the state of a Reader."
  },
  "1260": {
    "name": "Real",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Real",
    "signature": "(input, Tout=tf.float32, name=None)",
    "description": "Returns the real part of a complex number."
  },
  "1261": {
    "name": "RealDiv",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RealDiv",
    "signature": "(x, y, name=None)",
    "description": "Returns x / y element-wise for real types."
  },
  "1262": {
    "name": "RebatchDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RebatchDataset",
    "signature": "(input_dataset, num_replicas, output_types, output_shapes, use_fallback=True, name=None)",
    "description": "Creates a dataset that changes the batch size."
  },
  "1263": {
    "name": "RebatchDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RebatchDatasetV2",
    "signature": "(input_dataset, batch_sizes, drop_remainder, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that changes the batch size."
  },
  "1264": {
    "name": "Reciprocal",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Reciprocal",
    "signature": "(x, name=None)",
    "description": "Computes the reciprocal of x element-wise."
  },
  "1265": {
    "name": "ReciprocalGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReciprocalGrad",
    "signature": "(y, dy, name=None)",
    "description": "Computes the gradient for the inverse of `x` wrt its input."
  },
  "1266": {
    "name": "RecordInput",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RecordInput",
    "signature": "(file_pattern, file_random_seed=301, file_shuffle_shift_ratio=0, file_buffer_size=10000, file_parallelism=16, batch_size=32, compression_type='', name=None)",
    "description": "Emits randomized records."
  },
  "1267": {
    "name": "Recv",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Recv",
    "signature": "(tensor_type, tensor_name, send_device, send_device_incarnation, recv_device, client_terminated=False, name=None)",
    "description": "Receives the named tensor from send_device on recv_device."
  },
  "1268": {
    "name": "RecvTPUEmbeddingActivations",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RecvTPUEmbeddingActivations",
    "signature": "(num_outputs, config, name=None)",
    "description": "An op that receives embedding activations on the TPU."
  },
  "1269": {
    "name": "ReduceDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReduceDataset",
    "signature": "(input_dataset, initial_state, other_arguments, f, output_types, output_shapes, use_inter_op_parallelism=True, metadata='', name=None)",
    "description": "Reduces the input dataset to a singleton using a reduce function."
  },
  "1270": {
    "name": "ReduceJoin",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReduceJoin",
    "signature": "(inputs, reduction_indices, keep_dims=False, separator='', name=None)",
    "description": "Joins a string Tensor across the given dimensions."
  },
  "1271": {
    "name": "RefEnter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RefEnter",
    "signature": "(data, frame_name, is_constant=False, parallel_iterations=10, name=None)",
    "description": "Creates or finds a child frame, and makes `data` available to the child frame."
  },
  "1272": {
    "name": "RefExit",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RefExit",
    "signature": "(data, name=None)",
    "description": "Exits the current frame to its parent frame."
  },
  "1273": {
    "name": "RefIdentity",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RefIdentity",
    "signature": "(input, name=None)",
    "description": "Return the same ref tensor as the input ref tensor."
  },
  "1274": {
    "name": "RefMerge",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RefMerge",
    "signature": "(inputs, name=None)",
    "description": "Forwards the value of an available tensor from `inputs` to `output`."
  },
  "1275": {
    "name": "RefNextIteration",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RefNextIteration",
    "signature": "(data, name=None)",
    "description": "Makes its input available to the next iteration."
  },
  "1276": {
    "name": "RefSelect",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RefSelect",
    "signature": "(index, inputs, name=None)",
    "description": "Forwards the `index`th element of `inputs` to `output`."
  },
  "1277": {
    "name": "RefSwitch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RefSwitch",
    "signature": "(data, pred, name=None)",
    "description": "Forwards the ref tensor `data` to the output port determined by `pred`."
  },
  "1278": {
    "name": "RegexFullMatch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RegexFullMatch",
    "signature": "(input, pattern, name=None)",
    "description": "Check if the input matches the regex pattern."
  },
  "1279": {
    "name": "RegexReplace",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RegexReplace",
    "signature": "(input, pattern, rewrite, replace_global=True, name=None)",
    "description": "Replaces matches of the `pattern` regular expression in `input` with the"
  },
  "1280": {
    "name": "RegisterDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RegisterDataset",
    "signature": "(dataset, address, protocol, external_state_policy, element_spec='', metadata='', name=None)",
    "description": "Registers a dataset with the tf.data service."
  },
  "1281": {
    "name": "RegisterDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RegisterDatasetV2",
    "signature": "(dataset, address, protocol, external_state_policy, element_spec='', requested_dataset_id='', metadata='', name=None)",
    "description": "Registers a dataset with the tf.data service."
  },
  "1282": {
    "name": "Relu",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Relu",
    "signature": "(features, name=None)",
    "description": "Computes rectified linear: `max(features, 0)`."
  },
  "1283": {
    "name": "Relu6",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Relu6",
    "signature": "(features, name=None)",
    "description": "Computes rectified linear 6: `min(max(features, 0), 6)`."
  },
  "1284": {
    "name": "Relu6Grad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Relu6Grad",
    "signature": "(gradients, features, name=None)",
    "description": "Computes rectified linear 6 gradients for a Relu6 operation."
  },
  "1285": {
    "name": "ReluGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReluGrad",
    "signature": "(gradients, features, name=None)",
    "description": "Computes rectified linear gradients for a Relu operation."
  },
  "1286": {
    "name": "RemoteCall",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RemoteCall",
    "signature": "(target, args, Tout, f, name=None)",
    "description": "Runs function `f` on a remote device indicated by `target`."
  },
  "1287": {
    "name": "RepeatDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RepeatDataset",
    "signature": "(input_dataset, count, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that emits the outputs of `input_dataset` `count` times."
  },
  "1288": {
    "name": "RequantizationRange",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RequantizationRange",
    "signature": "(input, input_min, input_max, name=None)",
    "description": "Computes a range that covers the actual values present in a quantized tensor."
  },
  "1289": {
    "name": "RequantizationRangePerChannel",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RequantizationRangePerChannel",
    "signature": "(input, input_min, input_max, clip_value_max, name=None)",
    "description": "Computes requantization range per channel."
  },
  "1290": {
    "name": "Requantize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Requantize",
    "signature": "(input, input_min, input_max, requested_output_min, requested_output_max, out_type, name=None)",
    "description": "Converts the quantized `input` tensor into a lower-precision `output`."
  },
  "1291": {
    "name": "RequantizePerChannel",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RequantizePerChannel",
    "signature": "(input, input_min, input_max, requested_output_min, requested_output_max, out_type=tf.quint8, name=None)",
    "description": "Requantizes input with min and max values known per channel."
  },
  "1292": {
    "name": "Reshape",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Reshape",
    "signature": "(tensor, shape, name=None)",
    "description": "Reshapes a tensor."
  },
  "1293": {
    "name": "ResizeArea",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResizeArea",
    "signature": "(images, size, align_corners=False, name=None)",
    "description": "Resize `images` to `size` using area interpolation."
  },
  "1294": {
    "name": "ResizeBicubic",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResizeBicubic",
    "signature": "(images, size, align_corners=False, half_pixel_centers=False, name=None)",
    "description": "Resize `images` to `size` using bicubic interpolation."
  },
  "1295": {
    "name": "ResizeBicubicGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResizeBicubicGrad",
    "signature": "(grads, original_image, align_corners=False, half_pixel_centers=False, name=None)",
    "description": "Computes the gradient of bicubic interpolation."
  },
  "1296": {
    "name": "ResizeBilinear",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResizeBilinear",
    "signature": "(images, size, align_corners=False, half_pixel_centers=False, name=None)",
    "description": "Resize `images` to `size` using bilinear interpolation."
  },
  "1297": {
    "name": "ResizeBilinearGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResizeBilinearGrad",
    "signature": "(grads, original_image, align_corners=False, half_pixel_centers=False, name=None)",
    "description": "Computes the gradient of bilinear interpolation."
  },
  "1298": {
    "name": "ResizeNearestNeighbor",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResizeNearestNeighbor",
    "signature": "(images, size, align_corners=False, half_pixel_centers=False, name=None)",
    "description": "Resize `images` to `size` using nearest neighbor interpolation."
  },
  "1299": {
    "name": "ResizeNearestNeighborGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResizeNearestNeighborGrad",
    "signature": "(grads, size, align_corners=False, half_pixel_centers=False, name=None)",
    "description": "Computes the gradient of nearest neighbor interpolation."
  },
  "1300": {
    "name": "ResourceAccumulatorApplyGradient",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceAccumulatorApplyGradient",
    "signature": "(handle, local_step, gradient, name=None)",
    "description": "Applies a gradient to a given accumulator."
  },
  "1301": {
    "name": "ResourceAccumulatorNumAccumulated",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceAccumulatorNumAccumulated",
    "signature": "(handle, name=None)",
    "description": "Returns the number of gradients aggregated in the given accumulators."
  },
  "1302": {
    "name": "ResourceAccumulatorSetGlobalStep",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceAccumulatorSetGlobalStep",
    "signature": "(handle, new_global_step, name=None)",
    "description": "Updates the accumulator with a new value for global_step."
  },
  "1303": {
    "name": "ResourceAccumulatorTakeGradient",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceAccumulatorTakeGradient",
    "signature": "(handle, num_required, dtype, name=None)",
    "description": "Extracts the average gradient in the given ConditionalAccumulator."
  },
  "1304": {
    "name": "ResourceApplyAdaMax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyAdaMax",
    "signature": "(var, m, v, beta1_power, lr, beta1, beta2, epsilon, grad, use_locking=False, name=None)",
    "description": "Update '*var' according to the AdaMax algorithm."
  },
  "1305": {
    "name": "ResourceApplyAdadelta",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyAdadelta",
    "signature": "(var, accum, accum_update, lr, rho, epsilon, grad, use_locking=False, name=None)",
    "description": "Update '*var' according to the adadelta scheme."
  },
  "1306": {
    "name": "ResourceApplyAdagrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyAdagrad",
    "signature": "(var, accum, lr, grad, use_locking=False, update_slots=True, name=None)",
    "description": "Update '*var' according to the adagrad scheme."
  },
  "1307": {
    "name": "ResourceApplyAdagradDA",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyAdagradDA",
    "signature": "(var, gradient_accumulator, gradient_squared_accumulator, grad, lr, l1, l2, global_step, use_locking=False, name=None)",
    "description": "Update '*var' according to the proximal adagrad scheme."
  },
  "1308": {
    "name": "ResourceApplyAdagradV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyAdagradV2",
    "signature": "(var, accum, lr, epsilon, grad, use_locking=False, update_slots=True, name=None)",
    "description": "Update '*var' according to the adagrad scheme."
  },
  "1309": {
    "name": "ResourceApplyAdam",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyAdam",
    "signature": "(var, m, v, beta1_power, beta2_power, lr, beta1, beta2, epsilon, grad, use_locking=False, use_nesterov=False, name=None)",
    "description": "Update '*var' according to the Adam algorithm."
  },
  "1310": {
    "name": "ResourceApplyAdamWithAmsgrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyAdamWithAmsgrad",
    "signature": "(var, m, v, vhat, beta1_power, beta2_power, lr, beta1, beta2, epsilon, grad, use_locking=False, name=None)",
    "description": "Update '*var' according to the Adam algorithm."
  },
  "1311": {
    "name": "ResourceApplyAddSign",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyAddSign",
    "signature": "(var, m, lr, alpha, sign_decay, beta, grad, use_locking=False, name=None)",
    "description": "Update '*var' according to the AddSign update."
  },
  "1312": {
    "name": "ResourceApplyCenteredRMSProp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyCenteredRMSProp",
    "signature": "(var, mg, ms, mom, lr, rho, momentum, epsilon, grad, use_locking=False, name=None)",
    "description": "Update '*var' according to the centered RMSProp algorithm."
  },
  "1313": {
    "name": "ResourceApplyFtrl",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyFtrl",
    "signature": "(var, accum, linear, grad, lr, l1, l2, lr_power, use_locking=False, multiply_linear_by_lr=False, name=None)",
    "description": "Update '*var' according to the Ftrl-proximal scheme."
  },
  "1314": {
    "name": "ResourceApplyFtrlV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyFtrlV2",
    "signature": "(var, accum, linear, grad, lr, l1, l2, l2_shrinkage, lr_power, use_locking=False, multiply_linear_by_lr=False, name=None)",
    "description": "Update '*var' according to the Ftrl-proximal scheme."
  },
  "1315": {
    "name": "ResourceApplyGradientDescent",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyGradientDescent",
    "signature": "(var, alpha, delta, use_locking=False, name=None)",
    "description": "Update '*var' by subtracting 'alpha' * 'delta' from it."
  },
  "1316": {
    "name": "ResourceApplyKerasMomentum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyKerasMomentum",
    "signature": "(var, accum, lr, grad, momentum, use_locking=False, use_nesterov=False, name=None)",
    "description": "Update '*var' according to the momentum scheme."
  },
  "1317": {
    "name": "ResourceApplyMomentum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyMomentum",
    "signature": "(var, accum, lr, grad, momentum, use_locking=False, use_nesterov=False, name=None)",
    "description": "Update '*var' according to the momentum scheme."
  },
  "1318": {
    "name": "ResourceApplyPowerSign",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyPowerSign",
    "signature": "(var, m, lr, logbase, sign_decay, beta, grad, use_locking=False, name=None)",
    "description": "Update '*var' according to the AddSign update."
  },
  "1319": {
    "name": "ResourceApplyProximalAdagrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyProximalAdagrad",
    "signature": "(var, accum, lr, l1, l2, grad, use_locking=False, name=None)",
    "description": "Update '*var' and '*accum' according to FOBOS with Adagrad learning rate."
  },
  "1320": {
    "name": "ResourceApplyProximalGradientDescent",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyProximalGradientDescent",
    "signature": "(var, alpha, l1, l2, delta, use_locking=False, name=None)",
    "description": "Update '*var' as FOBOS algorithm with fixed learning rate."
  },
  "1321": {
    "name": "ResourceApplyRMSProp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceApplyRMSProp",
    "signature": "(var, ms, mom, lr, rho, momentum, epsilon, grad, use_locking=False, name=None)",
    "description": "Update '*var' according to the RMSProp algorithm."
  },
  "1322": {
    "name": "ResourceConditionalAccumulator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceConditionalAccumulator",
    "signature": "(dtype, shape, container='', shared_name='', reduction_type='MEAN', name=None)",
    "description": "A conditional accumulator for aggregating gradients."
  },
  "1323": {
    "name": "ResourceCountUpTo",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceCountUpTo",
    "signature": "(resource, limit, T, name=None)",
    "description": "Increments variable pointed to by 'resource' until it reaches 'limit'."
  },
  "1324": {
    "name": "ResourceGather",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceGather",
    "signature": "(resource, indices, dtype, batch_dims=0, validate_indices=True, name=None)",
    "description": "Gather slices from the variable pointed to by `resource` according to `indices`."
  },
  "1325": {
    "name": "ResourceGatherNd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceGatherNd",
    "signature": "(resource, indices, dtype, name=None)",
    "description": "TODO: add doc."
  },
  "1326": {
    "name": "ResourceScatterAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceScatterAdd",
    "signature": "(resource, indices, updates, name=None)",
    "description": "Adds sparse updates to the variable referenced by `resource`."
  },
  "1327": {
    "name": "ResourceScatterDiv",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceScatterDiv",
    "signature": "(resource, indices, updates, name=None)",
    "description": "Divides sparse updates into the variable referenced by `resource`."
  },
  "1328": {
    "name": "ResourceScatterMax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceScatterMax",
    "signature": "(resource, indices, updates, name=None)",
    "description": "Reduces sparse updates into the variable referenced by `resource` using the `max` operation."
  },
  "1329": {
    "name": "ResourceScatterMin",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceScatterMin",
    "signature": "(resource, indices, updates, name=None)",
    "description": "Reduces sparse updates into the variable referenced by `resource` using the `min` operation."
  },
  "1330": {
    "name": "ResourceScatterMul",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceScatterMul",
    "signature": "(resource, indices, updates, name=None)",
    "description": "Multiplies sparse updates into the variable referenced by `resource`."
  },
  "1331": {
    "name": "ResourceScatterNdAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceScatterNdAdd",
    "signature": "(ref, indices, updates, use_locking=True, name=None)",
    "description": "Applies sparse addition to individual values or slices in a Variable."
  },
  "1332": {
    "name": "ResourceScatterNdMax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceScatterNdMax",
    "signature": "(ref, indices, updates, use_locking=True, name=None)",
    "description": "TODO: add doc."
  },
  "1333": {
    "name": "ResourceScatterNdMin",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceScatterNdMin",
    "signature": "(ref, indices, updates, use_locking=True, name=None)",
    "description": "TODO: add doc."
  },
  "1334": {
    "name": "ResourceScatterNdSub",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceScatterNdSub",
    "signature": "(ref, indices, updates, use_locking=True, name=None)",
    "description": "Applies sparse subtraction to individual values or slices in a Variable."
  },
  "1335": {
    "name": "ResourceScatterNdUpdate",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceScatterNdUpdate",
    "signature": "(ref, indices, updates, use_locking=True, name=None)",
    "description": "Applies sparse `updates` to individual values or slices within a given"
  },
  "1336": {
    "name": "ResourceScatterSub",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceScatterSub",
    "signature": "(resource, indices, updates, name=None)",
    "description": "Subtracts sparse updates from the variable referenced by `resource`."
  },
  "1337": {
    "name": "ResourceScatterUpdate",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceScatterUpdate",
    "signature": "(resource, indices, updates, name=None)",
    "description": "Assigns sparse updates to the variable referenced by `resource`."
  },
  "1338": {
    "name": "ResourceSparseApplyAdadelta",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceSparseApplyAdadelta",
    "signature": "(var, accum, accum_update, lr, rho, epsilon, grad, indices, use_locking=False, name=None)",
    "description": "var: Should be from a Variable()."
  },
  "1339": {
    "name": "ResourceSparseApplyAdagrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceSparseApplyAdagrad",
    "signature": "(var, accum, lr, grad, indices, use_locking=False, update_slots=True, name=None)",
    "description": "Update relevant entries in '*var' and '*accum' according to the adagrad scheme."
  },
  "1340": {
    "name": "ResourceSparseApplyAdagradDA",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceSparseApplyAdagradDA",
    "signature": "(var, gradient_accumulator, gradient_squared_accumulator, grad, indices, lr, l1, l2, global_step, use_locking=False, name=None)",
    "description": "Update entries in '*var' and '*accum' according to the proximal adagrad scheme."
  },
  "1341": {
    "name": "ResourceSparseApplyAdagradV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceSparseApplyAdagradV2",
    "signature": "(var, accum, lr, epsilon, grad, indices, use_locking=False, update_slots=True, name=None)",
    "description": "Update relevant entries in '*var' and '*accum' according to the adagrad scheme."
  },
  "1342": {
    "name": "ResourceSparseApplyCenteredRMSProp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceSparseApplyCenteredRMSProp",
    "signature": "(var, mg, ms, mom, lr, rho, momentum, epsilon, grad, indices, use_locking=False, name=None)",
    "description": "Update '*var' according to the centered RMSProp algorithm."
  },
  "1343": {
    "name": "ResourceSparseApplyFtrl",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceSparseApplyFtrl",
    "signature": "(var, accum, linear, grad, indices, lr, l1, l2, lr_power, use_locking=False, multiply_linear_by_lr=False, name=None)",
    "description": "Update relevant entries in '*var' according to the Ftrl-proximal scheme."
  },
  "1344": {
    "name": "ResourceSparseApplyFtrlV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceSparseApplyFtrlV2",
    "signature": "(var, accum, linear, grad, indices, lr, l1, l2, l2_shrinkage, lr_power, use_locking=False, multiply_linear_by_lr=False, name=None)",
    "description": "Update relevant entries in '*var' according to the Ftrl-proximal scheme."
  },
  "1345": {
    "name": "ResourceSparseApplyKerasMomentum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceSparseApplyKerasMomentum",
    "signature": "(var, accum, lr, grad, indices, momentum, use_locking=False, use_nesterov=False, name=None)",
    "description": "Update relevant entries in '*var' and '*accum' according to the momentum scheme."
  },
  "1346": {
    "name": "ResourceSparseApplyMomentum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceSparseApplyMomentum",
    "signature": "(var, accum, lr, grad, indices, momentum, use_locking=False, use_nesterov=False, name=None)",
    "description": "Update relevant entries in '*var' and '*accum' according to the momentum scheme."
  },
  "1347": {
    "name": "ResourceSparseApplyProximalAdagrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceSparseApplyProximalAdagrad",
    "signature": "(var, accum, lr, l1, l2, grad, indices, use_locking=False, name=None)",
    "description": "Sparse update entries in '*var' and '*accum' according to FOBOS algorithm."
  },
  "1348": {
    "name": "ResourceSparseApplyProximalGradientDescent",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceSparseApplyProximalGradientDescent",
    "signature": "(var, alpha, l1, l2, grad, indices, use_locking=False, name=None)",
    "description": "Sparse update '*var' as FOBOS algorithm with fixed learning rate."
  },
  "1349": {
    "name": "ResourceSparseApplyRMSProp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceSparseApplyRMSProp",
    "signature": "(var, ms, mom, lr, rho, momentum, epsilon, grad, indices, use_locking=False, name=None)",
    "description": "Update '*var' according to the RMSProp algorithm."
  },
  "1350": {
    "name": "ResourceStridedSliceAssign",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ResourceStridedSliceAssign",
    "signature": "(ref, begin, end, strides, value, begin_mask=0, end_mask=0, ellipsis_mask=0, new_axis_mask=0, shrink_axis_mask=0, name=None)",
    "description": "Assign `value` to the sliced l-value reference of `ref`."
  },
  "1351": {
    "name": "Restore",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Restore",
    "signature": "(file_pattern, tensor_name, dt, preferred_shard=-1, name=None)",
    "description": "Restores a tensor from checkpoint files."
  },
  "1352": {
    "name": "RestoreSlice",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RestoreSlice",
    "signature": "(file_pattern, tensor_name, shape_and_slice, dt, preferred_shard=-1, name=None)",
    "description": "Restores a tensor from checkpoint files."
  },
  "1353": {
    "name": "RetrieveTPUEmbeddingADAMParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RetrieveTPUEmbeddingADAMParameters",
    "signature": "(num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Retrieve ADAM embedding parameters."
  },
  "1354": {
    "name": "RetrieveTPUEmbeddingAdadeltaParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RetrieveTPUEmbeddingAdadeltaParameters",
    "signature": "(num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Retrieve Adadelta embedding parameters."
  },
  "1355": {
    "name": "RetrieveTPUEmbeddingAdagradMomentumParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RetrieveTPUEmbeddingAdagradMomentumParameters",
    "signature": "(num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Retrieve Adagrad Momentum embedding parameters."
  },
  "1356": {
    "name": "RetrieveTPUEmbeddingAdagradParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RetrieveTPUEmbeddingAdagradParameters",
    "signature": "(num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Retrieve Adagrad embedding parameters."
  },
  "1357": {
    "name": "RetrieveTPUEmbeddingCenteredRMSPropParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RetrieveTPUEmbeddingCenteredRMSPropParameters",
    "signature": "(num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Retrieve centered RMSProp embedding parameters."
  },
  "1358": {
    "name": "RetrieveTPUEmbeddingFTRLParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RetrieveTPUEmbeddingFTRLParameters",
    "signature": "(num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Retrieve FTRL embedding parameters."
  },
  "1359": {
    "name": "RetrieveTPUEmbeddingFrequencyEstimatorParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RetrieveTPUEmbeddingFrequencyEstimatorParameters",
    "signature": "(num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Retrieve frequency estimator embedding parameters."
  },
  "1360": {
    "name": "RetrieveTPUEmbeddingMDLAdagradLightParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RetrieveTPUEmbeddingMDLAdagradLightParameters",
    "signature": "(num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Retrieve MDL Adagrad Light embedding parameters."
  },
  "1361": {
    "name": "RetrieveTPUEmbeddingMomentumParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RetrieveTPUEmbeddingMomentumParameters",
    "signature": "(num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Retrieve Momentum embedding parameters."
  },
  "1362": {
    "name": "RetrieveTPUEmbeddingProximalAdagradParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RetrieveTPUEmbeddingProximalAdagradParameters",
    "signature": "(num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Retrieve proximal Adagrad embedding parameters."
  },
  "1363": {
    "name": "RetrieveTPUEmbeddingProximalYogiParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RetrieveTPUEmbeddingProximalYogiParameters",
    "signature": "(num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "TODO: add doc."
  },
  "1364": {
    "name": "RetrieveTPUEmbeddingRMSPropParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RetrieveTPUEmbeddingRMSPropParameters",
    "signature": "(num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Retrieve RMSProp embedding parameters."
  },
  "1365": {
    "name": "RetrieveTPUEmbeddingStochasticGradientDescentParameters",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RetrieveTPUEmbeddingStochasticGradientDescentParameters",
    "signature": "(num_shards, shard_id, table_id=-1, table_name='', config='', name=None)",
    "description": "Retrieve SGD embedding parameters."
  },
  "1366": {
    "name": "Reverse",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Reverse",
    "signature": "(tensor, dims, name=None)",
    "description": "Reverses specific dimensions of a tensor."
  },
  "1367": {
    "name": "ReverseSequence",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReverseSequence",
    "signature": "(input, seq_lengths, seq_dim, batch_dim=0, name=None)",
    "description": "Reverses variable length slices."
  },
  "1368": {
    "name": "ReverseV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ReverseV2",
    "signature": "(tensor, axis, name=None)",
    "description": "Reverses specific dimensions of a tensor."
  },
  "1369": {
    "name": "RewriteDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RewriteDataset",
    "signature": "(input_dataset, rewrite_name, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "1370": {
    "name": "RightShift",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RightShift",
    "signature": "(x, y, name=None)",
    "description": "Elementwise computes the bitwise right-shift of `x` and `y`."
  },
  "1371": {
    "name": "Rint",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Rint",
    "signature": "(x, name=None)",
    "description": "Returns element-wise integer closest to x."
  },
  "1372": {
    "name": "RngReadAndSkip",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RngReadAndSkip",
    "signature": "(resource, alg, delta, name=None)",
    "description": "Advance the counter of a counter-based RNG."
  },
  "1373": {
    "name": "RngSkip",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RngSkip",
    "signature": "(resource, algorithm, delta, name=None)",
    "description": "Advance the counter of a counter-based RNG."
  },
  "1374": {
    "name": "Roll",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Roll",
    "signature": "(input, shift, axis, name=None)",
    "description": "Rolls the elements of a tensor along an axis."
  },
  "1375": {
    "name": "Round",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Round",
    "signature": "(x, name=None)",
    "description": "Rounds the values of a tensor to the nearest integer, element-wise."
  },
  "1376": {
    "name": "Rsqrt",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Rsqrt",
    "signature": "(x, name=None)",
    "description": "Computes reciprocal of square root of x element-wise."
  },
  "1377": {
    "name": "RsqrtGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.RsqrtGrad",
    "signature": "(y, dy, name=None)",
    "description": "Computes the gradient for the rsqrt of `x` wrt its input."
  },
  "1378": {
    "name": "SampleDistortedBoundingBox",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SampleDistortedBoundingBox",
    "signature": "(image_size, bounding_boxes, seed=0, seed2=0, min_object_covered=0.1, aspect_ratio_range=[0.75, 1.33], area_range=[0.05, 1], max_attempts=100, use_image_if_no_bounding_boxes=False, name=None)",
    "description": "Generate a single randomly distorted bounding box for an image."
  },
  "1379": {
    "name": "SampleDistortedBoundingBoxV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SampleDistortedBoundingBoxV2",
    "signature": "(image_size, bounding_boxes, min_object_covered, seed=0, seed2=0, aspect_ratio_range=[0.75, 1.33], area_range=[0.05, 1], max_attempts=100, use_image_if_no_bounding_boxes=False, name=None)",
    "description": "Generate a single randomly distorted bounding box for an image."
  },
  "1380": {
    "name": "SamplingDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SamplingDataset",
    "signature": "(input_dataset, rate, seed, seed2, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that takes a Bernoulli sample of the contents of another dataset."
  },
  "1381": {
    "name": "Save",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Save",
    "signature": "(filename, tensor_names, data, name=None)",
    "description": "Saves the input tensors to disk."
  },
  "1382": {
    "name": "SaveDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SaveDataset",
    "signature": "(input_dataset, path, shard_func_other_args, shard_func, compression='', use_shard_func=True, name=None)",
    "description": "TODO: add doc."
  },
  "1383": {
    "name": "SaveDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SaveDatasetV2",
    "signature": "(input_dataset, path, shard_func_other_args, shard_func, output_types, output_shapes, compression='', use_shard_func=True, name=None)",
    "description": "TODO: add doc."
  },
  "1384": {
    "name": "SaveSlices",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SaveSlices",
    "signature": "(filename, tensor_names, shapes_and_slices, data, name=None)",
    "description": "Saves input tensors slices to disk."
  },
  "1385": {
    "name": "SaveV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SaveV2",
    "signature": "(prefix, tensor_names, shape_and_slices, tensors, name=None)",
    "description": "Saves tensors in V2 checkpoint format."
  },
  "1386": {
    "name": "ScalarSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScalarSummary",
    "signature": "(tags, values, name=None)",
    "description": "Outputs a `Summary` protocol buffer with scalar values."
  },
  "1387": {
    "name": "ScaleAndTranslate",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScaleAndTranslate",
    "signature": "(images, size, scale, translation, kernel_type='lanczos3', antialias=True, name=None)",
    "description": "TODO: add doc."
  },
  "1388": {
    "name": "ScaleAndTranslateGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScaleAndTranslateGrad",
    "signature": "(grads, original_image, scale, translation, kernel_type='lanczos3', antialias=True, name=None)",
    "description": "TODO: add doc."
  },
  "1389": {
    "name": "ScanDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScanDataset",
    "signature": "(input_dataset, initial_state, other_arguments, f, output_types, output_shapes, preserve_cardinality=False, use_default_device=True, metadata='', name=None)",
    "description": "Creates a dataset successively reduces `f` over the elements of `input_dataset`."
  },
  "1390": {
    "name": "ScatterAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScatterAdd",
    "signature": "(ref, indices, updates, use_locking=False, name=None)",
    "description": "Adds sparse updates to a variable reference."
  },
  "1391": {
    "name": "ScatterDiv",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScatterDiv",
    "signature": "(ref, indices, updates, use_locking=False, name=None)",
    "description": "Divides a variable reference by sparse updates."
  },
  "1392": {
    "name": "ScatterMax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScatterMax",
    "signature": "(ref, indices, updates, use_locking=False, name=None)",
    "description": "Reduces sparse updates into a variable reference using the `max` operation."
  },
  "1393": {
    "name": "ScatterMin",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScatterMin",
    "signature": "(ref, indices, updates, use_locking=False, name=None)",
    "description": "Reduces sparse updates into a variable reference using the `min` operation."
  },
  "1394": {
    "name": "ScatterMul",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScatterMul",
    "signature": "(ref, indices, updates, use_locking=False, name=None)",
    "description": "Multiplies sparse updates into a variable reference."
  },
  "1395": {
    "name": "ScatterNd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScatterNd",
    "signature": "(indices, updates, shape, name=None)",
    "description": "Scatters `updates` into a tensor of shape `shape` according to `indices`."
  },
  "1396": {
    "name": "ScatterNdAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScatterNdAdd",
    "signature": "(ref, indices, updates, use_locking=False, name=None)",
    "description": "Applies sparse addition to individual values or slices in a Variable."
  },
  "1397": {
    "name": "ScatterNdMax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScatterNdMax",
    "signature": "(ref, indices, updates, use_locking=False, name=None)",
    "description": "Computes element-wise maximum."
  },
  "1398": {
    "name": "ScatterNdMin",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScatterNdMin",
    "signature": "(ref, indices, updates, use_locking=False, name=None)",
    "description": "Computes element-wise minimum."
  },
  "1399": {
    "name": "ScatterNdNonAliasingAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScatterNdNonAliasingAdd",
    "signature": "(input, indices, updates, name=None)",
    "description": "Applies sparse addition to `input` using individual values or slices"
  },
  "1400": {
    "name": "ScatterNdSub",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScatterNdSub",
    "signature": "(ref, indices, updates, use_locking=False, name=None)",
    "description": "Applies sparse subtraction to individual values or slices in a Variable."
  },
  "1401": {
    "name": "ScatterNdUpdate",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScatterNdUpdate",
    "signature": "(ref, indices, updates, use_locking=True, name=None)",
    "description": "Applies sparse `updates` to individual values or slices within a given"
  },
  "1402": {
    "name": "ScatterSub",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScatterSub",
    "signature": "(ref, indices, updates, use_locking=False, name=None)",
    "description": "Subtracts sparse updates to a variable reference."
  },
  "1403": {
    "name": "ScatterUpdate",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ScatterUpdate",
    "signature": "(ref, indices, updates, use_locking=True, name=None)",
    "description": "Applies sparse updates to a variable reference."
  },
  "1404": {
    "name": "SdcaFprint",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SdcaFprint",
    "signature": "(input, name=None)",
    "description": "Computes fingerprints of the input strings."
  },
  "1405": {
    "name": "SdcaOptimizer",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SdcaOptimizer",
    "signature": "(sparse_example_indices, sparse_feature_indices, sparse_feature_values, dense_features, example_weights, example_labels, sparse_indices, sparse_weights, dense_weights, example_state_data, loss_type, l1, l2, num_loss_partitions, num_inner_iterations, adaptative=True, name=None)",
    "description": "Distributed version of Stochastic Dual Coordinate Ascent (SDCA) optimizer for"
  },
  "1406": {
    "name": "SdcaOptimizerV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SdcaOptimizerV2",
    "signature": "(sparse_example_indices, sparse_feature_indices, sparse_feature_values, dense_features, example_weights, example_labels, sparse_indices, sparse_weights, dense_weights, example_state_data, loss_type, l1, l2, num_loss_partitions, num_inner_iterations, adaptive=True, name=None)",
    "description": "Distributed version of Stochastic Dual Coordinate Ascent (SDCA) optimizer for"
  },
  "1407": {
    "name": "SdcaShrinkL1",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SdcaShrinkL1",
    "signature": "(weights, l1, l2, name=None)",
    "description": "Applies L1 regularization shrink step on the parameters."
  },
  "1408": {
    "name": "SegmentMax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SegmentMax",
    "signature": "(data, segment_ids, name=None)",
    "description": "Computes the maximum along segments of a tensor."
  },
  "1409": {
    "name": "SegmentMean",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SegmentMean",
    "signature": "(data, segment_ids, name=None)",
    "description": "Computes the mean along segments of a tensor."
  },
  "1410": {
    "name": "SegmentMin",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SegmentMin",
    "signature": "(data, segment_ids, name=None)",
    "description": "Computes the minimum along segments of a tensor."
  },
  "1411": {
    "name": "SegmentProd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SegmentProd",
    "signature": "(data, segment_ids, name=None)",
    "description": "Computes the product along segments of a tensor."
  },
  "1412": {
    "name": "SegmentSum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SegmentSum",
    "signature": "(data, segment_ids, name=None)",
    "description": "Computes the sum along segments of a tensor."
  },
  "1413": {
    "name": "Select",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Select",
    "signature": "(condition, x, y, name=None)",
    "description": "Selects elements from `x` or `y`, depending on `condition`."
  },
  "1414": {
    "name": "SelectV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SelectV2",
    "signature": "(condition, t, e, name=None)",
    "description": "TODO: add doc."
  },
  "1415": {
    "name": "SelfAdjointEig",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SelfAdjointEig",
    "signature": "(input, name=None)",
    "description": "Computes the Eigen Decomposition of a batch of square self-adjoint matrices."
  },
  "1416": {
    "name": "SelfAdjointEigV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SelfAdjointEigV2",
    "signature": "(input, compute_v=True, name=None)",
    "description": "Computes the eigen decomposition of one or more square self-adjoint matrices."
  },
  "1417": {
    "name": "Selu",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Selu",
    "signature": "(features, name=None)",
    "description": "Computes scaled exponential linear: `scale * alpha * (exp(features) - 1)`"
  },
  "1418": {
    "name": "SeluGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SeluGrad",
    "signature": "(gradients, outputs, name=None)",
    "description": "Computes gradients for the scaled exponential linear (Selu) operation."
  },
  "1419": {
    "name": "Send",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Send",
    "signature": "(tensor, tensor_name, send_device, send_device_incarnation, recv_device, client_terminated=False, name=None)",
    "description": "Sends the named tensor from send_device to recv_device."
  },
  "1420": {
    "name": "SendTPUEmbeddingGradients",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SendTPUEmbeddingGradients",
    "signature": "(inputs, learning_rates, config, name=None)",
    "description": "Performs gradient updates of embedding tables."
  },
  "1421": {
    "name": "SerializeIterator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SerializeIterator",
    "signature": "(resource_handle, external_state_policy=0, name=None)",
    "description": "Converts the given `resource_handle` representing an iterator to a variant tensor."
  },
  "1422": {
    "name": "SerializeManySparse",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SerializeManySparse",
    "signature": "(sparse_indices, sparse_values, sparse_shape, out_type=tf.string, name=None)",
    "description": "Serialize an `N`-minibatch `SparseTensor` into an `[N, 3]` `Tensor` object."
  },
  "1423": {
    "name": "SerializeSparse",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SerializeSparse",
    "signature": "(sparse_indices, sparse_values, sparse_shape, out_type=tf.string, name=None)",
    "description": "Serialize a `SparseTensor` into a `[3]` `Tensor` object."
  },
  "1424": {
    "name": "SerializeTensor",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SerializeTensor",
    "signature": "(tensor, name=None)",
    "description": "Transforms a Tensor into a serialized TensorProto proto."
  },
  "1425": {
    "name": "SetSize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SetSize",
    "signature": "(set_indices, set_values, set_shape, validate_indices=True, name=None)",
    "description": "Number of unique elements along last dimension of input `set`."
  },
  "1426": {
    "name": "SetStatsAggregatorDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SetStatsAggregatorDataset",
    "signature": "(input_dataset, stats_aggregator, tag, counter_prefix, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "1427": {
    "name": "Shape",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Shape",
    "signature": "(input, out_type=tf.int32, name=None)",
    "description": "Returns the shape of a tensor."
  },
  "1428": {
    "name": "ShapeN",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ShapeN",
    "signature": "(input, out_type=tf.int32, name=None)",
    "description": "Returns shape of tensors."
  },
  "1429": {
    "name": "ShardDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ShardDataset",
    "signature": "(input_dataset, num_shards, index, output_types, output_shapes, require_non_empty=False, metadata='', name=None)",
    "description": "Creates a `Dataset` that includes only 1/`num_shards` of this dataset."
  },
  "1430": {
    "name": "ShardedFilename",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ShardedFilename",
    "signature": "(basename, shard, num_shards, name=None)",
    "description": "Generate a sharded filename. The filename is printf formatted as"
  },
  "1431": {
    "name": "ShardedFilespec",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ShardedFilespec",
    "signature": "(basename, num_shards, name=None)",
    "description": "Generate a glob pattern matching all sharded file names."
  },
  "1432": {
    "name": "ShuffleAndRepeatDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ShuffleAndRepeatDataset",
    "signature": "(input_dataset, buffer_size, seed, seed2, count, output_types, output_shapes, reshuffle_each_iteration=True, metadata='', name=None)",
    "description": "Creates a dataset that shuffles and repeats elements from `input_dataset`"
  },
  "1433": {
    "name": "ShuffleAndRepeatDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ShuffleAndRepeatDatasetV2",
    "signature": "(input_dataset, buffer_size, seed, seed2, count, seed_generator, output_types, output_shapes, reshuffle_each_iteration=True, metadata='', name=None)",
    "description": "TODO: add doc."
  },
  "1434": {
    "name": "ShuffleDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ShuffleDataset",
    "signature": "(input_dataset, buffer_size, seed, seed2, output_types, output_shapes, reshuffle_each_iteration=True, metadata='', name=None)",
    "description": "Creates a dataset that shuffles elements from `input_dataset` pseudorandomly."
  },
  "1435": {
    "name": "ShuffleDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ShuffleDatasetV2",
    "signature": "(input_dataset, buffer_size, seed_generator, output_types, output_shapes, metadata='', name=None)",
    "description": "TODO: add doc."
  },
  "1436": {
    "name": "ShuffleDatasetV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ShuffleDatasetV3",
    "signature": "(input_dataset, buffer_size, seed, seed2, seed_generator, output_types, output_shapes, reshuffle_each_iteration=True, metadata='', name=None)",
    "description": "TODO: add doc."
  },
  "1437": {
    "name": "ShutdownDistributedTPU",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ShutdownDistributedTPU",
    "signature": "(name=None)",
    "description": "Shuts down a running distributed TPU system."
  },
  "1438": {
    "name": "Sigmoid",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Sigmoid",
    "signature": "(x, name=None)",
    "description": "Computes sigmoid of `x` element-wise."
  },
  "1439": {
    "name": "SigmoidGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SigmoidGrad",
    "signature": "(y, dy, name=None)",
    "description": "Computes the gradient of the sigmoid of `x` wrt its input."
  },
  "1440": {
    "name": "Sign",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Sign",
    "signature": "(x, name=None)",
    "description": "Returns an element-wise indication of the sign of a number."
  },
  "1441": {
    "name": "Sin",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Sin",
    "signature": "(x, name=None)",
    "description": "Computes sine of x element-wise."
  },
  "1442": {
    "name": "Sinh",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Sinh",
    "signature": "(x, name=None)",
    "description": "Computes hyperbolic sine of x element-wise."
  },
  "1443": {
    "name": "Size",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Size",
    "signature": "(input, out_type=tf.int32, name=None)",
    "description": "Returns the size of a tensor."
  },
  "1444": {
    "name": "SkipDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SkipDataset",
    "signature": "(input_dataset, count, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that skips `count` elements from the `input_dataset`."
  },
  "1445": {
    "name": "SleepDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SleepDataset",
    "signature": "(input_dataset, sleep_microseconds, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "1446": {
    "name": "Slice",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Slice",
    "signature": "(input, begin, size, name=None)",
    "description": "Return a slice from 'input'."
  },
  "1447": {
    "name": "SlidingWindowDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SlidingWindowDataset",
    "signature": "(input_dataset, window_size, window_shift, window_stride, output_types, output_shapes, drop_remainder=True, name=None)",
    "description": "Creates a dataset that passes a sliding window over `input_dataset`."
  },
  "1448": {
    "name": "Snapshot",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Snapshot",
    "signature": "(input, name=None)",
    "description": "Returns a copy of the input tensor."
  },
  "1449": {
    "name": "SnapshotDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SnapshotDataset",
    "signature": "(input_dataset, path, output_types, output_shapes, compression='', reader_path_prefix='', writer_path_prefix='', shard_size_bytes=10737418240, pending_snapshot_expiry_seconds=86400, num_reader_threads=1, reader_buffer_size=1, num_writer_threads=1, writer_buffer_size=1, shuffle_on_read=False, seed=0, seed2=0, mode='auto', snapshot_name='', name=None)",
    "description": "Creates a dataset that will write to / read from a snapshot."
  },
  "1450": {
    "name": "SnapshotDatasetReader",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SnapshotDatasetReader",
    "signature": "(shard_dir, start_index, output_types, output_shapes, version, compression='', name=None)",
    "description": "TODO: add doc."
  },
  "1451": {
    "name": "SnapshotDatasetV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SnapshotDatasetV2",
    "signature": "(input_dataset, path, reader_func_other_args, shard_func_other_args, output_types, output_shapes, reader_func, shard_func, compression='', reader_prefix='', writer_prefix='', hash_valid=False, hash=0, metadata='', name=None)",
    "description": "Creates a dataset that will write to / read from a snapshot."
  },
  "1452": {
    "name": "SnapshotNestedDatasetReader",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SnapshotNestedDatasetReader",
    "signature": "(inputs, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "1453": {
    "name": "SobolSample",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SobolSample",
    "signature": "(dim, num_results, skip, dtype=tf.float32, name=None)",
    "description": "Generates points from the Sobol sequence."
  },
  "1454": {
    "name": "Softmax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Softmax",
    "signature": "(logits, name=None)",
    "description": "Computes softmax activations."
  },
  "1455": {
    "name": "SoftmaxCrossEntropyWithLogits",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SoftmaxCrossEntropyWithLogits",
    "signature": "(features, labels, name=None)",
    "description": "Computes softmax cross entropy cost and gradients to backpropagate."
  },
  "1456": {
    "name": "Softplus",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Softplus",
    "signature": "(features, name=None)",
    "description": "TODO: add doc."
  },
  "1457": {
    "name": "SoftplusGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SoftplusGrad",
    "signature": "(gradients, features, name=None)",
    "description": "Computes softplus gradients for a softplus operation."
  },
  "1458": {
    "name": "Softsign",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Softsign",
    "signature": "(features, name=None)",
    "description": "Computes softsign: `features / (abs(features) + 1)`."
  },
  "1459": {
    "name": "SoftsignGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SoftsignGrad",
    "signature": "(gradients, features, name=None)",
    "description": "Computes softsign gradients for a softsign operation."
  },
  "1460": {
    "name": "SpaceToBatch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SpaceToBatch",
    "signature": "(input, paddings, block_size, name=None)",
    "description": "SpaceToBatch for 4-D tensors of type T."
  },
  "1461": {
    "name": "SpaceToBatchND",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SpaceToBatchND",
    "signature": "(input, block_shape, paddings, name=None)",
    "description": "SpaceToBatch for N-D tensors of type T."
  },
  "1462": {
    "name": "SpaceToDepth",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SpaceToDepth",
    "signature": "(input, block_size, data_format='NHWC', name=None)",
    "description": "SpaceToDepth for tensors of type T."
  },
  "1463": {
    "name": "SparseAccumulatorApplyGradient",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseAccumulatorApplyGradient",
    "signature": "(handle, local_step, gradient_indices, gradient_values, gradient_shape, has_known_shape, name=None)",
    "description": "Applies a sparse gradient to a given accumulator."
  },
  "1464": {
    "name": "SparseAccumulatorTakeGradient",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseAccumulatorTakeGradient",
    "signature": "(handle, num_required, dtype, name=None)",
    "description": "Extracts the average sparse gradient in a SparseConditionalAccumulator."
  },
  "1465": {
    "name": "SparseAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseAdd",
    "signature": "(a_indices, a_values, a_shape, b_indices, b_values, b_shape, thresh, name=None)",
    "description": "Adds two `SparseTensor` objects to produce another `SparseTensor`."
  },
  "1466": {
    "name": "SparseAddGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseAddGrad",
    "signature": "(backprop_val_grad, a_indices, b_indices, sum_indices, name=None)",
    "description": "The gradient operator for the SparseAdd op."
  },
  "1467": {
    "name": "SparseApplyAdadelta",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseApplyAdadelta",
    "signature": "(var, accum, accum_update, lr, rho, epsilon, grad, indices, use_locking=False, name=None)",
    "description": "var: Should be from a Variable()."
  },
  "1468": {
    "name": "SparseApplyAdagrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseApplyAdagrad",
    "signature": "(var, accum, lr, grad, indices, use_locking=False, update_slots=True, name=None)",
    "description": "Update relevant entries in '*var' and '*accum' according to the adagrad scheme."
  },
  "1469": {
    "name": "SparseApplyAdagradDA",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseApplyAdagradDA",
    "signature": "(var, gradient_accumulator, gradient_squared_accumulator, grad, indices, lr, l1, l2, global_step, use_locking=False, name=None)",
    "description": "Update entries in '*var' and '*accum' according to the proximal adagrad scheme."
  },
  "1470": {
    "name": "SparseApplyAdagradV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseApplyAdagradV2",
    "signature": "(var, accum, lr, epsilon, grad, indices, use_locking=False, update_slots=True, name=None)",
    "description": "Update relevant entries in '*var' and '*accum' according to the adagrad scheme."
  },
  "1471": {
    "name": "SparseApplyCenteredRMSProp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseApplyCenteredRMSProp",
    "signature": "(var, mg, ms, mom, lr, rho, momentum, epsilon, grad, indices, use_locking=False, name=None)",
    "description": "Update '*var' according to the centered RMSProp algorithm."
  },
  "1472": {
    "name": "SparseApplyFtrl",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseApplyFtrl",
    "signature": "(var, accum, linear, grad, indices, lr, l1, l2, lr_power, use_locking=False, multiply_linear_by_lr=False, name=None)",
    "description": "Update relevant entries in '*var' according to the Ftrl-proximal scheme."
  },
  "1473": {
    "name": "SparseApplyFtrlV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseApplyFtrlV2",
    "signature": "(var, accum, linear, grad, indices, lr, l1, l2, l2_shrinkage, lr_power, use_locking=False, multiply_linear_by_lr=False, name=None)",
    "description": "Update relevant entries in '*var' according to the Ftrl-proximal scheme."
  },
  "1474": {
    "name": "SparseApplyMomentum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseApplyMomentum",
    "signature": "(var, accum, lr, grad, indices, momentum, use_locking=False, use_nesterov=False, name=None)",
    "description": "Update relevant entries in '*var' and '*accum' according to the momentum scheme."
  },
  "1475": {
    "name": "SparseApplyProximalAdagrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseApplyProximalAdagrad",
    "signature": "(var, accum, lr, l1, l2, grad, indices, use_locking=False, name=None)",
    "description": "Sparse update entries in '*var' and '*accum' according to FOBOS algorithm."
  },
  "1476": {
    "name": "SparseApplyProximalGradientDescent",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseApplyProximalGradientDescent",
    "signature": "(var, alpha, l1, l2, grad, indices, use_locking=False, name=None)",
    "description": "Sparse update '*var' as FOBOS algorithm with fixed learning rate."
  },
  "1477": {
    "name": "SparseApplyRMSProp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseApplyRMSProp",
    "signature": "(var, ms, mom, lr, rho, momentum, epsilon, grad, indices, use_locking=False, name=None)",
    "description": "Update '*var' according to the RMSProp algorithm."
  },
  "1478": {
    "name": "SparseBincount",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseBincount",
    "signature": "(indices, values, dense_shape, size, weights, binary_output=False, name=None)",
    "description": "Counts the number of occurrences of each value in an integer array."
  },
  "1479": {
    "name": "SparseConcat",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseConcat",
    "signature": "(indices, values, shapes, concat_dim, name=None)",
    "description": "Concatenates a list of `SparseTensor` along the specified dimension."
  },
  "1480": {
    "name": "SparseConditionalAccumulator",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseConditionalAccumulator",
    "signature": "(dtype, shape, container='', shared_name='', reduction_type='MEAN', name=None)",
    "description": "A conditional accumulator for aggregating sparse gradients."
  },
  "1481": {
    "name": "SparseCountSparseOutput",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseCountSparseOutput",
    "signature": "(indices, values, dense_shape, weights, binary_output, minlength=-1, maxlength=-1, name=None)",
    "description": "Performs sparse-output bin counting for a sparse tensor input."
  },
  "1482": {
    "name": "SparseCross",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseCross",
    "signature": "(indices, values, shapes, dense_inputs, hashed_output, num_buckets, hash_key, out_type, internal_type, name=None)",
    "description": "Generates sparse cross from a list of sparse and dense tensors."
  },
  "1483": {
    "name": "SparseCrossHashed",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseCrossHashed",
    "signature": "(indices, values, shapes, dense_inputs, num_buckets, strong_hash, salt, name=None)",
    "description": "Generates sparse cross from a list of sparse and dense tensors."
  },
  "1484": {
    "name": "SparseCrossV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseCrossV2",
    "signature": "(indices, values, shapes, dense_inputs, sep, name=None)",
    "description": "Generates sparse cross from a list of sparse and dense tensors."
  },
  "1485": {
    "name": "SparseDenseCwiseAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseDenseCwiseAdd",
    "signature": "(sp_indices, sp_values, sp_shape, dense, name=None)",
    "description": "Adds up a SparseTensor and a dense Tensor, using these special rules:"
  },
  "1486": {
    "name": "SparseDenseCwiseDiv",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseDenseCwiseDiv",
    "signature": "(sp_indices, sp_values, sp_shape, dense, name=None)",
    "description": "Component-wise divides a SparseTensor by a dense Tensor."
  },
  "1487": {
    "name": "SparseDenseCwiseMul",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseDenseCwiseMul",
    "signature": "(sp_indices, sp_values, sp_shape, dense, name=None)",
    "description": "Component-wise multiplies a SparseTensor by a dense Tensor."
  },
  "1488": {
    "name": "SparseFillEmptyRows",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseFillEmptyRows",
    "signature": "(indices, values, dense_shape, default_value, name=None)",
    "description": "Fills empty rows in the input 2-D `SparseTensor` with a default value."
  },
  "1489": {
    "name": "SparseFillEmptyRowsGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseFillEmptyRowsGrad",
    "signature": "(reverse_index_map, grad_values, name=None)",
    "description": "The gradient of SparseFillEmptyRows."
  },
  "1490": {
    "name": "SparseMatMul",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseMatMul",
    "signature": "(a, b, transpose_a=False, transpose_b=False, a_is_sparse=False, b_is_sparse=False, name=None)",
    "description": "Multiply matrix \"a\" by matrix \"b\"."
  },
  "1491": {
    "name": "SparseMatrixAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseMatrixAdd",
    "signature": "(a, b, alpha, beta, name=None)",
    "description": "Sparse addition of two CSR matrices, C = alpha * A + beta * B."
  },
  "1492": {
    "name": "SparseMatrixMatMul",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseMatrixMatMul",
    "signature": "(a, b, transpose_a=False, transpose_b=False, adjoint_a=False, adjoint_b=False, transpose_output=False, conjugate_output=False, name=None)",
    "description": "Matrix-multiplies a sparse matrix with a dense matrix."
  },
  "1493": {
    "name": "SparseMatrixMul",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseMatrixMul",
    "signature": "(a, b, name=None)",
    "description": "Element-wise multiplication of a sparse matrix with a dense tensor."
  },
  "1494": {
    "name": "SparseMatrixNNZ",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseMatrixNNZ",
    "signature": "(sparse_matrix, name=None)",
    "description": "Returns the number of nonzeroes of `sparse_matrix`."
  },
  "1495": {
    "name": "SparseMatrixOrderingAMD",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseMatrixOrderingAMD",
    "signature": "(input, name=None)",
    "description": "Computes the Approximate Minimum Degree (AMD) ordering of `input`."
  },
  "1496": {
    "name": "SparseMatrixSoftmax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseMatrixSoftmax",
    "signature": "(logits, type, name=None)",
    "description": "Calculates the softmax of a CSRSparseMatrix."
  },
  "1497": {
    "name": "SparseMatrixSoftmaxGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseMatrixSoftmaxGrad",
    "signature": "(softmax, grad_softmax, type, name=None)",
    "description": "Calculates the gradient of the SparseMatrixSoftmax op."
  },
  "1498": {
    "name": "SparseMatrixSparseCholesky",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseMatrixSparseCholesky",
    "signature": "(input, permutation, type, name=None)",
    "description": "Computes the sparse Cholesky decomposition of `input`."
  },
  "1499": {
    "name": "SparseMatrixSparseMatMul",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseMatrixSparseMatMul",
    "signature": "(a, b, type, transpose_a=False, transpose_b=False, adjoint_a=False, adjoint_b=False, name=None)",
    "description": "Sparse-matrix-multiplies two CSR matrices `a` and `b`."
  },
  "1500": {
    "name": "SparseMatrixTranspose",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseMatrixTranspose",
    "signature": "(input, type, conjugate=False, name=None)",
    "description": "Transposes the inner (matrix) dimensions of a CSRSparseMatrix."
  },
  "1501": {
    "name": "SparseMatrixZeros",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseMatrixZeros",
    "signature": "(dense_shape, type, name=None)",
    "description": "Creates an all-zeros CSRSparseMatrix with shape `dense_shape`."
  },
  "1502": {
    "name": "SparseReduceMax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseReduceMax",
    "signature": "(input_indices, input_values, input_shape, reduction_axes, keep_dims=False, name=None)",
    "description": "Computes the max of elements across dimensions of a SparseTensor."
  },
  "1503": {
    "name": "SparseReduceMaxSparse",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseReduceMaxSparse",
    "signature": "(input_indices, input_values, input_shape, reduction_axes, keep_dims=False, name=None)",
    "description": "Computes the max of elements across dimensions of a SparseTensor."
  },
  "1504": {
    "name": "SparseReduceSum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseReduceSum",
    "signature": "(input_indices, input_values, input_shape, reduction_axes, keep_dims=False, name=None)",
    "description": "Computes the sum of elements across dimensions of a SparseTensor."
  },
  "1505": {
    "name": "SparseReduceSumSparse",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseReduceSumSparse",
    "signature": "(input_indices, input_values, input_shape, reduction_axes, keep_dims=False, name=None)",
    "description": "Computes the sum of elements across dimensions of a SparseTensor."
  },
  "1506": {
    "name": "SparseReorder",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseReorder",
    "signature": "(input_indices, input_values, input_shape, name=None)",
    "description": "Reorders a SparseTensor into the canonical, row-major ordering."
  },
  "1507": {
    "name": "SparseReshape",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseReshape",
    "signature": "(input_indices, input_shape, new_shape, name=None)",
    "description": "Reshapes a SparseTensor to represent values in a new dense shape."
  },
  "1508": {
    "name": "SparseSegmentMean",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSegmentMean",
    "signature": "(data, indices, segment_ids, name=None)",
    "description": "Computes the mean along sparse segments of a tensor."
  },
  "1509": {
    "name": "SparseSegmentMeanGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSegmentMeanGrad",
    "signature": "(grad, indices, segment_ids, output_dim0, name=None)",
    "description": "Computes gradients for SparseSegmentMean."
  },
  "1510": {
    "name": "SparseSegmentMeanWithNumSegments",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSegmentMeanWithNumSegments",
    "signature": "(data, indices, segment_ids, num_segments, name=None)",
    "description": "Computes the mean along sparse segments of a tensor."
  },
  "1511": {
    "name": "SparseSegmentSqrtN",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSegmentSqrtN",
    "signature": "(data, indices, segment_ids, name=None)",
    "description": "Computes the sum along sparse segments of a tensor divided by the sqrt of N."
  },
  "1512": {
    "name": "SparseSegmentSqrtNGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSegmentSqrtNGrad",
    "signature": "(grad, indices, segment_ids, output_dim0, name=None)",
    "description": "Computes gradients for SparseSegmentSqrtN."
  },
  "1513": {
    "name": "SparseSegmentSqrtNWithNumSegments",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSegmentSqrtNWithNumSegments",
    "signature": "(data, indices, segment_ids, num_segments, name=None)",
    "description": "Computes the sum along sparse segments of a tensor divided by the sqrt of N."
  },
  "1514": {
    "name": "SparseSegmentSum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSegmentSum",
    "signature": "(data, indices, segment_ids, name=None)",
    "description": "Computes the sum along sparse segments of a tensor."
  },
  "1515": {
    "name": "SparseSegmentSumGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSegmentSumGrad",
    "signature": "(grad, indices, segment_ids, output_dim0, name=None)",
    "description": "Computes gradients for SparseSegmentSum."
  },
  "1516": {
    "name": "SparseSegmentSumWithNumSegments",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSegmentSumWithNumSegments",
    "signature": "(data, indices, segment_ids, num_segments, name=None)",
    "description": "Computes the sum along sparse segments of a tensor."
  },
  "1517": {
    "name": "SparseSlice",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSlice",
    "signature": "(indices, values, shape, start, size, name=None)",
    "description": "Slice a `SparseTensor` based on the `start` and `size`."
  },
  "1518": {
    "name": "SparseSliceGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSliceGrad",
    "signature": "(backprop_val_grad, input_indices, input_start, output_indices, name=None)",
    "description": "The gradient operator for the SparseSlice op."
  },
  "1519": {
    "name": "SparseSoftmax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSoftmax",
    "signature": "(sp_indices, sp_values, sp_shape, name=None)",
    "description": "Applies softmax to a batched N-D `SparseTensor`."
  },
  "1520": {
    "name": "SparseSoftmaxCrossEntropyWithLogits",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSoftmaxCrossEntropyWithLogits",
    "signature": "(features, labels, name=None)",
    "description": "Computes softmax cross entropy cost and gradients to backpropagate."
  },
  "1521": {
    "name": "SparseSparseMaximum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSparseMaximum",
    "signature": "(a_indices, a_values, a_shape, b_indices, b_values, b_shape, name=None)",
    "description": "Returns the element-wise max of two SparseTensors."
  },
  "1522": {
    "name": "SparseSparseMinimum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSparseMinimum",
    "signature": "(a_indices, a_values, a_shape, b_indices, b_values, b_shape, name=None)",
    "description": "Returns the element-wise min of two SparseTensors."
  },
  "1523": {
    "name": "SparseSplit",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseSplit",
    "signature": "(split_dim, indices, values, shape, num_split, name=None)",
    "description": "Split a `SparseTensor` into `num_split` tensors along one dimension."
  },
  "1524": {
    "name": "SparseTensorDenseAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseTensorDenseAdd",
    "signature": "(a_indices, a_values, a_shape, b, name=None)",
    "description": "Adds up a `SparseTensor` and a dense `Tensor`, producing a dense `Tensor`."
  },
  "1525": {
    "name": "SparseTensorDenseMatMul",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseTensorDenseMatMul",
    "signature": "(a_indices, a_values, a_shape, b, adjoint_a=False, adjoint_b=False, name=None)",
    "description": "Multiply SparseTensor (of rank 2) \"A\" by dense matrix \"B\"."
  },
  "1526": {
    "name": "SparseTensorSliceDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseTensorSliceDataset",
    "signature": "(indices, values, dense_shape, name=None)",
    "description": "Creates a dataset that splits a SparseTensor into elements row-wise."
  },
  "1527": {
    "name": "SparseTensorToCSRSparseMatrix",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseTensorToCSRSparseMatrix",
    "signature": "(indices, values, dense_shape, name=None)",
    "description": "Converts a SparseTensor to a (possibly batched) CSRSparseMatrix."
  },
  "1528": {
    "name": "SparseToDense",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseToDense",
    "signature": "(sparse_indices, output_shape, sparse_values, default_value, validate_indices=True, name=None)",
    "description": "Converts a sparse representation into a dense tensor."
  },
  "1529": {
    "name": "SparseToSparseSetOperation",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SparseToSparseSetOperation",
    "signature": "(set1_indices, set1_values, set1_shape, set2_indices, set2_values, set2_shape, set_operation, validate_indices=True, name=None)",
    "description": "Applies set operation along last dimension of 2 `SparseTensor` inputs."
  },
  "1530": {
    "name": "Spence",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Spence",
    "signature": "(x, name=None)",
    "description": "TODO: add doc."
  },
  "1531": {
    "name": "Split",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Split",
    "signature": "(axis, value, num_split, name=None)",
    "description": "Splits a tensor into `num_split` tensors along one dimension."
  },
  "1532": {
    "name": "SplitV",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SplitV",
    "signature": "(value, size_splits, axis, num_split, name=None)",
    "description": "Splits a tensor into `num_split` tensors along one dimension."
  },
  "1533": {
    "name": "SqlDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SqlDataset",
    "signature": "(driver_name, data_source_name, query, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that executes a SQL query and emits rows of the result set."
  },
  "1534": {
    "name": "Sqrt",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Sqrt",
    "signature": "(x, name=None)",
    "description": "Computes square root of x element-wise."
  },
  "1535": {
    "name": "SqrtGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SqrtGrad",
    "signature": "(y, dy, name=None)",
    "description": "Computes the gradient for the sqrt of `x` wrt its input."
  },
  "1536": {
    "name": "Square",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Square",
    "signature": "(x, name=None)",
    "description": "Computes square of x element-wise."
  },
  "1537": {
    "name": "SquaredDifference",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SquaredDifference",
    "signature": "(x, y, name=None)",
    "description": "Returns conj(x - y)(x - y) element-wise."
  },
  "1538": {
    "name": "Squeeze",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Squeeze",
    "signature": "(input, axis=[], name=None)",
    "description": "Removes dimensions of size 1 from the shape of a tensor."
  },
  "1539": {
    "name": "StackCloseV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StackCloseV2",
    "signature": "(handle, name=None)",
    "description": "Delete the stack from its resource container."
  },
  "1540": {
    "name": "StackPopV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StackPopV2",
    "signature": "(handle, elem_type, name=None)",
    "description": "Pop the element at the top of the stack."
  },
  "1541": {
    "name": "StackPushV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StackPushV2",
    "signature": "(handle, elem, swap_memory=False, name=None)",
    "description": "Push an element onto the stack."
  },
  "1542": {
    "name": "StackV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StackV2",
    "signature": "(max_size, elem_type, stack_name='', name=None)",
    "description": "A stack that produces elements in first-in last-out order."
  },
  "1543": {
    "name": "Stage",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Stage",
    "signature": "(values, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Stage values similar to a lightweight Enqueue."
  },
  "1544": {
    "name": "StageClear",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StageClear",
    "signature": "(dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op removes all elements in the underlying container."
  },
  "1545": {
    "name": "StagePeek",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StagePeek",
    "signature": "(index, dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op peeks at the values at the specified index.  If the"
  },
  "1546": {
    "name": "StageSize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StageSize",
    "signature": "(dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op returns the number of elements in the underlying container."
  },
  "1547": {
    "name": "StatefulPartitionedCall",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatefulPartitionedCall",
    "signature": "(args, Tout, f, config='', config_proto='', executor_type='', name=None)",
    "description": "returns `f(inputs)`, where `f`'s body is placed and partitioned."
  },
  "1548": {
    "name": "StatefulRandomBinomial",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatefulRandomBinomial",
    "signature": "(resource, algorithm, shape, counts, probs, dtype=tf.int64, name=None)",
    "description": "TODO: add doc."
  },
  "1549": {
    "name": "StatefulStandardNormalV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatefulStandardNormalV2",
    "signature": "(resource, algorithm, shape, dtype=tf.float32, name=None)",
    "description": "Outputs random values from a normal distribution."
  },
  "1550": {
    "name": "StatefulTruncatedNormal",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatefulTruncatedNormal",
    "signature": "(resource, algorithm, shape, dtype=tf.float32, name=None)",
    "description": "Outputs random values from a truncated normal distribution."
  },
  "1551": {
    "name": "StatefulUniform",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatefulUniform",
    "signature": "(resource, algorithm, shape, dtype=tf.float32, name=None)",
    "description": "Outputs random values from a uniform distribution."
  },
  "1552": {
    "name": "StatefulUniformFullInt",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatefulUniformFullInt",
    "signature": "(resource, algorithm, shape, dtype=tf.uint64, name=None)",
    "description": "Outputs random integers from a uniform distribution."
  },
  "1553": {
    "name": "StatefulUniformInt",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatefulUniformInt",
    "signature": "(resource, algorithm, shape, minval, maxval, name=None)",
    "description": "Outputs random integers from a uniform distribution."
  },
  "1554": {
    "name": "StatelessCase",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessCase",
    "signature": "(branch_index, input, Tout, branches, output_shapes=[], name=None)",
    "description": "An n-way switch statement which calls a single branch function."
  },
  "1555": {
    "name": "StatelessIf",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessIf",
    "signature": "(cond, input, Tout, then_branch, else_branch, output_shapes=[], name=None)",
    "description": "output = cond ? then_branch(input) : else_branch(input)"
  },
  "1556": {
    "name": "StatelessMultinomial",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessMultinomial",
    "signature": "(logits, num_samples, seed, output_dtype=tf.int64, name=None)",
    "description": "Draws samples from a multinomial distribution."
  },
  "1557": {
    "name": "StatelessParameterizedTruncatedNormal",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessParameterizedTruncatedNormal",
    "signature": "(shape, seed, means, stddevs, minvals, maxvals, name=None)",
    "description": "TODO: add doc."
  },
  "1558": {
    "name": "StatelessRandomBinomial",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessRandomBinomial",
    "signature": "(shape, seed, counts, probs, dtype=tf.int64, name=None)",
    "description": "Outputs deterministic pseudorandom random numbers from a binomial distribution."
  },
  "1559": {
    "name": "StatelessRandomGammaV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessRandomGammaV2",
    "signature": "(shape, seed, alpha, name=None)",
    "description": "Outputs deterministic pseudorandom random numbers from a gamma distribution."
  },
  "1560": {
    "name": "StatelessRandomGetAlg",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessRandomGetAlg",
    "signature": "(name=None)",
    "description": "Picks the best counter-based RNG algorithm based on device."
  },
  "1561": {
    "name": "StatelessRandomGetKeyCounter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessRandomGetKeyCounter",
    "signature": "(seed, name=None)",
    "description": "Scrambles seed into key and counter, using the best algorithm based on device."
  },
  "1562": {
    "name": "StatelessRandomGetKeyCounterAlg",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessRandomGetKeyCounterAlg",
    "signature": "(seed, name=None)",
    "description": "Picks the best algorithm based on device, and scrambles seed into key and counter."
  },
  "1563": {
    "name": "StatelessRandomNormal",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessRandomNormal",
    "signature": "(shape, seed, dtype=tf.float32, name=None)",
    "description": "Outputs deterministic pseudorandom values from a normal distribution."
  },
  "1564": {
    "name": "StatelessRandomNormalV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessRandomNormalV2",
    "signature": "(shape, key, counter, alg, dtype=tf.float32, name=None)",
    "description": "Outputs deterministic pseudorandom values from a normal distribution."
  },
  "1565": {
    "name": "StatelessRandomPoisson",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessRandomPoisson",
    "signature": "(shape, seed, lam, dtype, name=None)",
    "description": "Outputs deterministic pseudorandom random numbers from a Poisson distribution."
  },
  "1566": {
    "name": "StatelessRandomUniform",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessRandomUniform",
    "signature": "(shape, seed, dtype=tf.float32, name=None)",
    "description": "Outputs deterministic pseudorandom random values from a uniform distribution."
  },
  "1567": {
    "name": "StatelessRandomUniformFullInt",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessRandomUniformFullInt",
    "signature": "(shape, seed, dtype=tf.uint64, name=None)",
    "description": "Outputs deterministic pseudorandom random integers from a uniform distribution."
  },
  "1568": {
    "name": "StatelessRandomUniformFullIntV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessRandomUniformFullIntV2",
    "signature": "(shape, key, counter, alg, dtype=tf.uint64, name=None)",
    "description": "Outputs deterministic pseudorandom random integers from a uniform distribution."
  },
  "1569": {
    "name": "StatelessRandomUniformInt",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessRandomUniformInt",
    "signature": "(shape, seed, minval, maxval, name=None)",
    "description": "Outputs deterministic pseudorandom random integers from a uniform distribution."
  },
  "1570": {
    "name": "StatelessRandomUniformIntV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessRandomUniformIntV2",
    "signature": "(shape, key, counter, alg, minval, maxval, name=None)",
    "description": "Outputs deterministic pseudorandom random integers from a uniform distribution."
  },
  "1571": {
    "name": "StatelessRandomUniformV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessRandomUniformV2",
    "signature": "(shape, key, counter, alg, dtype=tf.float32, name=None)",
    "description": "Outputs deterministic pseudorandom random values from a uniform distribution."
  },
  "1572": {
    "name": "StatelessSampleDistortedBoundingBox",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessSampleDistortedBoundingBox",
    "signature": "(image_size, bounding_boxes, min_object_covered, seed, aspect_ratio_range=[0.75, 1.33], area_range=[0.05, 1], max_attempts=100, use_image_if_no_bounding_boxes=False, name=None)",
    "description": "Generate a randomly distorted bounding box for an image deterministically."
  },
  "1573": {
    "name": "StatelessShuffle",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessShuffle",
    "signature": "(value, key, counter, alg, name=None)",
    "description": "Randomly and deterministically shuffles a tensor along its first dimension."
  },
  "1574": {
    "name": "StatelessTruncatedNormal",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessTruncatedNormal",
    "signature": "(shape, seed, dtype=tf.float32, name=None)",
    "description": "Outputs deterministic pseudorandom values from a truncated normal distribution."
  },
  "1575": {
    "name": "StatelessTruncatedNormalV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessTruncatedNormalV2",
    "signature": "(shape, key, counter, alg, dtype=tf.float32, name=None)",
    "description": "Outputs deterministic pseudorandom values from a truncated normal distribution."
  },
  "1576": {
    "name": "StatelessWhile",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatelessWhile",
    "signature": "(input, cond, body, output_shapes=[], parallel_iterations=10, name=None)",
    "description": "output = input; While (Cond(output)) { output = Body(output) }"
  },
  "1577": {
    "name": "StaticRegexFullMatch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StaticRegexFullMatch",
    "signature": "(input, pattern, name=None)",
    "description": "Check if the input matches the regex pattern."
  },
  "1578": {
    "name": "StaticRegexReplace",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StaticRegexReplace",
    "signature": "(input, pattern, rewrite, replace_global=True, name=None)",
    "description": "Replaces the match of pattern in input with rewrite."
  },
  "1579": {
    "name": "StatsAggregatorHandle",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatsAggregatorHandle",
    "signature": "(container='', shared_name='', name=None)",
    "description": "Creates a statistics manager resource."
  },
  "1580": {
    "name": "StatsAggregatorHandleV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatsAggregatorHandleV2",
    "signature": "(container='', shared_name='', name=None)",
    "description": "TODO: add doc."
  },
  "1581": {
    "name": "StatsAggregatorSetSummaryWriter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatsAggregatorSetSummaryWriter",
    "signature": "(stats_aggregator, summary, name=None)",
    "description": "Set a summary_writer_interface to record statistics using given stats_aggregator."
  },
  "1582": {
    "name": "StatsAggregatorSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StatsAggregatorSummary",
    "signature": "(iterator, name=None)",
    "description": "Produces a summary of any statistics recorded by the given statistics manager."
  },
  "1583": {
    "name": "StopGradient",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StopGradient",
    "signature": "(input, name=None)",
    "description": "Stops gradient computation."
  },
  "1584": {
    "name": "StridedSlice",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StridedSlice",
    "signature": "(input, begin, end, strides, begin_mask=0, end_mask=0, ellipsis_mask=0, new_axis_mask=0, shrink_axis_mask=0, name=None)",
    "description": "Return a strided slice from `input`."
  },
  "1585": {
    "name": "StridedSliceAssign",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StridedSliceAssign",
    "signature": "(ref, begin, end, strides, value, begin_mask=0, end_mask=0, ellipsis_mask=0, new_axis_mask=0, shrink_axis_mask=0, name=None)",
    "description": "Assign `value` to the sliced l-value reference of `ref`."
  },
  "1586": {
    "name": "StridedSliceGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StridedSliceGrad",
    "signature": "(shape, begin, end, strides, dy, begin_mask=0, end_mask=0, ellipsis_mask=0, new_axis_mask=0, shrink_axis_mask=0, name=None)",
    "description": "Returns the gradient of `StridedSlice`."
  },
  "1587": {
    "name": "StringFormat",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StringFormat",
    "signature": "(inputs, template='%s', placeholder='%s', summarize=3, name=None)",
    "description": "Formats a string template using a list of tensors."
  },
  "1588": {
    "name": "StringJoin",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StringJoin",
    "signature": "(inputs, separator='', name=None)",
    "description": "Joins the strings in the given list of string tensors into one tensor;"
  },
  "1589": {
    "name": "StringLength",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StringLength",
    "signature": "(input, unit='BYTE', name=None)",
    "description": "String lengths of `input`."
  },
  "1590": {
    "name": "StringLower",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StringLower",
    "signature": "(input, encoding='', name=None)",
    "description": "Converts all uppercase characters into their respective lowercase replacements."
  },
  "1591": {
    "name": "StringNGrams",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StringNGrams",
    "signature": "(data, data_splits, separator, ngram_widths, left_pad, right_pad, pad_width, preserve_short_sequences, name=None)",
    "description": "Creates ngrams from ragged string data."
  },
  "1592": {
    "name": "StringSplit",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StringSplit",
    "signature": "(input, delimiter, skip_empty=True, name=None)",
    "description": "Split elements of `input` based on `delimiter` into a `SparseTensor`."
  },
  "1593": {
    "name": "StringSplitV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StringSplitV2",
    "signature": "(input, sep, maxsplit=-1, name=None)",
    "description": "Split elements of `source` based on `sep` into a `SparseTensor`."
  },
  "1594": {
    "name": "StringStrip",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StringStrip",
    "signature": "(input, name=None)",
    "description": "Strip leading and trailing whitespaces from the Tensor."
  },
  "1595": {
    "name": "StringToHashBucketFast",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StringToHashBucketFast",
    "signature": "(input, num_buckets, name=None)",
    "description": "Converts each string in the input Tensor to its hash mod by a number of buckets."
  },
  "1596": {
    "name": "StringToHashBucketStrong",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StringToHashBucketStrong",
    "signature": "(input, num_buckets, key, name=None)",
    "description": "Converts each string in the input Tensor to its hash mod by a number of buckets."
  },
  "1597": {
    "name": "StringToNumber",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StringToNumber",
    "signature": "(string_tensor, out_type=tf.float32, name=None)",
    "description": "Converts each string in the input Tensor to the specified numeric type."
  },
  "1598": {
    "name": "StringUpper",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.StringUpper",
    "signature": "(input, encoding='', name=None)",
    "description": "Converts all lowercase characters into their respective uppercase replacements."
  },
  "1599": {
    "name": "Sub",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Sub",
    "signature": "(x, y, name=None)",
    "description": "Returns x - y element-wise."
  },
  "1600": {
    "name": "Substr",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Substr",
    "signature": "(input, pos, len, unit='BYTE', name=None)",
    "description": "Return substrings from `Tensor` of strings."
  },
  "1601": {
    "name": "Sum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Sum",
    "signature": "(input, axis, keep_dims=False, name=None)",
    "description": "Computes the sum of elements across dimensions of a tensor."
  },
  "1602": {
    "name": "SummaryWriter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SummaryWriter",
    "signature": "(shared_name='', container='', name=None)",
    "description": "TODO: add doc."
  },
  "1603": {
    "name": "Svd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Svd",
    "signature": "(input, compute_uv=True, full_matrices=False, name=None)",
    "description": "Computes the singular value decompositions of one or more matrices."
  },
  "1604": {
    "name": "Switch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Switch",
    "signature": "(data, pred, name=None)",
    "description": "Forwards `data` to the output port determined by `pred`."
  },
  "1605": {
    "name": "SymbolicGradient",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.SymbolicGradient",
    "signature": "(input, Tout, f, name=None)",
    "description": "Computes the gradient function for function f via backpropagation."
  },
  "1606": {
    "name": "TFRecordDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TFRecordDataset",
    "signature": "(filenames, compression_type, buffer_size, metadata='', name=None)",
    "description": "Creates a dataset that emits the records from one or more TFRecord files."
  },
  "1607": {
    "name": "TFRecordReader",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TFRecordReader",
    "signature": "(container='', shared_name='', compression_type='', name=None)",
    "description": "A Reader that outputs the records from a TensorFlow Records file."
  },
  "1608": {
    "name": "TFRecordReaderV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TFRecordReaderV2",
    "signature": "(container='', shared_name='', compression_type='', name=None)",
    "description": "A Reader that outputs the records from a TensorFlow Records file."
  },
  "1609": {
    "name": "TPUCompilationResult",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TPUCompilationResult",
    "signature": "(name=None)",
    "description": "Returns the result of a TPU compilation."
  },
  "1610": {
    "name": "TPUEmbeddingActivations",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TPUEmbeddingActivations",
    "signature": "(embedding_variable, sliced_activations, table_id, lookup_id, name=None)",
    "description": "An op enabling differentiation of TPU Embeddings."
  },
  "1611": {
    "name": "TPUOrdinalSelector",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TPUOrdinalSelector",
    "signature": "(name=None)",
    "description": "A TPU core selector Op."
  },
  "1612": {
    "name": "TPUPartitionedCall",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TPUPartitionedCall",
    "signature": "(args, device_ordinal, Tout, f, autotuner_thresh=0, name=None)",
    "description": "Calls a function placed on a specified TPU device."
  },
  "1613": {
    "name": "TPUPartitionedInput",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TPUPartitionedInput",
    "signature": "(inputs, partition_dim=0, name=None)",
    "description": "An op that groups a list of partitioned inputs together. This op"
  },
  "1614": {
    "name": "TPUPartitionedOutput",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TPUPartitionedOutput",
    "signature": "(inputs, num_splits, partition_dim=0, name=None)",
    "description": "An op that demultiplexes a tensor to be sharded by XLA to a list of partitioned"
  },
  "1615": {
    "name": "TPUReplicatedInput",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TPUReplicatedInput",
    "signature": "(inputs, is_mirrored_variable=False, index=-1, is_packed=False, name=None)",
    "description": "Connects N inputs to an N-way replicated TPU computation."
  },
  "1616": {
    "name": "TPUReplicatedOutput",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TPUReplicatedOutput",
    "signature": "(input, num_replicas, name=None)",
    "description": "Connects N outputs from an N-way replicated TPU computation."
  },
  "1617": {
    "name": "TakeDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TakeDataset",
    "signature": "(input_dataset, count, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that contains `count` elements from the `input_dataset`."
  },
  "1618": {
    "name": "TakeManySparseFromTensorsMap",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TakeManySparseFromTensorsMap",
    "signature": "(sparse_handles, dtype, container='', shared_name='', name=None)",
    "description": "Read `SparseTensors` from a `SparseTensorsMap` and concatenate them."
  },
  "1619": {
    "name": "TakeWhileDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TakeWhileDataset",
    "signature": "(input_dataset, other_arguments, predicate, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that stops iteration when predicate` is false."
  },
  "1620": {
    "name": "Tan",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Tan",
    "signature": "(x, name=None)",
    "description": "Computes tan of x element-wise."
  },
  "1621": {
    "name": "Tanh",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Tanh",
    "signature": "(x, name=None)",
    "description": "Computes hyperbolic tangent of `x` element-wise."
  },
  "1622": {
    "name": "TanhGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TanhGrad",
    "signature": "(y, dy, name=None)",
    "description": "Computes the gradient for the tanh of `x` wrt its input."
  },
  "1623": {
    "name": "TemporaryVariable",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TemporaryVariable",
    "signature": "(shape, dtype, var_name='', name=None)",
    "description": "Returns a tensor that may be mutated, but only persists within a single step."
  },
  "1624": {
    "name": "TensorArray",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArray",
    "signature": "(size, dtype, dynamic_size=False, clear_after_read=True, tensor_array_name='', element_shape=None, name=None)",
    "description": "TODO: add doc."
  },
  "1625": {
    "name": "TensorArrayClose",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayClose",
    "signature": "(handle, name=None)",
    "description": "TODO: add doc."
  },
  "1626": {
    "name": "TensorArrayCloseV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayCloseV3",
    "signature": "(handle, name=None)",
    "description": "Delete the TensorArray from its resource container."
  },
  "1627": {
    "name": "TensorArrayConcat",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayConcat",
    "signature": "(handle, flow_in, dtype, element_shape_except0=None, name=None)",
    "description": "TODO: add doc."
  },
  "1628": {
    "name": "TensorArrayConcatV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayConcatV3",
    "signature": "(handle, flow_in, dtype, element_shape_except0=None, name=None)",
    "description": "Concat the elements from the TensorArray into value `value`."
  },
  "1629": {
    "name": "TensorArrayGather",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayGather",
    "signature": "(handle, indices, flow_in, dtype, element_shape=None, name=None)",
    "description": "TODO: add doc."
  },
  "1630": {
    "name": "TensorArrayGatherV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayGatherV3",
    "signature": "(handle, indices, flow_in, dtype, element_shape=None, name=None)",
    "description": "Gather specific elements from the TensorArray into output `value`."
  },
  "1631": {
    "name": "TensorArrayGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayGrad",
    "signature": "(handle, flow_in, source, name=None)",
    "description": "TODO: add doc."
  },
  "1632": {
    "name": "TensorArrayGradV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayGradV3",
    "signature": "(handle, flow_in, source, name=None)",
    "description": "Creates a TensorArray for storing the gradients of values in the given handle."
  },
  "1633": {
    "name": "TensorArrayGradWithShape",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayGradWithShape",
    "signature": "(handle, flow_in, shape_to_prepend, source, name=None)",
    "description": "Creates a TensorArray for storing multiple gradients of values in the given handle."
  },
  "1634": {
    "name": "TensorArrayPack",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayPack",
    "signature": "(handle, flow_in, dtype, element_shape=None, name=None)",
    "description": "TODO: add doc."
  },
  "1635": {
    "name": "TensorArrayRead",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayRead",
    "signature": "(handle, index, flow_in, dtype, name=None)",
    "description": "TODO: add doc."
  },
  "1636": {
    "name": "TensorArrayReadV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayReadV3",
    "signature": "(handle, index, flow_in, dtype, name=None)",
    "description": "Read an element from the TensorArray into output `value`."
  },
  "1637": {
    "name": "TensorArrayScatter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayScatter",
    "signature": "(handle, indices, value, flow_in, name=None)",
    "description": "TODO: add doc."
  },
  "1638": {
    "name": "TensorArrayScatterV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayScatterV3",
    "signature": "(handle, indices, value, flow_in, name=None)",
    "description": "Scatter the data from the input value into specific TensorArray elements."
  },
  "1639": {
    "name": "TensorArraySize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArraySize",
    "signature": "(handle, flow_in, name=None)",
    "description": "TODO: add doc."
  },
  "1640": {
    "name": "TensorArraySizeV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArraySizeV3",
    "signature": "(handle, flow_in, name=None)",
    "description": "Get the current size of the TensorArray."
  },
  "1641": {
    "name": "TensorArraySplit",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArraySplit",
    "signature": "(handle, value, lengths, flow_in, name=None)",
    "description": "TODO: add doc."
  },
  "1642": {
    "name": "TensorArraySplitV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArraySplitV3",
    "signature": "(handle, value, lengths, flow_in, name=None)",
    "description": "Split the data from the input value into TensorArray elements."
  },
  "1643": {
    "name": "TensorArrayUnpack",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayUnpack",
    "signature": "(handle, value, flow_in, name=None)",
    "description": "TODO: add doc."
  },
  "1644": {
    "name": "TensorArrayV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayV3",
    "signature": "(size, dtype, element_shape=None, dynamic_size=False, clear_after_read=True, identical_element_shapes=False, tensor_array_name='', name=None)",
    "description": "An array of Tensors of given size."
  },
  "1645": {
    "name": "TensorArrayWrite",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayWrite",
    "signature": "(handle, index, value, flow_in, name=None)",
    "description": "TODO: add doc."
  },
  "1646": {
    "name": "TensorArrayWriteV3",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorArrayWriteV3",
    "signature": "(handle, index, value, flow_in, name=None)",
    "description": "Push an element onto the tensor_array."
  },
  "1647": {
    "name": "TensorDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorDataset",
    "signature": "(components, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that emits `components` as a tuple of tensors once."
  },
  "1648": {
    "name": "TensorListConcat",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListConcat",
    "signature": "(input_handle, element_dtype, element_shape=None, name=None)",
    "description": "Concats all tensors in the list along the 0th dimension."
  },
  "1649": {
    "name": "TensorListConcatLists",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListConcatLists",
    "signature": "(input_a, input_b, element_dtype, name=None)",
    "description": "TODO: add doc."
  },
  "1650": {
    "name": "TensorListConcatV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListConcatV2",
    "signature": "(input_handle, element_shape, leading_dims, element_dtype, name=None)",
    "description": "Concats all tensors in the list along the 0th dimension."
  },
  "1651": {
    "name": "TensorListElementShape",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListElementShape",
    "signature": "(input_handle, shape_type, name=None)",
    "description": "The shape of the elements of the given list, as a tensor."
  },
  "1652": {
    "name": "TensorListFromTensor",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListFromTensor",
    "signature": "(tensor, element_shape, name=None)",
    "description": "Creates a TensorList which, when stacked, has the value of `tensor`."
  },
  "1653": {
    "name": "TensorListGather",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListGather",
    "signature": "(input_handle, indices, element_shape, element_dtype, name=None)",
    "description": "Creates a Tensor by indexing into the TensorList."
  },
  "1654": {
    "name": "TensorListGetItem",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListGetItem",
    "signature": "(input_handle, index, element_shape, element_dtype, name=None)",
    "description": "Returns the item in the list with the given index."
  },
  "1655": {
    "name": "TensorListLength",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListLength",
    "signature": "(input_handle, name=None)",
    "description": "Returns the number of tensors in the input tensor list."
  },
  "1656": {
    "name": "TensorListPopBack",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListPopBack",
    "signature": "(input_handle, element_shape, element_dtype, name=None)",
    "description": "Returns the last element of the input list as well as a list with all but that element."
  },
  "1657": {
    "name": "TensorListPushBack",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListPushBack",
    "signature": "(input_handle, tensor, name=None)",
    "description": "Returns a list which has the passed-in `Tensor` as last element and the other elements of the given list in `input_handle`."
  },
  "1658": {
    "name": "TensorListPushBackBatch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListPushBackBatch",
    "signature": "(input_handles, tensor, name=None)",
    "description": "TODO: add doc."
  },
  "1659": {
    "name": "TensorListReserve",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListReserve",
    "signature": "(element_shape, num_elements, element_dtype, name=None)",
    "description": "List of the given size with empty elements."
  },
  "1660": {
    "name": "TensorListResize",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListResize",
    "signature": "(input_handle, size, name=None)",
    "description": "Resizes the list."
  },
  "1661": {
    "name": "TensorListScatter",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListScatter",
    "signature": "(tensor, indices, element_shape, name=None)",
    "description": "Creates a TensorList by indexing into a Tensor."
  },
  "1662": {
    "name": "TensorListScatterIntoExistingList",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListScatterIntoExistingList",
    "signature": "(input_handle, tensor, indices, name=None)",
    "description": "Scatters tensor at indices in an input list."
  },
  "1663": {
    "name": "TensorListScatterV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListScatterV2",
    "signature": "(tensor, indices, element_shape, num_elements, name=None)",
    "description": "Creates a TensorList by indexing into a Tensor."
  },
  "1664": {
    "name": "TensorListSetItem",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListSetItem",
    "signature": "(input_handle, index, item, name=None)",
    "description": "Sets the index-th position of the list to contain the given tensor."
  },
  "1665": {
    "name": "TensorListSplit",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListSplit",
    "signature": "(tensor, element_shape, lengths, name=None)",
    "description": "Splits a tensor into a list."
  },
  "1666": {
    "name": "TensorListStack",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorListStack",
    "signature": "(input_handle, element_shape, element_dtype, num_elements=-1, name=None)",
    "description": "Stacks all tensors in the list."
  },
  "1667": {
    "name": "TensorScatterAdd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorScatterAdd",
    "signature": "(tensor, indices, updates, name=None)",
    "description": "Adds sparse `updates` to an existing tensor according to `indices`."
  },
  "1668": {
    "name": "TensorScatterMax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorScatterMax",
    "signature": "(tensor, indices, updates, name=None)",
    "description": "Apply a sparse update to a tensor taking the element-wise maximum."
  },
  "1669": {
    "name": "TensorScatterMin",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorScatterMin",
    "signature": "(tensor, indices, updates, name=None)",
    "description": "TODO: add doc."
  },
  "1670": {
    "name": "TensorScatterSub",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorScatterSub",
    "signature": "(tensor, indices, updates, name=None)",
    "description": "Subtracts sparse `updates` from an existing tensor according to `indices`."
  },
  "1671": {
    "name": "TensorScatterUpdate",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorScatterUpdate",
    "signature": "(tensor, indices, updates, name=None)",
    "description": "Scatter `updates` into an existing tensor according to `indices`."
  },
  "1672": {
    "name": "TensorSliceDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorSliceDataset",
    "signature": "(components, output_shapes, is_files=False, metadata='', replicate_on_split=False, name=None)",
    "description": "Creates a dataset that emits each dim-0 slice of `components` once."
  },
  "1673": {
    "name": "TensorStridedSliceUpdate",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorStridedSliceUpdate",
    "signature": "(input, begin, end, strides, value, begin_mask=0, end_mask=0, ellipsis_mask=0, new_axis_mask=0, shrink_axis_mask=0, name=None)",
    "description": "Assign `value` to the sliced l-value reference of `input`."
  },
  "1674": {
    "name": "TensorSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorSummary",
    "signature": "(tensor, description='', labels=[], display_name='', name=None)",
    "description": "Outputs a `Summary` protocol buffer with a tensor."
  },
  "1675": {
    "name": "TensorSummaryV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TensorSummaryV2",
    "signature": "(tag, tensor, serialized_summary_metadata, name=None)",
    "description": "Outputs a `Summary` protocol buffer with a tensor and per-plugin data."
  },
  "1676": {
    "name": "TextLineDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TextLineDataset",
    "signature": "(filenames, compression_type, buffer_size, metadata='', name=None)",
    "description": "Creates a dataset that emits the lines of one or more text files."
  },
  "1677": {
    "name": "TextLineReader",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TextLineReader",
    "signature": "(skip_header_lines=0, container='', shared_name='', name=None)",
    "description": "A Reader that outputs the lines of a file delimited by '\\n'."
  },
  "1678": {
    "name": "TextLineReaderV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TextLineReaderV2",
    "signature": "(skip_header_lines=0, container='', shared_name='', name=None)",
    "description": "A Reader that outputs the lines of a file delimited by '\\n'."
  },
  "1679": {
    "name": "ThreadPoolDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ThreadPoolDataset",
    "signature": "(input_dataset, thread_pool, output_types, output_shapes, name=None)",
    "description": "Creates a dataset that uses a custom thread pool to compute `input_dataset`."
  },
  "1680": {
    "name": "ThreadPoolHandle",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ThreadPoolHandle",
    "signature": "(num_threads, display_name, max_intra_op_parallelism=1, container='', shared_name='', name=None)",
    "description": "Creates a dataset that uses a custom thread pool to compute `input_dataset`."
  },
  "1681": {
    "name": "ThreadUnsafeUnigramCandidateSampler",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ThreadUnsafeUnigramCandidateSampler",
    "signature": "(true_classes, num_true, num_sampled, unique, range_max, seed=0, seed2=0, name=None)",
    "description": "Generates labels for candidate sampling with a learned unigram distribution."
  },
  "1682": {
    "name": "Tile",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Tile",
    "signature": "(input, multiples, name=None)",
    "description": "Constructs a tensor by tiling a given tensor."
  },
  "1683": {
    "name": "TileGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TileGrad",
    "signature": "(input, multiples, name=None)",
    "description": "Returns the gradient of `Tile`."
  },
  "1684": {
    "name": "Timestamp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Timestamp",
    "signature": "(name=None)",
    "description": "Provides the time since epoch in seconds."
  },
  "1685": {
    "name": "ToBool",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ToBool",
    "signature": "(input, name=None)",
    "description": "Converts a tensor to a scalar predicate."
  },
  "1686": {
    "name": "TopK",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TopK",
    "signature": "(input, k, sorted=True, name=None)",
    "description": "Finds values and indices of the `k` largest elements for the last dimension."
  },
  "1687": {
    "name": "TopKV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TopKV2",
    "signature": "(input, k, sorted=True, name=None)",
    "description": "Finds values and indices of the `k` largest elements for the last dimension."
  },
  "1688": {
    "name": "Transpose",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Transpose",
    "signature": "(x, perm, name=None)",
    "description": "Shuffle dimensions of x according to a permutation."
  },
  "1689": {
    "name": "TridiagonalMatMul",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TridiagonalMatMul",
    "signature": "(superdiag, maindiag, subdiag, rhs, name=None)",
    "description": "Calculate product with tridiagonal matrix."
  },
  "1690": {
    "name": "TridiagonalSolve",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TridiagonalSolve",
    "signature": "(diagonals, rhs, partial_pivoting=True, perturb_singular=False, name=None)",
    "description": "Solves tridiagonal systems of equations."
  },
  "1691": {
    "name": "TruncateDiv",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TruncateDiv",
    "signature": "(x, y, name=None)",
    "description": "Returns x / y element-wise for integer types."
  },
  "1692": {
    "name": "TruncateMod",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TruncateMod",
    "signature": "(x, y, name=None)",
    "description": "Returns element-wise remainder of division. This emulates C semantics in that"
  },
  "1693": {
    "name": "TruncatedNormal",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.TruncatedNormal",
    "signature": "(shape, dtype, seed=0, seed2=0, name=None)",
    "description": "Outputs random values from a truncated normal distribution."
  },
  "1694": {
    "name": "Unbatch",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Unbatch",
    "signature": "(batched_tensor, batch_index, id, timeout_micros, container='', shared_name='', name=None)",
    "description": "Reverses the operation of Batch for a single output Tensor."
  },
  "1695": {
    "name": "UnbatchDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UnbatchDataset",
    "signature": "(input_dataset, output_types, output_shapes, metadata='', name=None)",
    "description": "A dataset that splits the elements of its input into multiple elements."
  },
  "1696": {
    "name": "UnbatchGrad",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UnbatchGrad",
    "signature": "(original_input, batch_index, grad, id, container='', shared_name='', name=None)",
    "description": "Gradient of Unbatch."
  },
  "1697": {
    "name": "UncompressElement",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UncompressElement",
    "signature": "(compressed, output_types, output_shapes, name=None)",
    "description": "Uncompresses a compressed dataset element."
  },
  "1698": {
    "name": "UnicodeDecode",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UnicodeDecode",
    "signature": "(input, input_encoding, errors='replace', replacement_char=65533, replace_control_characters=False, Tsplits=tf.int64, name=None)",
    "description": "Decodes each string in `input` into a sequence of Unicode code points."
  },
  "1699": {
    "name": "UnicodeDecodeWithOffsets",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UnicodeDecodeWithOffsets",
    "signature": "(input, input_encoding, errors='replace', replacement_char=65533, replace_control_characters=False, Tsplits=tf.int64, name=None)",
    "description": "Decodes each string in `input` into a sequence of Unicode code points."
  },
  "1700": {
    "name": "UnicodeEncode",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UnicodeEncode",
    "signature": "(input_values, input_splits, output_encoding, errors='replace', replacement_char=65533, name=None)",
    "description": "Encode a tensor of ints into unicode strings."
  },
  "1701": {
    "name": "UnicodeScript",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UnicodeScript",
    "signature": "(input, name=None)",
    "description": "Determine the script codes of a given tensor of Unicode integer code points."
  },
  "1702": {
    "name": "UnicodeTranscode",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UnicodeTranscode",
    "signature": "(input, input_encoding, output_encoding, errors='replace', replacement_char=65533, replace_control_characters=False, name=None)",
    "description": "Transcode the input text from a source encoding to a destination encoding."
  },
  "1703": {
    "name": "UniformCandidateSampler",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UniformCandidateSampler",
    "signature": "(true_classes, num_true, num_sampled, unique, range_max, seed=0, seed2=0, name=None)",
    "description": "Generates labels for candidate sampling with a uniform distribution."
  },
  "1704": {
    "name": "Unique",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Unique",
    "signature": "(x, out_idx=tf.int32, name=None)",
    "description": "Finds unique elements in a 1-D tensor."
  },
  "1705": {
    "name": "UniqueDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UniqueDataset",
    "signature": "(input_dataset, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that contains the unique elements of `input_dataset`."
  },
  "1706": {
    "name": "UniqueV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UniqueV2",
    "signature": "(x, axis, out_idx=tf.int32, name=None)",
    "description": "Finds unique elements along an axis of a tensor."
  },
  "1707": {
    "name": "UniqueWithCounts",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UniqueWithCounts",
    "signature": "(x, out_idx=tf.int32, name=None)",
    "description": "Finds unique elements in a 1-D tensor."
  },
  "1708": {
    "name": "UniqueWithCountsV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UniqueWithCountsV2",
    "signature": "(x, axis, out_idx=tf.int32, name=None)",
    "description": "Finds unique elements along an axis of a tensor."
  },
  "1709": {
    "name": "Unpack",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Unpack",
    "signature": "(value, num, axis=0, name=None)",
    "description": "Unpacks a given dimension of a rank-`R` tensor into `num` rank-`(R-1)` tensors."
  },
  "1710": {
    "name": "UnravelIndex",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UnravelIndex",
    "signature": "(indices, dims, name=None)",
    "description": "Converts an array of flat indices into a tuple of coordinate arrays."
  },
  "1711": {
    "name": "UnsortedSegmentJoin",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UnsortedSegmentJoin",
    "signature": "(inputs, segment_ids, num_segments, separator='', name=None)",
    "description": "TODO: add doc."
  },
  "1712": {
    "name": "UnsortedSegmentMax",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UnsortedSegmentMax",
    "signature": "(data, segment_ids, num_segments, name=None)",
    "description": "Computes the maximum along segments of a tensor."
  },
  "1713": {
    "name": "UnsortedSegmentMin",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UnsortedSegmentMin",
    "signature": "(data, segment_ids, num_segments, name=None)",
    "description": "Computes the minimum along segments of a tensor."
  },
  "1714": {
    "name": "UnsortedSegmentProd",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UnsortedSegmentProd",
    "signature": "(data, segment_ids, num_segments, name=None)",
    "description": "Computes the product along segments of a tensor."
  },
  "1715": {
    "name": "UnsortedSegmentSum",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UnsortedSegmentSum",
    "signature": "(data, segment_ids, num_segments, name=None)",
    "description": "Computes the sum along segments of a tensor."
  },
  "1716": {
    "name": "Unstage",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Unstage",
    "signature": "(dtypes, capacity=0, memory_limit=0, container='', shared_name='', name=None)",
    "description": "Op is similar to a lightweight Dequeue."
  },
  "1717": {
    "name": "UnwrapDatasetVariant",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UnwrapDatasetVariant",
    "signature": "(input_handle, name=None)",
    "description": "TODO: add doc."
  },
  "1718": {
    "name": "UpperBound",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.UpperBound",
    "signature": "(sorted_inputs, values, out_type=tf.int32, name=None)",
    "description": "Applies upper_bound(sorted_search_values, values) along each row."
  },
  "1719": {
    "name": "VarIsInitializedOp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.VarIsInitializedOp",
    "signature": "(resource, name=None)",
    "description": "Checks whether a resource handle-based variable has been initialized."
  },
  "1720": {
    "name": "Variable",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Variable",
    "signature": "(shape, dtype, container='', shared_name='', name=None)",
    "description": "Use VariableV2 instead."
  },
  "1721": {
    "name": "VariableShape",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.VariableShape",
    "signature": "(input, out_type=tf.int32, name=None)",
    "description": "Returns the shape of the variable pointed to by `resource`."
  },
  "1722": {
    "name": "VariableV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.VariableV2",
    "signature": "(shape, dtype, container='', shared_name='', name=None)",
    "description": "Holds state in the form of a tensor that persists across steps."
  },
  "1723": {
    "name": "Where",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Where",
    "signature": "(condition, name=None)",
    "description": "Returns locations of nonzero / true values in a tensor."
  },
  "1724": {
    "name": "While",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.While",
    "signature": "(input, cond, body, output_shapes=[], parallel_iterations=10, name=None)",
    "description": "output = input; While (Cond(output)) { output = Body(output) }"
  },
  "1725": {
    "name": "WholeFileReader",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.WholeFileReader",
    "signature": "(container='', shared_name='', name=None)",
    "description": "A Reader that outputs the entire contents of a file as a value."
  },
  "1726": {
    "name": "WholeFileReaderV2",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.WholeFileReaderV2",
    "signature": "(container='', shared_name='', name=None)",
    "description": "A Reader that outputs the entire contents of a file as a value."
  },
  "1727": {
    "name": "WindowDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.WindowDataset",
    "signature": "(input_dataset, size, shift, stride, drop_remainder, output_types, output_shapes, metadata='', name=None)",
    "description": "Combines (nests of) input elements into a dataset of (nests of) windows."
  },
  "1728": {
    "name": "WindowOp",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.WindowOp",
    "signature": "(inputs, output_types, output_shapes, name=None)",
    "description": "TODO: add doc."
  },
  "1729": {
    "name": "WorkerHeartbeat",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.WorkerHeartbeat",
    "signature": "(request, name=None)",
    "description": "Worker heartbeat op."
  },
  "1730": {
    "name": "WrapDatasetVariant",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.WrapDatasetVariant",
    "signature": "(input_handle, name=None)",
    "description": "TODO: add doc."
  },
  "1731": {
    "name": "WriteAudioSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.WriteAudioSummary",
    "signature": "(writer, step, tag, tensor, sample_rate, max_outputs=3, name=None)",
    "description": "Writes an audio summary."
  },
  "1732": {
    "name": "WriteFile",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.WriteFile",
    "signature": "(filename, contents, name=None)",
    "description": "Writes `contents` to the file at input `filename`."
  },
  "1733": {
    "name": "WriteGraphSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.WriteGraphSummary",
    "signature": "(writer, step, tensor, name=None)",
    "description": "Writes a graph summary."
  },
  "1734": {
    "name": "WriteHistogramSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.WriteHistogramSummary",
    "signature": "(writer, step, tag, values, name=None)",
    "description": "Writes a histogram summary."
  },
  "1735": {
    "name": "WriteImageSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.WriteImageSummary",
    "signature": "(writer, step, tag, tensor, bad_color, max_images=3, name=None)",
    "description": "Writes an image summary."
  },
  "1736": {
    "name": "WriteRawProtoSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.WriteRawProtoSummary",
    "signature": "(writer, step, tensor, name=None)",
    "description": "Writes a serialized proto summary."
  },
  "1737": {
    "name": "WriteScalarSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.WriteScalarSummary",
    "signature": "(writer, step, tag, value, name=None)",
    "description": "Writes a scalar summary."
  },
  "1738": {
    "name": "WriteSummary",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.WriteSummary",
    "signature": "(writer, step, tensor, tag, summary_metadata, name=None)",
    "description": "Writes a tensor summary."
  },
  "1739": {
    "name": "Xdivy",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Xdivy",
    "signature": "(x, y, name=None)",
    "description": "Returns 0 if x == 0, and x / y otherwise, elementwise."
  },
  "1740": {
    "name": "XlaConcatND",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.XlaConcatND",
    "signature": "(inputs, num_concats, paddings=[], name=None)",
    "description": "Concats input tensor across all dimensions."
  },
  "1741": {
    "name": "XlaSplitND",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.XlaSplitND",
    "signature": "(input, N, num_splits, paddings=[], name=None)",
    "description": "Splits input tensor across all dimensions."
  },
  "1742": {
    "name": "Xlog1py",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Xlog1py",
    "signature": "(x, y, name=None)",
    "description": "Returns 0 if x == 0, and x * log1p(y) otherwise, elementwise."
  },
  "1743": {
    "name": "Xlogy",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Xlogy",
    "signature": "(x, y, name=None)",
    "description": "Returns 0 if x == 0, and x * log(y) otherwise, elementwise."
  },
  "1744": {
    "name": "ZerosLike",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ZerosLike",
    "signature": "(x, name=None)",
    "description": "Returns a tensor of zeros with the same shape and type as x."
  },
  "1745": {
    "name": "Zeta",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.Zeta",
    "signature": "(x, q, name=None)",
    "description": "Compute the Hurwitz zeta function \\\\(\\zeta(x, q)\\\\)."
  },
  "1746": {
    "name": "ZipDataset",
    "module": "tf.raw_ops",
    "fullName": "tf.raw_ops.ZipDataset",
    "signature": "(input_datasets, output_types, output_shapes, metadata='', name=None)",
    "description": "Creates a dataset that zips together `input_datasets`."
  },
  "1747": {
    "name": "Algorithm",
    "module": "tf.random",
    "fullName": "tf.random.Algorithm",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "An enumeration."
  },
  "1748": {
    "name": "Generator",
    "module": "tf.random",
    "fullName": "tf.random.Generator",
    "signature": "(copy_from=None, state=None, alg=None)",
    "description": "Random-number generator."
  },
  "1749": {
    "name": "all_candidate_sampler",
    "module": "tf.random",
    "fullName": "tf.random.all_candidate_sampler",
    "signature": "(true_classes, num_true, num_sampled, unique, seed=None, name=None)",
    "description": "Generate the set of all classes."
  },
  "1750": {
    "name": "categorical",
    "module": "tf.random",
    "fullName": "tf.random.categorical",
    "signature": "(logits, num_samples, dtype=None, seed=None, name=None)",
    "description": "Draws samples from a categorical distribution."
  },
  "1751": {
    "name": "create_rng_state",
    "module": "tf.random",
    "fullName": "tf.random.create_rng_state",
    "signature": "(seed, alg)",
    "description": "Creates a RNG state from an integer or a vector."
  },
  "1752": {
    "name": "fixed_unigram_candidate_sampler",
    "module": "tf.random",
    "fullName": "tf.random.fixed_unigram_candidate_sampler",
    "signature": "(true_classes, num_true, num_sampled, unique, range_max, vocab_file='', distortion=1.0, num_reserved_ids=0, num_shards=1, shard=0, unigrams=(), seed=None, name=None)",
    "description": "Samples a set of classes using the provided (fixed) base distribution."
  },
  "1753": {
    "name": "gamma",
    "module": "tf.random",
    "fullName": "tf.random.gamma",
    "signature": "(shape, alpha, beta=None, dtype=tf.float32, seed=None, name=None)",
    "description": "Draws `shape` samples from each of the given Gamma distribution(s)."
  },
  "1754": {
    "name": "get_global_generator",
    "module": "tf.random",
    "fullName": "tf.random.get_global_generator",
    "signature": "()",
    "description": "Retrieves the global generator."
  },
  "1755": {
    "name": "learned_unigram_candidate_sampler",
    "module": "tf.random",
    "fullName": "tf.random.learned_unigram_candidate_sampler",
    "signature": "(true_classes, num_true, num_sampled, unique, range_max, seed=None, name=None)",
    "description": "Samples a set of classes from a distribution learned during training."
  },
  "1756": {
    "name": "log_uniform_candidate_sampler",
    "module": "tf.random",
    "fullName": "tf.random.log_uniform_candidate_sampler",
    "signature": "(true_classes, num_true, num_sampled, unique, range_max, seed=None, name=None)",
    "description": "Samples a set of classes using a log-uniform (Zipfian) base distribution."
  },
  "1757": {
    "name": "normal",
    "module": "tf.random",
    "fullName": "tf.random.normal",
    "signature": "(shape, mean=0.0, stddev=1.0, dtype=tf.float32, seed=None, name=None)",
    "description": "Outputs random values from a normal distribution."
  },
  "1758": {
    "name": "poisson",
    "module": "tf.random",
    "fullName": "tf.random.poisson",
    "signature": "(shape, lam, dtype=tf.float32, seed=None, name=None)",
    "description": "Draws `shape` samples from each of the given Poisson distribution(s)."
  },
  "1759": {
    "name": "set_global_generator",
    "module": "tf.random",
    "fullName": "tf.random.set_global_generator",
    "signature": "(generator)",
    "description": "Replaces the global generator with another `Generator` object."
  },
  "1760": {
    "name": "set_seed",
    "module": "tf.random",
    "fullName": "tf.random.set_seed",
    "signature": "(seed)",
    "description": "Sets the global random seed."
  },
  "1761": {
    "name": "shuffle",
    "module": "tf.random",
    "fullName": "tf.random.shuffle",
    "signature": "(value, seed=None, name=None)",
    "description": "Randomly shuffles a tensor along its first dimension."
  },
  "1762": {
    "name": "stateless_binomial",
    "module": "tf.random",
    "fullName": "tf.random.stateless_binomial",
    "signature": "(shape, seed, counts, probs, output_dtype=tf.int32, name=None)",
    "description": "Outputs deterministic pseudorandom values from a binomial distribution."
  },
  "1763": {
    "name": "stateless_categorical",
    "module": "tf.random",
    "fullName": "tf.random.stateless_categorical",
    "signature": "(logits, num_samples, seed, dtype=tf.int64, name=None)",
    "description": "Draws deterministic pseudorandom samples from a categorical distribution."
  },
  "1764": {
    "name": "stateless_gamma",
    "module": "tf.random",
    "fullName": "tf.random.stateless_gamma",
    "signature": "(shape, seed, alpha, beta=None, dtype=tf.float32, name=None)",
    "description": "Outputs deterministic pseudorandom values from a gamma distribution."
  },
  "1765": {
    "name": "stateless_normal",
    "module": "tf.random",
    "fullName": "tf.random.stateless_normal",
    "signature": "(shape, seed, mean=0.0, stddev=1.0, dtype=tf.float32, name=None, alg='auto_select')",
    "description": "Outputs deterministic pseudorandom values from a normal distribution."
  },
  "1766": {
    "name": "stateless_parameterized_truncated_normal",
    "module": "tf.random",
    "fullName": "tf.random.stateless_parameterized_truncated_normal",
    "signature": "(shape, seed, means=0.0, stddevs=1.0, minvals=-2.0, maxvals=2.0, name=None)",
    "description": "Outputs random values from a truncated normal distribution."
  },
  "1767": {
    "name": "stateless_poisson",
    "module": "tf.random",
    "fullName": "tf.random.stateless_poisson",
    "signature": "(shape, seed, lam, dtype=tf.int32, name=None)",
    "description": "Outputs deterministic pseudorandom values from a Poisson distribution."
  },
  "1768": {
    "name": "stateless_truncated_normal",
    "module": "tf.random",
    "fullName": "tf.random.stateless_truncated_normal",
    "signature": "(shape, seed, mean=0.0, stddev=1.0, dtype=tf.float32, name=None, alg='auto_select')",
    "description": "Outputs deterministic pseudorandom values, truncated normally distributed."
  },
  "1769": {
    "name": "stateless_uniform",
    "module": "tf.random",
    "fullName": "tf.random.stateless_uniform",
    "signature": "(shape, seed, minval=0, maxval=None, dtype=tf.float32, name=None, alg='auto_select')",
    "description": "Outputs deterministic pseudorandom values from a uniform distribution."
  },
  "1770": {
    "name": "truncated_normal",
    "module": "tf.random",
    "fullName": "tf.random.truncated_normal",
    "signature": "(shape, mean=0.0, stddev=1.0, dtype=tf.float32, seed=None, name=None)",
    "description": "Outputs random values from a truncated normal distribution."
  },
  "1771": {
    "name": "uniform",
    "module": "tf.random",
    "fullName": "tf.random.uniform",
    "signature": "(shape, minval=0, maxval=None, dtype=tf.float32, seed=None, name=None)",
    "description": "Outputs random values from a uniform distribution."
  },
  "1772": {
    "name": "uniform_candidate_sampler",
    "module": "tf.random",
    "fullName": "tf.random.uniform_candidate_sampler",
    "signature": "(true_classes, num_true, num_sampled, unique, range_max, seed=None, name=None)",
    "description": "Samples a set of classes using a uniform base distribution."
  },
  "1773": {
    "name": "Algorithm",
    "module": "tf.random.experimental",
    "fullName": "tf.random.experimental.Algorithm",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "An enumeration."
  },
  "1774": {
    "name": "Generator",
    "module": "tf.random.experimental",
    "fullName": "tf.random.experimental.Generator",
    "signature": "(copy_from=None, state=None, alg=None)",
    "description": "Random-number generator."
  },
  "1775": {
    "name": "create_rng_state",
    "module": "tf.random.experimental",
    "fullName": "tf.random.experimental.create_rng_state",
    "signature": "(seed, alg)",
    "description": "Creates a RNG state from an integer or a vector."
  },
  "1776": {
    "name": "get_global_generator",
    "module": "tf.random.experimental",
    "fullName": "tf.random.experimental.get_global_generator",
    "signature": "()",
    "description": "Retrieves the global generator."
  },
  "1777": {
    "name": "index_shuffle",
    "module": "tf.random.experimental",
    "fullName": "tf.random.experimental.index_shuffle",
    "signature": "(index, seed, max_index)",
    "description": "Outputs the position of `index` in a permutation of [0, ..., max_index]."
  },
  "1778": {
    "name": "set_global_generator",
    "module": "tf.random.experimental",
    "fullName": "tf.random.experimental.set_global_generator",
    "signature": "(generator)",
    "description": "Replaces the global generator with another `Generator` object."
  },
  "1779": {
    "name": "stateless_fold_in",
    "module": "tf.random.experimental",
    "fullName": "tf.random.experimental.stateless_fold_in",
    "signature": "(seed, data, alg='auto_select')",
    "description": "Folds in data to an RNG seed to form a new RNG seed."
  },
  "1780": {
    "name": "stateless_shuffle",
    "module": "tf.random.experimental",
    "fullName": "tf.random.experimental.stateless_shuffle",
    "signature": "(value, seed, alg='auto_select', name=None)",
    "description": "Randomly and deterministically shuffles a tensor along its first dimension."
  },
  "1781": {
    "name": "stateless_split",
    "module": "tf.random.experimental",
    "fullName": "tf.random.experimental.stateless_split",
    "signature": "(seed, num=2, alg='auto_select')",
    "description": "Splits an RNG seed into `num` new seeds by adding a leading axis."
  },
  "1782": {
    "name": "boolean_mask",
    "module": "tf.ragged",
    "fullName": "tf.ragged.boolean_mask",
    "signature": "(data, mask, name=None)",
    "description": "Applies a boolean mask to `data` without flattening the mask dimensions."
  },
  "1783": {
    "name": "constant",
    "module": "tf.ragged",
    "fullName": "tf.ragged.constant",
    "signature": "(pylist, dtype=None, ragged_rank=None, inner_shape=None, name=None, row_splits_dtype=tf.int64)",
    "description": "Constructs a constant RaggedTensor from a nested Python list."
  },
  "1784": {
    "name": "cross",
    "module": "tf.ragged",
    "fullName": "tf.ragged.cross",
    "signature": "(inputs, name=None)",
    "description": "Generates feature cross from a list of tensors."
  },
  "1785": {
    "name": "cross_hashed",
    "module": "tf.ragged",
    "fullName": "tf.ragged.cross_hashed",
    "signature": "(inputs, num_buckets=0, hash_key=None, name=None)",
    "description": "Generates hashed feature cross from a list of tensors."
  },
  "1786": {
    "name": "map_flat_values",
    "module": "tf.ragged",
    "fullName": "tf.ragged.map_flat_values",
    "signature": "(op, *args, **kwargs)",
    "description": "Applies `op` to the `flat_values` of one or more RaggedTensors."
  },
  "1787": {
    "name": "range",
    "module": "tf.ragged",
    "fullName": "tf.ragged.range",
    "signature": "(starts, limits=None, deltas=1, dtype=None, name=None, row_splits_dtype=tf.int64)",
    "description": "Returns a `RaggedTensor` containing the specified sequences of numbers."
  },
  "1788": {
    "name": "row_splits_to_segment_ids",
    "module": "tf.ragged",
    "fullName": "tf.ragged.row_splits_to_segment_ids",
    "signature": "(splits, name=None, out_type=None)",
    "description": "Generates the segmentation corresponding to a RaggedTensor `row_splits`."
  },
  "1789": {
    "name": "segment_ids_to_row_splits",
    "module": "tf.ragged",
    "fullName": "tf.ragged.segment_ids_to_row_splits",
    "signature": "(segment_ids, num_segments=None, out_type=None, name=None)",
    "description": "Generates the RaggedTensor `row_splits` corresponding to a segmentation."
  },
  "1790": {
    "name": "stack",
    "module": "tf.ragged",
    "fullName": "tf.ragged.stack",
    "signature": "(values: List[Union[tensorflow.python.ops.ragged.ragged_tensor.RaggedTensor, tensorflow.python.ops.ragged.ragged_tensor_value.RaggedTensorValue, tensorflow.python.types.core.Tensor, tensorflow.python.types.core.TensorProtocol, int, float, bool, str, bytes, complex, tuple, list, numpy.ndarray, numpy.generic]], axis=0, name=None)",
    "description": "Stacks a list of rank-`R` tensors into one rank-`(R+1)` `RaggedTensor`."
  },
  "1791": {
    "name": "stack_dynamic_partitions",
    "module": "tf.ragged",
    "fullName": "tf.ragged.stack_dynamic_partitions",
    "signature": "(data, partitions, num_partitions, name=None)",
    "description": "Stacks dynamic partitions of a Tensor or RaggedTensor."
  },
  "1792": {
    "name": "FIFOQueue",
    "module": "tf.queue",
    "fullName": "tf.queue.FIFOQueue",
    "signature": "(capacity, dtypes, shapes=None, names=None, shared_name=None, name='fifo_queue')",
    "description": "A queue implementation that dequeues elements in first-in first-out order."
  },
  "1793": {
    "name": "PaddingFIFOQueue",
    "module": "tf.queue",
    "fullName": "tf.queue.PaddingFIFOQueue",
    "signature": "(capacity, dtypes, shapes, names=None, shared_name=None, name='padding_fifo_queue')",
    "description": "A FIFOQueue that supports batching variable-sized tensors by padding."
  },
  "1794": {
    "name": "PriorityQueue",
    "module": "tf.queue",
    "fullName": "tf.queue.PriorityQueue",
    "signature": "(capacity, types, shapes=None, names=None, shared_name=None, name='priority_queue')",
    "description": "A queue implementation that dequeues elements in prioritized order."
  },
  "1795": {
    "name": "QueueBase",
    "module": "tf.queue",
    "fullName": "tf.queue.QueueBase",
    "signature": "(dtypes, shapes, names, queue_ref)",
    "description": "Base class for queue implementations."
  },
  "1796": {
    "name": "RandomShuffleQueue",
    "module": "tf.queue",
    "fullName": "tf.queue.RandomShuffleQueue",
    "signature": "(capacity, min_after_dequeue, dtypes, shapes=None, names=None, seed=None, shared_name=None, name='random_shuffle_queue')",
    "description": "A queue implementation that dequeues elements in a random order."
  },
  "1797": {
    "name": "dequantize",
    "module": "tf.quantization",
    "fullName": "tf.quantization.dequantize",
    "signature": "(input, min_range, max_range, mode='MIN_COMBINED', name=None, axis=None, narrow_range=False, dtype=tf.float32)",
    "description": "Dequantize the 'input' tensor into a float or bfloat16 Tensor."
  },
  "1798": {
    "name": "fake_quant_with_min_max_args",
    "module": "tf.quantization",
    "fullName": "tf.quantization.fake_quant_with_min_max_args",
    "signature": "(inputs, min=-6, max=6, num_bits=8, narrow_range=False, name=None)",
    "description": "Fake-quantize the 'inputs' tensor, type float to 'outputs' tensor of same type."
  },
  "1799": {
    "name": "fake_quant_with_min_max_args_gradient",
    "module": "tf.quantization",
    "fullName": "tf.quantization.fake_quant_with_min_max_args_gradient",
    "signature": "(gradients, inputs, min=-6, max=6, num_bits=8, narrow_range=False, name=None)",
    "description": "Compute gradients for a FakeQuantWithMinMaxArgs operation."
  },
  "1800": {
    "name": "fake_quant_with_min_max_vars",
    "module": "tf.quantization",
    "fullName": "tf.quantization.fake_quant_with_min_max_vars",
    "signature": "(inputs, min, max, num_bits=8, narrow_range=False, name=None)",
    "description": "Fake-quantize the 'inputs' tensor of type float via global float scalars"
  },
  "1801": {
    "name": "fake_quant_with_min_max_vars_gradient",
    "module": "tf.quantization",
    "fullName": "tf.quantization.fake_quant_with_min_max_vars_gradient",
    "signature": "(gradients, inputs, min, max, num_bits=8, narrow_range=False, name=None)",
    "description": "Compute gradients for a FakeQuantWithMinMaxVars operation."
  },
  "1802": {
    "name": "fake_quant_with_min_max_vars_per_channel",
    "module": "tf.quantization",
    "fullName": "tf.quantization.fake_quant_with_min_max_vars_per_channel",
    "signature": "(inputs, min, max, num_bits=8, narrow_range=False, name=None)",
    "description": "Fake-quantize the 'inputs' tensor of type float via per-channel floats"
  },
  "1803": {
    "name": "fake_quant_with_min_max_vars_per_channel_gradient",
    "module": "tf.quantization",
    "fullName": "tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient",
    "signature": "(gradients, inputs, min, max, num_bits=8, narrow_range=False, name=None)",
    "description": "Compute gradients for a FakeQuantWithMinMaxVarsPerChannel operation."
  },
  "1804": {
    "name": "quantize",
    "module": "tf.quantization",
    "fullName": "tf.quantization.quantize",
    "signature": "(input, min_range, max_range, T, mode='MIN_COMBINED', round_mode='HALF_AWAY_FROM_ZERO', name=None, narrow_range=False, axis=None, ensure_minimum_range=0.01)",
    "description": "Quantize the 'input' tensor of type float to 'output' tensor of type 'T'."
  },
  "1805": {
    "name": "quantize_and_dequantize_v2",
    "module": "tf.quantization",
    "fullName": "tf.quantization.quantize_and_dequantize_v2",
    "signature": "(input, input_min, input_max, signed_input=True, num_bits=8, range_given=False, round_mode='HALF_TO_EVEN', name=None, narrow_range=False, axis=None)",
    "description": "Quantizes then dequantizes a tensor."
  },
  "1806": {
    "name": "quantized_concat",
    "module": "tf.quantization",
    "fullName": "tf.quantization.quantized_concat",
    "signature": "(concat_dim, values, input_mins, input_maxes, name=None)",
    "description": "Concatenates quantized tensors along one dimension."
  },
  "1807": {
    "name": "Profile",
    "module": "tf.profiler.experimental",
    "fullName": "tf.profiler.experimental.Profile",
    "signature": "(logdir, options=None)",
    "description": "Context-manager profile API."
  },
  "1808": {
    "name": "ProfilerOptions",
    "module": "tf.profiler.experimental",
    "fullName": "tf.profiler.experimental.ProfilerOptions",
    "signature": "(host_tracer_level=2, python_tracer_level=0, device_tracer_level=1, delay_ms=None)",
    "description": "Options for finer control over the profiler."
  },
  "1809": {
    "name": "Trace",
    "module": "tf.profiler.experimental",
    "fullName": "tf.profiler.experimental.Trace",
    "signature": "(name, **kwargs)",
    "description": "Context manager that generates a trace event in the profiler."
  },
  "1810": {
    "name": "start",
    "module": "tf.profiler.experimental",
    "fullName": "tf.profiler.experimental.start",
    "signature": "(logdir, options=None)",
    "description": "Start profiling TensorFlow performance."
  },
  "1811": {
    "name": "stop",
    "module": "tf.profiler.experimental",
    "fullName": "tf.profiler.experimental.stop",
    "signature": "(save=True)",
    "description": "Stops the current profiling session."
  },
  "1812": {
    "name": "start",
    "module": "tf.profiler.experimental.server",
    "fullName": "tf.profiler.experimental.server.start",
    "signature": "(port)",
    "description": "Start a profiler grpc server that listens to given port."
  },
  "1813": {
    "name": "monitor",
    "module": "tf.profiler.experimental.client",
    "fullName": "tf.profiler.experimental.client.monitor",
    "signature": "(service_addr, duration_ms, level=1)",
    "description": "Sends grpc requests to profiler server to perform on-demand monitoring."
  },
  "1814": {
    "name": "trace",
    "module": "tf.profiler.experimental.client",
    "fullName": "tf.profiler.experimental.client.trace",
    "signature": "(service_addr, logdir, duration_ms, worker_list='', num_tracing_attempts=3, options=None)",
    "description": "Sends gRPC requests to one or more profiler servers to perform on-demand profiling."
  },
  "1815": {
    "name": "Adadelta",
    "module": "tf.optimizers",
    "fullName": "tf.optimizers.Adadelta",
    "signature": "(learning_rate=0.001, rho=0.95, epsilon=1e-07, name='Adadelta', **kwargs)",
    "description": "Optimizer that implements the Adadelta algorithm."
  },
  "1816": {
    "name": "Adagrad",
    "module": "tf.optimizers",
    "fullName": "tf.optimizers.Adagrad",
    "signature": "(learning_rate=0.001, initial_accumulator_value=0.1, epsilon=1e-07, name='Adagrad', **kwargs)",
    "description": "Optimizer that implements the Adagrad algorithm."
  },
  "1817": {
    "name": "Adam",
    "module": "tf.optimizers",
    "fullName": "tf.optimizers.Adam",
    "signature": "(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, amsgrad=False, name='Adam', **kwargs)",
    "description": "Optimizer that implements the Adam algorithm."
  },
  "1818": {
    "name": "Adamax",
    "module": "tf.optimizers",
    "fullName": "tf.optimizers.Adamax",
    "signature": "(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, name='Adamax', **kwargs)",
    "description": "Optimizer that implements the Adamax algorithm."
  },
  "1819": {
    "name": "Ftrl",
    "module": "tf.optimizers",
    "fullName": "tf.optimizers.Ftrl",
    "signature": "(learning_rate=0.001, learning_rate_power=-0.5, initial_accumulator_value=0.1, l1_regularization_strength=0.0, l2_regularization_strength=0.0, name='Ftrl', l2_shrinkage_regularization_strength=0.0, beta=0.0, **kwargs)",
    "description": "Optimizer that implements the FTRL algorithm."
  },
  "1820": {
    "name": "Nadam",
    "module": "tf.optimizers",
    "fullName": "tf.optimizers.Nadam",
    "signature": "(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, name='Nadam', **kwargs)",
    "description": "Optimizer that implements the NAdam algorithm."
  },
  "1821": {
    "name": "Optimizer",
    "module": "tf.optimizers",
    "fullName": "tf.optimizers.Optimizer",
    "signature": "(name, gradient_aggregator=None, gradient_transformers=None, **kwargs)",
    "description": "Base class for Keras optimizers."
  },
  "1822": {
    "name": "RMSprop",
    "module": "tf.optimizers",
    "fullName": "tf.optimizers.RMSprop",
    "signature": "(learning_rate=0.001, rho=0.9, momentum=0.0, epsilon=1e-07, centered=False, name='RMSprop', **kwargs)",
    "description": "Optimizer that implements the RMSprop algorithm."
  },
  "1823": {
    "name": "SGD",
    "module": "tf.optimizers",
    "fullName": "tf.optimizers.SGD",
    "signature": "(learning_rate=0.01, momentum=0.0, nesterov=False, name='SGD', **kwargs)",
    "description": "Gradient descent (with momentum) optimizer."
  },
  "1824": {
    "name": "deserialize",
    "module": "tf.optimizers",
    "fullName": "tf.optimizers.deserialize",
    "signature": "(config, custom_objects=None, **kwargs)",
    "description": "Inverse of the `serialize` function."
  },
  "1825": {
    "name": "get",
    "module": "tf.optimizers",
    "fullName": "tf.optimizers.get",
    "signature": "(identifier, **kwargs)",
    "description": "Retrieves a Keras Optimizer instance."
  },
  "1826": {
    "name": "serialize",
    "module": "tf.optimizers",
    "fullName": "tf.optimizers.serialize",
    "signature": "(optimizer)",
    "description": "Serialize the optimizer configuration to JSON compatible python dict."
  },
  "1827": {
    "name": "CosineDecay",
    "module": "tf.optimizers.schedules",
    "fullName": "tf.optimizers.schedules.CosineDecay",
    "signature": "(initial_learning_rate, decay_steps, alpha=0.0, name=None)",
    "description": "A LearningRateSchedule that uses a cosine decay schedule."
  },
  "1828": {
    "name": "CosineDecayRestarts",
    "module": "tf.optimizers.schedules",
    "fullName": "tf.optimizers.schedules.CosineDecayRestarts",
    "signature": "(initial_learning_rate, first_decay_steps, t_mul=2.0, m_mul=1.0, alpha=0.0, name=None)",
    "description": "A LearningRateSchedule that uses a cosine decay schedule with restarts."
  },
  "1829": {
    "name": "ExponentialDecay",
    "module": "tf.optimizers.schedules",
    "fullName": "tf.optimizers.schedules.ExponentialDecay",
    "signature": "(initial_learning_rate, decay_steps, decay_rate, staircase=False, name=None)",
    "description": "A LearningRateSchedule that uses an exponential decay schedule."
  },
  "1830": {
    "name": "InverseTimeDecay",
    "module": "tf.optimizers.schedules",
    "fullName": "tf.optimizers.schedules.InverseTimeDecay",
    "signature": "(initial_learning_rate, decay_steps, decay_rate, staircase=False, name=None)",
    "description": "A LearningRateSchedule that uses an inverse time decay schedule."
  },
  "1831": {
    "name": "LearningRateSchedule",
    "module": "tf.optimizers.schedules",
    "fullName": "tf.optimizers.schedules.LearningRateSchedule",
    "signature": "()",
    "description": "The learning rate schedule base class."
  },
  "1832": {
    "name": "PiecewiseConstantDecay",
    "module": "tf.optimizers.schedules",
    "fullName": "tf.optimizers.schedules.PiecewiseConstantDecay",
    "signature": "(boundaries, values, name=None)",
    "description": "A LearningRateSchedule that uses a piecewise constant decay schedule."
  },
  "1833": {
    "name": "PolynomialDecay",
    "module": "tf.optimizers.schedules",
    "fullName": "tf.optimizers.schedules.PolynomialDecay",
    "signature": "(initial_learning_rate, decay_steps, end_learning_rate=0.0001, power=1.0, cycle=False, name=None)",
    "description": "A LearningRateSchedule that uses a polynomial decay schedule."
  },
  "1834": {
    "name": "deserialize",
    "module": "tf.optimizers.schedules",
    "fullName": "tf.optimizers.schedules.deserialize",
    "signature": "(config, custom_objects=None)",
    "description": "Instantiates a `LearningRateSchedule` object from a serialized form."
  },
  "1835": {
    "name": "serialize",
    "module": "tf.optimizers.schedules",
    "fullName": "tf.optimizers.schedules.serialize",
    "signature": "(learning_rate_schedule)",
    "description": "Serializes a `LearningRateSchedule` into a JSON-compatible representation."
  },
  "1836": {
    "name": "Adadelta",
    "module": "tf.optimizers.legacy",
    "fullName": "tf.optimizers.legacy.Adadelta",
    "signature": "(learning_rate=0.001, rho=0.95, epsilon=1e-07, name='Adadelta', **kwargs)",
    "description": "Optimizer that implements the Adadelta algorithm."
  },
  "1837": {
    "name": "Adagrad",
    "module": "tf.optimizers.legacy",
    "fullName": "tf.optimizers.legacy.Adagrad",
    "signature": "(learning_rate=0.001, initial_accumulator_value=0.1, epsilon=1e-07, name='Adagrad', **kwargs)",
    "description": "Optimizer that implements the Adagrad algorithm."
  },
  "1838": {
    "name": "Adam",
    "module": "tf.optimizers.legacy",
    "fullName": "tf.optimizers.legacy.Adam",
    "signature": "(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, amsgrad=False, name='Adam', **kwargs)",
    "description": "Optimizer that implements the Adam algorithm."
  },
  "1839": {
    "name": "Adamax",
    "module": "tf.optimizers.legacy",
    "fullName": "tf.optimizers.legacy.Adamax",
    "signature": "(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, name='Adamax', **kwargs)",
    "description": "Optimizer that implements the Adamax algorithm."
  },
  "1840": {
    "name": "Ftrl",
    "module": "tf.optimizers.legacy",
    "fullName": "tf.optimizers.legacy.Ftrl",
    "signature": "(learning_rate=0.001, learning_rate_power=-0.5, initial_accumulator_value=0.1, l1_regularization_strength=0.0, l2_regularization_strength=0.0, name='Ftrl', l2_shrinkage_regularization_strength=0.0, beta=0.0, **kwargs)",
    "description": "Optimizer that implements the FTRL algorithm."
  },
  "1841": {
    "name": "Nadam",
    "module": "tf.optimizers.legacy",
    "fullName": "tf.optimizers.legacy.Nadam",
    "signature": "(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, name='Nadam', **kwargs)",
    "description": "Optimizer that implements the NAdam algorithm."
  },
  "1842": {
    "name": "Optimizer",
    "module": "tf.optimizers.legacy",
    "fullName": "tf.optimizers.legacy.Optimizer",
    "signature": "(name, gradient_aggregator=None, gradient_transformers=None, **kwargs)",
    "description": "Base class for Keras optimizers."
  },
  "1843": {
    "name": "RMSprop",
    "module": "tf.optimizers.legacy",
    "fullName": "tf.optimizers.legacy.RMSprop",
    "signature": "(learning_rate=0.001, rho=0.9, momentum=0.0, epsilon=1e-07, centered=False, name='RMSprop', **kwargs)",
    "description": "Optimizer that implements the RMSprop algorithm."
  },
  "1844": {
    "name": "SGD",
    "module": "tf.optimizers.legacy",
    "fullName": "tf.optimizers.legacy.SGD",
    "signature": "(learning_rate=0.01, momentum=0.0, nesterov=False, name='SGD', **kwargs)",
    "description": "Gradient descent (with momentum) optimizer."
  },
  "1845": {
    "name": "Adadelta",
    "module": "tf.optimizers.experimental",
    "fullName": "tf.optimizers.experimental.Adadelta",
    "signature": "(learning_rate=0.001, rho=0.95, epsilon=1e-07, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True, name='Adadelta', **kwargs)",
    "description": "Optimizer that implements the Adadelta algorithm."
  },
  "1846": {
    "name": "Adagrad",
    "module": "tf.optimizers.experimental",
    "fullName": "tf.optimizers.experimental.Adagrad",
    "signature": "(learning_rate=0.001, initial_accumulator_value=0.1, epsilon=1e-07, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True, name='Adagrad', **kwargs)",
    "description": "Optimizer that implements the Adagrad algorithm."
  },
  "1847": {
    "name": "Adam",
    "module": "tf.optimizers.experimental",
    "fullName": "tf.optimizers.experimental.Adam",
    "signature": "(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, amsgrad=False, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True, name='Adam', **kwargs)",
    "description": "Optimizer that implements the Adam algorithm."
  },
  "1848": {
    "name": "AdamW",
    "module": "tf.optimizers.experimental",
    "fullName": "tf.optimizers.experimental.AdamW",
    "signature": "(learning_rate=0.001, weight_decay=0.004, beta_1=0.9, beta_2=0.999, epsilon=1e-07, amsgrad=False, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True, name='AdamW', **kwargs)",
    "description": "Optimizer that implements the AdamW algorithm."
  },
  "1849": {
    "name": "Adamax",
    "module": "tf.optimizers.experimental",
    "fullName": "tf.optimizers.experimental.Adamax",
    "signature": "(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True, name='Adamax', **kwargs)",
    "description": "Optimizer that implements the Adamax algorithm."
  },
  "1850": {
    "name": "Ftrl",
    "module": "tf.optimizers.experimental",
    "fullName": "tf.optimizers.experimental.Ftrl",
    "signature": "(learning_rate=0.001, learning_rate_power=-0.5, initial_accumulator_value=0.1, l1_regularization_strength=0.0, l2_regularization_strength=0.0, l2_shrinkage_regularization_strength=0.0, beta=0.0, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True, name='Ftrl', **kwargs)",
    "description": "Optimizer that implements the FTRL algorithm."
  },
  "1851": {
    "name": "Nadam",
    "module": "tf.optimizers.experimental",
    "fullName": "tf.optimizers.experimental.Nadam",
    "signature": "(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True, name='Nadam', **kwargs)",
    "description": "Optimizer that implements the Nadam algorithm."
  },
  "1852": {
    "name": "Optimizer",
    "module": "tf.optimizers.experimental",
    "fullName": "tf.optimizers.experimental.Optimizer",
    "signature": "(name, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True, **kwargs)",
    "description": "Abstract optimizer base class."
  },
  "1853": {
    "name": "RMSprop",
    "module": "tf.optimizers.experimental",
    "fullName": "tf.optimizers.experimental.RMSprop",
    "signature": "(learning_rate=0.001, rho=0.9, momentum=0.0, epsilon=1e-07, centered=False, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=100, jit_compile=True, name='RMSprop', **kwargs)",
    "description": "Optimizer that implements the RMSprop algorithm."
  },
  "1854": {
    "name": "SGD",
    "module": "tf.optimizers.experimental",
    "fullName": "tf.optimizers.experimental.SGD",
    "signature": "(learning_rate=0.01, momentum=0.0, nesterov=False, amsgrad=False, clipnorm=None, clipvalue=None, global_clipnorm=None, use_ema=False, ema_momentum=0.99, ema_overwrite_frequency=None, jit_compile=True, name='SGD', **kwargs)",
    "description": "Gradient descent (with momentum) optimizer."
  },
  "1855": {
    "name": "RNNCellDeviceWrapper",
    "module": "tf.nn",
    "fullName": "tf.nn.RNNCellDeviceWrapper",
    "signature": "(*args, **kwargs)",
    "description": "Operator that ensures an RNNCell runs on a particular device."
  },
  "1856": {
    "name": "RNNCellDropoutWrapper",
    "module": "tf.nn",
    "fullName": "tf.nn.RNNCellDropoutWrapper",
    "signature": "(*args, **kwargs)",
    "description": "Operator adding dropout to inputs and outputs of the given cell."
  },
  "1857": {
    "name": "RNNCellResidualWrapper",
    "module": "tf.nn",
    "fullName": "tf.nn.RNNCellResidualWrapper",
    "signature": "(*args, **kwargs)",
    "description": "RNNCell wrapper that ensures cell inputs are added to the outputs."
  },
  "1858": {
    "name": "all_candidate_sampler",
    "module": "tf.nn",
    "fullName": "tf.nn.all_candidate_sampler",
    "signature": "(true_classes, num_true, num_sampled, unique, seed=None, name=None)",
    "description": "Generate the set of all classes."
  },
  "1859": {
    "name": "approx_max_k",
    "module": "tf.nn",
    "fullName": "tf.nn.approx_max_k",
    "signature": "(operand, k, reduction_dimension=-1, recall_target=0.95, reduction_input_size_override=-1, aggregate_to_topk=True, name=None)",
    "description": "Returns max `k` values and their indices of the input `operand` in an approximate manner."
  },
  "1860": {
    "name": "approx_min_k",
    "module": "tf.nn",
    "fullName": "tf.nn.approx_min_k",
    "signature": "(operand, k, reduction_dimension=-1, recall_target=0.95, reduction_input_size_override=-1, aggregate_to_topk=True, name=None)",
    "description": "Returns min `k` values and their indices of the input `operand` in an approximate manner."
  },
  "1861": {
    "name": "atrous_conv2d",
    "module": "tf.nn",
    "fullName": "tf.nn.atrous_conv2d",
    "signature": "(value, filters, rate, padding, name=None)",
    "description": "Atrous convolution (a.k.a. convolution with holes or dilated convolution)."
  },
  "1862": {
    "name": "atrous_conv2d_transpose",
    "module": "tf.nn",
    "fullName": "tf.nn.atrous_conv2d_transpose",
    "signature": "(value, filters, output_shape, rate, padding, name=None)",
    "description": "The transpose of `atrous_conv2d`."
  },
  "1863": {
    "name": "avg_pool",
    "module": "tf.nn",
    "fullName": "tf.nn.avg_pool",
    "signature": "(input, ksize, strides, padding, data_format=None, name=None)",
    "description": "Performs the avg pooling on the input."
  },
  "1864": {
    "name": "avg_pool1d",
    "module": "tf.nn",
    "fullName": "tf.nn.avg_pool1d",
    "signature": "(input, ksize, strides, padding, data_format='NWC', name=None)",
    "description": "Performs the average pooling on the input."
  },
  "1865": {
    "name": "avg_pool2d",
    "module": "tf.nn",
    "fullName": "tf.nn.avg_pool2d",
    "signature": "(input, ksize, strides, padding, data_format='NHWC', name=None)",
    "description": "Performs the average pooling on the input."
  },
  "1866": {
    "name": "avg_pool3d",
    "module": "tf.nn",
    "fullName": "tf.nn.avg_pool3d",
    "signature": "(input, ksize, strides, padding, data_format='NDHWC', name=None)",
    "description": "Performs the average pooling on the input."
  },
  "1867": {
    "name": "batch_normalization",
    "module": "tf.nn",
    "fullName": "tf.nn.batch_normalization",
    "signature": "(x, mean, variance, offset, scale, variance_epsilon, name=None)",
    "description": "Batch normalization."
  },
  "1868": {
    "name": "bias_add",
    "module": "tf.nn",
    "fullName": "tf.nn.bias_add",
    "signature": "(value, bias, data_format=None, name=None)",
    "description": "Adds `bias` to `value`."
  },
  "1869": {
    "name": "collapse_repeated",
    "module": "tf.nn",
    "fullName": "tf.nn.collapse_repeated",
    "signature": "(labels, seq_length, name=None)",
    "description": "Merge repeated labels into single labels."
  },
  "1870": {
    "name": "compute_accidental_hits",
    "module": "tf.nn",
    "fullName": "tf.nn.compute_accidental_hits",
    "signature": "(true_classes, sampled_candidates, num_true, seed=None, name=None)",
    "description": "Compute the position ids in `sampled_candidates` matching `true_classes`."
  },
  "1871": {
    "name": "compute_average_loss",
    "module": "tf.nn",
    "fullName": "tf.nn.compute_average_loss",
    "signature": "(per_example_loss, sample_weight=None, global_batch_size=None)",
    "description": "Scales per-example losses with sample_weights and computes their average."
  },
  "1872": {
    "name": "conv1d",
    "module": "tf.nn",
    "fullName": "tf.nn.conv1d",
    "signature": "(input, filters, stride, padding, data_format='NWC', dilations=None, name=None)",
    "description": "Computes a 1-D convolution given 3-D input and filter tensors."
  },
  "1873": {
    "name": "conv1d_transpose",
    "module": "tf.nn",
    "fullName": "tf.nn.conv1d_transpose",
    "signature": "(input, filters, output_shape, strides, padding='SAME', data_format='NWC', dilations=None, name=None)",
    "description": "The transpose of `conv1d`."
  },
  "1874": {
    "name": "conv2d",
    "module": "tf.nn",
    "fullName": "tf.nn.conv2d",
    "signature": "(input, filters, strides, padding, data_format='NHWC', dilations=None, name=None)",
    "description": "Computes a 2-D convolution given `input` and 4-D `filters` tensors."
  },
  "1875": {
    "name": "conv2d_transpose",
    "module": "tf.nn",
    "fullName": "tf.nn.conv2d_transpose",
    "signature": "(input, filters, output_shape, strides, padding='SAME', data_format='NHWC', dilations=None, name=None)",
    "description": "The transpose of `conv2d`."
  },
  "1876": {
    "name": "conv3d",
    "module": "tf.nn",
    "fullName": "tf.nn.conv3d",
    "signature": "(input, filters, strides, padding, data_format='NDHWC', dilations=None, name=None)",
    "description": "Computes a 3-D convolution given 5-D `input` and `filters` tensors."
  },
  "1877": {
    "name": "conv3d_transpose",
    "module": "tf.nn",
    "fullName": "tf.nn.conv3d_transpose",
    "signature": "(input, filters, output_shape, strides, padding='SAME', data_format='NDHWC', dilations=None, name=None)",
    "description": "The transpose of `conv3d`."
  },
  "1878": {
    "name": "conv_transpose",
    "module": "tf.nn",
    "fullName": "tf.nn.conv_transpose",
    "signature": "(input, filters, output_shape, strides, padding='SAME', data_format=None, dilations=None, name=None)",
    "description": "The transpose of `convolution`."
  },
  "1879": {
    "name": "convolution",
    "module": "tf.nn",
    "fullName": "tf.nn.convolution",
    "signature": "(input, filters, strides=None, padding='VALID', data_format=None, dilations=None, name=None)",
    "description": "Computes sums of N-D convolutions (actually cross-correlation)."
  },
  "1880": {
    "name": "crelu",
    "module": "tf.nn",
    "fullName": "tf.nn.crelu",
    "signature": "(features, axis=-1, name=None)",
    "description": "Computes Concatenated ReLU."
  },
  "1881": {
    "name": "ctc_beam_search_decoder",
    "module": "tf.nn",
    "fullName": "tf.nn.ctc_beam_search_decoder",
    "signature": "(inputs, sequence_length, beam_width=100, top_paths=1)",
    "description": "Performs beam search decoding on the logits given in input."
  },
  "1882": {
    "name": "ctc_greedy_decoder",
    "module": "tf.nn",
    "fullName": "tf.nn.ctc_greedy_decoder",
    "signature": "(inputs, sequence_length, merge_repeated=True, blank_index=None)",
    "description": "Performs greedy decoding on the logits given in input (best path)."
  },
  "1883": {
    "name": "ctc_loss",
    "module": "tf.nn",
    "fullName": "tf.nn.ctc_loss",
    "signature": "(labels, logits, label_length, logit_length, logits_time_major=True, unique=None, blank_index=None, name=None)",
    "description": "Computes CTC (Connectionist Temporal Classification) loss."
  },
  "1884": {
    "name": "ctc_unique_labels",
    "module": "tf.nn",
    "fullName": "tf.nn.ctc_unique_labels",
    "signature": "(labels, name=None)",
    "description": "Get unique labels and indices for batched labels for `tf.nn.ctc_loss`."
  },
  "1885": {
    "name": "depth_to_space",
    "module": "tf.nn",
    "fullName": "tf.nn.depth_to_space",
    "signature": "(input, block_size, data_format='NHWC', name=None)",
    "description": "DepthToSpace for tensors of type T."
  },
  "1886": {
    "name": "depthwise_conv2d",
    "module": "tf.nn",
    "fullName": "tf.nn.depthwise_conv2d",
    "signature": "(input, filter, strides, padding, data_format=None, dilations=None, name=None)",
    "description": "Depthwise 2-D convolution."
  },
  "1887": {
    "name": "depthwise_conv2d_backprop_filter",
    "module": "tf.nn",
    "fullName": "tf.nn.depthwise_conv2d_backprop_filter",
    "signature": "(input, filter_sizes, out_backprop, strides, padding, data_format='NHWC', dilations=[1, 1, 1, 1], name=None)",
    "description": "Computes the gradients of depthwise convolution with respect to the filter."
  },
  "1888": {
    "name": "depthwise_conv2d_backprop_input",
    "module": "tf.nn",
    "fullName": "tf.nn.depthwise_conv2d_backprop_input",
    "signature": "(input_sizes, filter, out_backprop, strides, padding, data_format='NHWC', dilations=[1, 1, 1, 1], name=None)",
    "description": "Computes the gradients of depthwise convolution with respect to the input."
  },
  "1889": {
    "name": "dilation2d",
    "module": "tf.nn",
    "fullName": "tf.nn.dilation2d",
    "signature": "(input, filters, strides, padding, data_format, dilations, name=None)",
    "description": "Computes the grayscale dilation of 4-D `input` and 3-D `filters` tensors."
  },
  "1890": {
    "name": "elu",
    "module": "tf.nn",
    "fullName": "tf.nn.elu",
    "signature": "(features, name=None)",
    "description": "Computes the exponential linear function."
  },
  "1891": {
    "name": "embedding_lookup",
    "module": "tf.nn",
    "fullName": "tf.nn.embedding_lookup",
    "signature": "(params, ids, max_norm=None, name=None)",
    "description": "Looks up embeddings for the given `ids` from a list of tensors."
  },
  "1892": {
    "name": "embedding_lookup_sparse",
    "module": "tf.nn",
    "fullName": "tf.nn.embedding_lookup_sparse",
    "signature": "(params, sp_ids, sp_weights, combiner=None, max_norm=None, name=None)",
    "description": "Looks up embeddings for the given ids and weights from a list of tensors."
  },
  "1893": {
    "name": "erosion2d",
    "module": "tf.nn",
    "fullName": "tf.nn.erosion2d",
    "signature": "(value, filters, strides, padding, data_format, dilations, name=None)",
    "description": "Computes the grayscale erosion of 4-D `value` and 3-D `filters` tensors."
  },
  "1894": {
    "name": "fixed_unigram_candidate_sampler",
    "module": "tf.nn",
    "fullName": "tf.nn.fixed_unigram_candidate_sampler",
    "signature": "(true_classes, num_true, num_sampled, unique, range_max, vocab_file='', distortion=1.0, num_reserved_ids=0, num_shards=1, shard=0, unigrams=(), seed=None, name=None)",
    "description": "Samples a set of classes using the provided (fixed) base distribution."
  },
  "1895": {
    "name": "fractional_avg_pool",
    "module": "tf.nn",
    "fullName": "tf.nn.fractional_avg_pool",
    "signature": "(value, pooling_ratio, pseudo_random=False, overlapping=False, seed=0, name=None)",
    "description": "Performs fractional average pooling on the input."
  },
  "1896": {
    "name": "fractional_max_pool",
    "module": "tf.nn",
    "fullName": "tf.nn.fractional_max_pool",
    "signature": "(value, pooling_ratio, pseudo_random=False, overlapping=False, seed=0, name=None)",
    "description": "Performs fractional max pooling on the input."
  },
  "1897": {
    "name": "gelu",
    "module": "tf.nn",
    "fullName": "tf.nn.gelu",
    "signature": "(features, approximate=False, name=None)",
    "description": "Compute the Gaussian Error Linear Unit (GELU) activation function."
  },
  "1898": {
    "name": "in_top_k",
    "module": "tf.nn",
    "fullName": "tf.nn.in_top_k",
    "signature": "(targets, predictions, k, name=None)",
    "description": "Says whether the targets are in the top `K` predictions."
  },
  "1899": {
    "name": "isotonic_regression",
    "module": "tf.nn",
    "fullName": "tf.nn.isotonic_regression",
    "signature": "(inputs, decreasing=True, axis=-1)",
    "description": "Solves isotonic regression problems along the given axis."
  },
  "1900": {
    "name": "l2_loss",
    "module": "tf.nn",
    "fullName": "tf.nn.l2_loss",
    "signature": "(t, name=None)",
    "description": "L2 Loss."
  },
  "1901": {
    "name": "leaky_relu",
    "module": "tf.nn",
    "fullName": "tf.nn.leaky_relu",
    "signature": "(features, alpha=0.2, name=None)",
    "description": "Compute the Leaky ReLU activation function."
  },
  "1902": {
    "name": "learned_unigram_candidate_sampler",
    "module": "tf.nn",
    "fullName": "tf.nn.learned_unigram_candidate_sampler",
    "signature": "(true_classes, num_true, num_sampled, unique, range_max, seed=None, name=None)",
    "description": "Samples a set of classes from a distribution learned during training."
  },
  "1903": {
    "name": "local_response_normalization",
    "module": "tf.nn",
    "fullName": "tf.nn.local_response_normalization",
    "signature": "(input, depth_radius=5, bias=1, alpha=1, beta=0.5, name=None)",
    "description": "Local Response Normalization."
  },
  "1904": {
    "name": "log_poisson_loss",
    "module": "tf.nn",
    "fullName": "tf.nn.log_poisson_loss",
    "signature": "(targets, log_input, compute_full_loss=False, name=None)",
    "description": "Computes log Poisson loss given `log_input`."
  },
  "1905": {
    "name": "log_softmax",
    "module": "tf.nn",
    "fullName": "tf.nn.log_softmax",
    "signature": "(logits, axis=None, name=None)",
    "description": "Computes log softmax activations."
  },
  "1906": {
    "name": "lrn",
    "module": "tf.nn",
    "fullName": "tf.nn.lrn",
    "signature": "(input, depth_radius=5, bias=1, alpha=1, beta=0.5, name=None)",
    "description": "Local Response Normalization."
  },
  "1907": {
    "name": "max_pool",
    "module": "tf.nn",
    "fullName": "tf.nn.max_pool",
    "signature": "(input, ksize, strides, padding, data_format=None, name=None)",
    "description": "Performs max pooling on the input."
  },
  "1908": {
    "name": "max_pool1d",
    "module": "tf.nn",
    "fullName": "tf.nn.max_pool1d",
    "signature": "(input, ksize, strides, padding, data_format='NWC', name=None)",
    "description": "Performs the max pooling on the input."
  },
  "1909": {
    "name": "max_pool2d",
    "module": "tf.nn",
    "fullName": "tf.nn.max_pool2d",
    "signature": "(input, ksize, strides, padding, data_format='NHWC', name=None)",
    "description": "Performs max pooling on 2D spatial data such as images."
  },
  "1910": {
    "name": "max_pool3d",
    "module": "tf.nn",
    "fullName": "tf.nn.max_pool3d",
    "signature": "(input, ksize, strides, padding, data_format='NDHWC', name=None)",
    "description": "Performs the max pooling on the input."
  },
  "1911": {
    "name": "max_pool_with_argmax",
    "module": "tf.nn",
    "fullName": "tf.nn.max_pool_with_argmax",
    "signature": "(input, ksize, strides, padding, data_format='NHWC', output_dtype=tf.int64, include_batch_in_index=False, name=None)",
    "description": "Performs max pooling on the input and outputs both max values and indices."
  },
  "1912": {
    "name": "moments",
    "module": "tf.nn",
    "fullName": "tf.nn.moments",
    "signature": "(x, axes, shift=None, keepdims=False, name=None)",
    "description": "Calculates the mean and variance of `x`."
  },
  "1913": {
    "name": "nce_loss",
    "module": "tf.nn",
    "fullName": "tf.nn.nce_loss",
    "signature": "(weights, biases, labels, inputs, num_sampled, num_classes, num_true=1, sampled_values=None, remove_accidental_hits=False, name='nce_loss')",
    "description": "Computes and returns the noise-contrastive estimation training loss."
  },
  "1914": {
    "name": "normalize_moments",
    "module": "tf.nn",
    "fullName": "tf.nn.normalize_moments",
    "signature": "(counts, mean_ss, variance_ss, shift, name=None)",
    "description": "Calculate the mean and variance of based on the sufficient statistics."
  },
  "1915": {
    "name": "pool",
    "module": "tf.nn",
    "fullName": "tf.nn.pool",
    "signature": "(input, window_shape, pooling_type, strides=None, padding='VALID', data_format=None, dilations=None, name=None)",
    "description": "Performs an N-D pooling operation."
  },
  "1916": {
    "name": "relu",
    "module": "tf.nn",
    "fullName": "tf.nn.relu",
    "signature": "(features, name=None)",
    "description": "Computes rectified linear: `max(features, 0)`."
  },
  "1917": {
    "name": "relu6",
    "module": "tf.nn",
    "fullName": "tf.nn.relu6",
    "signature": "(features, name=None)",
    "description": "Computes Rectified Linear 6: `min(max(features, 0), 6)`."
  },
  "1918": {
    "name": "safe_embedding_lookup_sparse",
    "module": "tf.nn",
    "fullName": "tf.nn.safe_embedding_lookup_sparse",
    "signature": "(embedding_weights, sparse_ids, sparse_weights=None, combiner='mean', default_id=None, max_norm=None, name=None)",
    "description": "Lookup embedding results, accounting for invalid IDs and empty features."
  },
  "1919": {
    "name": "sampled_softmax_loss",
    "module": "tf.nn",
    "fullName": "tf.nn.sampled_softmax_loss",
    "signature": "(weights, biases, labels, inputs, num_sampled, num_classes, num_true=1, sampled_values=None, remove_accidental_hits=True, seed=None, name='sampled_softmax_loss')",
    "description": "Computes and returns the sampled softmax training loss."
  },
  "1920": {
    "name": "scale_regularization_loss",
    "module": "tf.nn",
    "fullName": "tf.nn.scale_regularization_loss",
    "signature": "(regularization_loss)",
    "description": "Scales the sum of the given regularization losses by number of replicas."
  },
  "1921": {
    "name": "selu",
    "module": "tf.nn",
    "fullName": "tf.nn.selu",
    "signature": "(features, name=None)",
    "description": "Computes scaled exponential linear: `scale * alpha * (exp(features) - 1)`"
  },
  "1922": {
    "name": "separable_conv2d",
    "module": "tf.nn",
    "fullName": "tf.nn.separable_conv2d",
    "signature": "(input, depthwise_filter, pointwise_filter, strides, padding, data_format=None, dilations=None, name=None)",
    "description": "2-D convolution with separable filters."
  },
  "1923": {
    "name": "sigmoid",
    "module": "tf.nn",
    "fullName": "tf.nn.sigmoid",
    "signature": "(x, name=None)",
    "description": "Computes sigmoid of `x` element-wise."
  },
  "1924": {
    "name": "sigmoid_cross_entropy_with_logits",
    "module": "tf.nn",
    "fullName": "tf.nn.sigmoid_cross_entropy_with_logits",
    "signature": "(labels=None, logits=None, name=None)",
    "description": "Computes sigmoid cross entropy given `logits`."
  },
  "1925": {
    "name": "silu",
    "module": "tf.nn",
    "fullName": "tf.nn.silu",
    "signature": "(features, beta=1.0)",
    "description": "Computes the SiLU or Swish activation function: `x * sigmoid(beta * x)`."
  },
  "1926": {
    "name": "softmax",
    "module": "tf.nn",
    "fullName": "tf.nn.softmax",
    "signature": "(logits, axis=None, name=None)",
    "description": "Computes softmax activations."
  },
  "1927": {
    "name": "softmax_cross_entropy_with_logits",
    "module": "tf.nn",
    "fullName": "tf.nn.softmax_cross_entropy_with_logits",
    "signature": "(labels, logits, axis=-1, name=None)",
    "description": "Computes softmax cross entropy between `logits` and `labels`."
  },
  "1928": {
    "name": "softplus",
    "module": "tf.nn",
    "fullName": "tf.nn.softplus",
    "signature": "(features, name=None)",
    "description": "Computes elementwise softplus: `softplus(x) = log(exp(x) + 1)`."
  },
  "1929": {
    "name": "softsign",
    "module": "tf.nn",
    "fullName": "tf.nn.softsign",
    "signature": "(features, name=None)",
    "description": "Computes softsign: `features / (abs(features) + 1)`."
  },
  "1930": {
    "name": "space_to_batch",
    "module": "tf.nn",
    "fullName": "tf.nn.space_to_batch",
    "signature": "(input, block_shape, paddings, name=None)",
    "description": "SpaceToBatch for N-D tensors of type T."
  },
  "1931": {
    "name": "space_to_depth",
    "module": "tf.nn",
    "fullName": "tf.nn.space_to_depth",
    "signature": "(input, block_size, data_format='NHWC', name=None)",
    "description": "SpaceToDepth for tensors of type T."
  },
  "1932": {
    "name": "sparse_softmax_cross_entropy_with_logits",
    "module": "tf.nn",
    "fullName": "tf.nn.sparse_softmax_cross_entropy_with_logits",
    "signature": "(labels, logits, name=None)",
    "description": "Computes sparse softmax cross entropy between `logits` and `labels`."
  },
  "1933": {
    "name": "sufficient_statistics",
    "module": "tf.nn",
    "fullName": "tf.nn.sufficient_statistics",
    "signature": "(x, axes, shift=None, keepdims=False, name=None)",
    "description": "Calculate the sufficient statistics for the mean and variance of `x`."
  },
  "1934": {
    "name": "swish",
    "module": "tf.nn",
    "fullName": "tf.nn.swish",
    "signature": "(features, beta=1.0)",
    "description": "Computes the SiLU or Swish activation function: `x * sigmoid(beta * x)`."
  },
  "1935": {
    "name": "tanh",
    "module": "tf.nn",
    "fullName": "tf.nn.tanh",
    "signature": "(x, name=None)",
    "description": "Computes hyperbolic tangent of `x` element-wise."
  },
  "1936": {
    "name": "top_k",
    "module": "tf.nn",
    "fullName": "tf.nn.top_k",
    "signature": "(input, k=1, sorted=True, name=None)",
    "description": "Finds values and indices of the `k` largest entries for the last dimension."
  },
  "1937": {
    "name": "weighted_cross_entropy_with_logits",
    "module": "tf.nn",
    "fullName": "tf.nn.weighted_cross_entropy_with_logits",
    "signature": "(labels, logits, pos_weight, name=None)",
    "description": "Computes a weighted cross entropy."
  },
  "1938": {
    "name": "weighted_moments",
    "module": "tf.nn",
    "fullName": "tf.nn.weighted_moments",
    "signature": "(x, axes, frequency_weights, keepdims=False, name=None)",
    "description": "Returns the frequency-weighted mean and variance of `x`."
  },
  "1939": {
    "name": "with_space_to_batch",
    "module": "tf.nn",
    "fullName": "tf.nn.with_space_to_batch",
    "signature": "(input, dilation_rate, padding, op, filter_shape=None, spatial_dims=None, data_format=None)",
    "description": "Performs `op` on the space-to-batch representation of `input`."
  },
  "1940": {
    "name": "zero_fraction",
    "module": "tf.nn",
    "fullName": "tf.nn.zero_fraction",
    "signature": "(value, name=None)",
    "description": "Returns the fraction of zeros in `value`."
  },
  "1941": {
    "name": "assert_same_structure",
    "module": "tf.nest",
    "fullName": "tf.nest.assert_same_structure",
    "signature": "(nest1, nest2, check_types=True, expand_composites=False)",
    "description": "Asserts that two structures are nested in the same way."
  },
  "1942": {
    "name": "flatten",
    "module": "tf.nest",
    "fullName": "tf.nest.flatten",
    "signature": "(structure, expand_composites=False)",
    "description": "Returns a flat list from a given structure."
  },
  "1943": {
    "name": "is_nested",
    "module": "tf.nest",
    "fullName": "tf.nest.is_nested",
    "signature": "(seq)",
    "description": "Returns true if its input is a nested structure."
  },
  "1944": {
    "name": "map_structure",
    "module": "tf.nest",
    "fullName": "tf.nest.map_structure",
    "signature": "(func, *structure, **kwargs)",
    "description": "Creates a new structure by applying `func` to each atom in `structure`."
  },
  "1945": {
    "name": "pack_sequence_as",
    "module": "tf.nest",
    "fullName": "tf.nest.pack_sequence_as",
    "signature": "(structure, flat_sequence, expand_composites=False)",
    "description": "Returns a given flattened sequence packed into a given structure."
  },
  "1946": {
    "name": "convert_function",
    "module": "tf.mlir.experimental",
    "fullName": "tf.mlir.experimental.convert_function",
    "signature": "(concrete_function, pass_pipeline='tf-standard-pipeline', show_debug_info=False)",
    "description": "Import a ConcreteFunction and convert it to a textual MLIR module."
  },
  "1947": {
    "name": "convert_graph_def",
    "module": "tf.mlir.experimental",
    "fullName": "tf.mlir.experimental.convert_graph_def",
    "signature": "(graph_def, pass_pipeline='tf-standard-pipeline', show_debug_info=False)",
    "description": "Import a GraphDef and convert it to a textual MLIR module."
  },
  "1948": {
    "name": "AUC",
    "module": "tf.metrics",
    "fullName": "tf.metrics.AUC",
    "signature": "(num_thresholds=200, curve='ROC', summation_method='interpolation', name=None, dtype=None, thresholds=None, multi_label=False, num_labels=None, label_weights=None, from_logits=False)",
    "description": "Approximates the AUC (Area under the curve) of the ROC or PR curves."
  },
  "1949": {
    "name": "Accuracy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.Accuracy",
    "signature": "(name='accuracy', dtype=None)",
    "description": "Calculates how often predictions equal labels."
  },
  "1950": {
    "name": "BinaryAccuracy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.BinaryAccuracy",
    "signature": "(name='binary_accuracy', dtype=None, threshold=0.5)",
    "description": "Calculates how often predictions match binary labels."
  },
  "1951": {
    "name": "BinaryCrossentropy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.BinaryCrossentropy",
    "signature": "(name='binary_crossentropy', dtype=None, from_logits=False, label_smoothing=0)",
    "description": "Computes the crossentropy metric between the labels and predictions."
  },
  "1952": {
    "name": "BinaryIoU",
    "module": "tf.metrics",
    "fullName": "tf.metrics.BinaryIoU",
    "signature": "(target_class_ids: Union[List[int], Tuple[int, ...]] = (0, 1), threshold=0.5, name=None, dtype=None)",
    "description": "Computes the Intersection-Over-Union metric for class 0 and/or 1."
  },
  "1953": {
    "name": "CategoricalAccuracy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.CategoricalAccuracy",
    "signature": "(name='categorical_accuracy', dtype=None)",
    "description": "Calculates how often predictions match one-hot labels."
  },
  "1954": {
    "name": "CategoricalCrossentropy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.CategoricalCrossentropy",
    "signature": "(name='categorical_crossentropy', dtype=None, from_logits=False, label_smoothing=0, axis=-1)",
    "description": "Computes the crossentropy metric between the labels and predictions."
  },
  "1955": {
    "name": "CategoricalHinge",
    "module": "tf.metrics",
    "fullName": "tf.metrics.CategoricalHinge",
    "signature": "(name='categorical_hinge', dtype=None)",
    "description": "Computes the categorical hinge metric between `y_true` and `y_pred`."
  },
  "1956": {
    "name": "CosineSimilarity",
    "module": "tf.metrics",
    "fullName": "tf.metrics.CosineSimilarity",
    "signature": "(name='cosine_similarity', dtype=None, axis=-1)",
    "description": "Computes the cosine similarity between the labels and predictions."
  },
  "1957": {
    "name": "FalseNegatives",
    "module": "tf.metrics",
    "fullName": "tf.metrics.FalseNegatives",
    "signature": "(thresholds=None, name=None, dtype=None)",
    "description": "Calculates the number of false negatives."
  },
  "1958": {
    "name": "FalsePositives",
    "module": "tf.metrics",
    "fullName": "tf.metrics.FalsePositives",
    "signature": "(thresholds=None, name=None, dtype=None)",
    "description": "Calculates the number of false positives."
  },
  "1959": {
    "name": "Hinge",
    "module": "tf.metrics",
    "fullName": "tf.metrics.Hinge",
    "signature": "(name='hinge', dtype=None)",
    "description": "Computes the hinge metric between `y_true` and `y_pred`."
  },
  "1960": {
    "name": "IoU",
    "module": "tf.metrics",
    "fullName": "tf.metrics.IoU",
    "signature": "(num_classes: int, target_class_ids: Union[List[int], Tuple[int, ...]], name: Optional[str] = None, dtype: Union[str, tensorflow.python.framework.dtypes.DType, NoneType] = None, ignore_class: Optional[int] = None, sparse_y_true: bool = True, sparse_y_pred: bool = True, axis: int = -1)",
    "description": "Computes the Intersection-Over-Union metric for specific target classes."
  },
  "1961": {
    "name": "KLD",
    "module": "tf.metrics",
    "fullName": "tf.metrics.KLD",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "1962": {
    "name": "KLDivergence",
    "module": "tf.metrics",
    "fullName": "tf.metrics.KLDivergence",
    "signature": "(name='kullback_leibler_divergence', dtype=None)",
    "description": "Computes Kullback-Leibler divergence metric between `y_true` and"
  },
  "1963": {
    "name": "LogCoshError",
    "module": "tf.metrics",
    "fullName": "tf.metrics.LogCoshError",
    "signature": "(name='logcosh', dtype=None)",
    "description": "Computes the logarithm of the hyperbolic cosine of the prediction error."
  },
  "1964": {
    "name": "MAE",
    "module": "tf.metrics",
    "fullName": "tf.metrics.MAE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute error between labels and predictions."
  },
  "1965": {
    "name": "MAPE",
    "module": "tf.metrics",
    "fullName": "tf.metrics.MAPE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute percentage error between `y_true` and `y_pred`."
  },
  "1966": {
    "name": "MSE",
    "module": "tf.metrics",
    "fullName": "tf.metrics.MSE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared error between labels and predictions."
  },
  "1967": {
    "name": "MSLE",
    "module": "tf.metrics",
    "fullName": "tf.metrics.MSLE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared logarithmic error between `y_true` and `y_pred`."
  },
  "1968": {
    "name": "Mean",
    "module": "tf.metrics",
    "fullName": "tf.metrics.Mean",
    "signature": "(name='mean', dtype=None)",
    "description": "Computes the (weighted) mean of the given values."
  },
  "1969": {
    "name": "MeanAbsoluteError",
    "module": "tf.metrics",
    "fullName": "tf.metrics.MeanAbsoluteError",
    "signature": "(name='mean_absolute_error', dtype=None)",
    "description": "Computes the mean absolute error between the labels and predictions."
  },
  "1970": {
    "name": "MeanAbsolutePercentageError",
    "module": "tf.metrics",
    "fullName": "tf.metrics.MeanAbsolutePercentageError",
    "signature": "(name='mean_absolute_percentage_error', dtype=None)",
    "description": "Computes the mean absolute percentage error between `y_true` and"
  },
  "1971": {
    "name": "MeanIoU",
    "module": "tf.metrics",
    "fullName": "tf.metrics.MeanIoU",
    "signature": "(num_classes: int, name: Optional[str] = None, dtype: Union[str, tensorflow.python.framework.dtypes.DType, NoneType] = None, ignore_class: Optional[int] = None, sparse_y_true: bool = True, sparse_y_pred: bool = True, axis: int = -1)",
    "description": "Computes the mean Intersection-Over-Union metric."
  },
  "1972": {
    "name": "MeanMetricWrapper",
    "module": "tf.metrics",
    "fullName": "tf.metrics.MeanMetricWrapper",
    "signature": "(fn, name=None, dtype=None, **kwargs)",
    "description": "Wraps a stateless metric function with the Mean metric."
  },
  "1973": {
    "name": "MeanRelativeError",
    "module": "tf.metrics",
    "fullName": "tf.metrics.MeanRelativeError",
    "signature": "(normalizer, name=None, dtype=None)",
    "description": "Computes the mean relative error by normalizing with the given values."
  },
  "1974": {
    "name": "MeanSquaredError",
    "module": "tf.metrics",
    "fullName": "tf.metrics.MeanSquaredError",
    "signature": "(name='mean_squared_error', dtype=None)",
    "description": "Computes the mean squared error between `y_true` and `y_pred`."
  },
  "1975": {
    "name": "MeanSquaredLogarithmicError",
    "module": "tf.metrics",
    "fullName": "tf.metrics.MeanSquaredLogarithmicError",
    "signature": "(name='mean_squared_logarithmic_error', dtype=None)",
    "description": "Computes the mean squared logarithmic error between `y_true` and"
  },
  "1976": {
    "name": "MeanTensor",
    "module": "tf.metrics",
    "fullName": "tf.metrics.MeanTensor",
    "signature": "(name='mean_tensor', dtype=None, shape=None)",
    "description": "Computes the element-wise (weighted) mean of the given tensors."
  },
  "1977": {
    "name": "Metric",
    "module": "tf.metrics",
    "fullName": "tf.metrics.Metric",
    "signature": "(*args, **kwargs)",
    "description": "Encapsulates metric logic and state."
  },
  "1978": {
    "name": "OneHotIoU",
    "module": "tf.metrics",
    "fullName": "tf.metrics.OneHotIoU",
    "signature": "(num_classes: int, target_class_ids: Union[List[int], Tuple[int, ...]], name=None, dtype=None, ignore_class: Optional[int] = None, sparse_y_pred: bool = False, axis: int = -1)",
    "description": "Computes the Intersection-Over-Union metric for one-hot encoded labels."
  },
  "1979": {
    "name": "OneHotMeanIoU",
    "module": "tf.metrics",
    "fullName": "tf.metrics.OneHotMeanIoU",
    "signature": "(num_classes: int, name: str = None, dtype: Union[str, tensorflow.python.framework.dtypes.DType, NoneType] = None, ignore_class: Optional[int] = None, sparse_y_pred: bool = False, axis: int = -1)",
    "description": "Computes mean Intersection-Over-Union metric for one-hot encoded labels."
  },
  "1980": {
    "name": "Poisson",
    "module": "tf.metrics",
    "fullName": "tf.metrics.Poisson",
    "signature": "(name='poisson', dtype=None)",
    "description": "Computes the Poisson metric between `y_true` and `y_pred`."
  },
  "1981": {
    "name": "Precision",
    "module": "tf.metrics",
    "fullName": "tf.metrics.Precision",
    "signature": "(thresholds=None, top_k=None, class_id=None, name=None, dtype=None)",
    "description": "Computes the precision of the predictions with respect to the labels."
  },
  "1982": {
    "name": "PrecisionAtRecall",
    "module": "tf.metrics",
    "fullName": "tf.metrics.PrecisionAtRecall",
    "signature": "(recall, num_thresholds=200, class_id=None, name=None, dtype=None)",
    "description": "Computes best precision where recall is >= specified value."
  },
  "1983": {
    "name": "Recall",
    "module": "tf.metrics",
    "fullName": "tf.metrics.Recall",
    "signature": "(thresholds=None, top_k=None, class_id=None, name=None, dtype=None)",
    "description": "Computes the recall of the predictions with respect to the labels."
  },
  "1984": {
    "name": "RecallAtPrecision",
    "module": "tf.metrics",
    "fullName": "tf.metrics.RecallAtPrecision",
    "signature": "(precision, num_thresholds=200, class_id=None, name=None, dtype=None)",
    "description": "Computes best recall where precision is >= specified value."
  },
  "1985": {
    "name": "RootMeanSquaredError",
    "module": "tf.metrics",
    "fullName": "tf.metrics.RootMeanSquaredError",
    "signature": "(name='root_mean_squared_error', dtype=None)",
    "description": "Computes root mean squared error metric between `y_true` and `y_pred`."
  },
  "1986": {
    "name": "SensitivityAtSpecificity",
    "module": "tf.metrics",
    "fullName": "tf.metrics.SensitivityAtSpecificity",
    "signature": "(specificity, num_thresholds=200, class_id=None, name=None, dtype=None)",
    "description": "Computes best sensitivity where specificity is >= specified value."
  },
  "1987": {
    "name": "SparseCategoricalAccuracy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.SparseCategoricalAccuracy",
    "signature": "(name='sparse_categorical_accuracy', dtype=None)",
    "description": "Calculates how often predictions match integer labels."
  },
  "1988": {
    "name": "SparseCategoricalCrossentropy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.SparseCategoricalCrossentropy",
    "signature": "(name: str = 'sparse_categorical_crossentropy', dtype: Union[str, tensorflow.python.framework.dtypes.DType, NoneType] = None, from_logits: bool = False, ignore_class: Optional[int] = None, axis: int = -1)",
    "description": "Computes the crossentropy metric between the labels and predictions."
  },
  "1989": {
    "name": "SparseTopKCategoricalAccuracy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.SparseTopKCategoricalAccuracy",
    "signature": "(k=5, name='sparse_top_k_categorical_accuracy', dtype=None)",
    "description": "Computes how often integer targets are in the top `K` predictions."
  },
  "1990": {
    "name": "SpecificityAtSensitivity",
    "module": "tf.metrics",
    "fullName": "tf.metrics.SpecificityAtSensitivity",
    "signature": "(sensitivity, num_thresholds=200, class_id=None, name=None, dtype=None)",
    "description": "Computes best specificity where sensitivity is >= specified value."
  },
  "1991": {
    "name": "SquaredHinge",
    "module": "tf.metrics",
    "fullName": "tf.metrics.SquaredHinge",
    "signature": "(name='squared_hinge', dtype=None)",
    "description": "Computes the squared hinge metric between `y_true` and `y_pred`."
  },
  "1992": {
    "name": "Sum",
    "module": "tf.metrics",
    "fullName": "tf.metrics.Sum",
    "signature": "(name='sum', dtype=None)",
    "description": "Computes the (weighted) sum of the given values."
  },
  "1993": {
    "name": "TopKCategoricalAccuracy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.TopKCategoricalAccuracy",
    "signature": "(k=5, name='top_k_categorical_accuracy', dtype=None)",
    "description": "Computes how often targets are in the top `K` predictions."
  },
  "1994": {
    "name": "TrueNegatives",
    "module": "tf.metrics",
    "fullName": "tf.metrics.TrueNegatives",
    "signature": "(thresholds=None, name=None, dtype=None)",
    "description": "Calculates the number of true negatives."
  },
  "1995": {
    "name": "TruePositives",
    "module": "tf.metrics",
    "fullName": "tf.metrics.TruePositives",
    "signature": "(thresholds=None, name=None, dtype=None)",
    "description": "Calculates the number of true positives."
  },
  "1996": {
    "name": "binary_accuracy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.binary_accuracy",
    "signature": "(y_true, y_pred, threshold=0.5)",
    "description": "Calculates how often predictions match binary labels."
  },
  "1997": {
    "name": "binary_crossentropy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.binary_crossentropy",
    "signature": "(y_true, y_pred, from_logits=False, label_smoothing=0.0, axis=-1)",
    "description": "Computes the binary crossentropy loss."
  },
  "1998": {
    "name": "binary_focal_crossentropy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.binary_focal_crossentropy",
    "signature": "(y_true, y_pred, apply_class_balancing=False, alpha=0.25, gamma=2.0, from_logits=False, label_smoothing=0.0, axis=-1)",
    "description": "Computes the binary focal crossentropy loss."
  },
  "1999": {
    "name": "categorical_accuracy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.categorical_accuracy",
    "signature": "(y_true, y_pred)",
    "description": "Calculates how often predictions match one-hot labels."
  },
  "2000": {
    "name": "categorical_crossentropy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.categorical_crossentropy",
    "signature": "(y_true, y_pred, from_logits=False, label_smoothing=0.0, axis=-1)",
    "description": "Computes the categorical crossentropy loss."
  },
  "2001": {
    "name": "deserialize",
    "module": "tf.metrics",
    "fullName": "tf.metrics.deserialize",
    "signature": "(config, custom_objects=None)",
    "description": "Deserializes a serialized metric class/function instance."
  },
  "2002": {
    "name": "get",
    "module": "tf.metrics",
    "fullName": "tf.metrics.get",
    "signature": "(identifier)",
    "description": "Retrieves a Keras metric as a `function`/`Metric` class instance."
  },
  "2003": {
    "name": "hinge",
    "module": "tf.metrics",
    "fullName": "tf.metrics.hinge",
    "signature": "(y_true, y_pred)",
    "description": "Computes the hinge loss between `y_true` and `y_pred`."
  },
  "2004": {
    "name": "kl_divergence",
    "module": "tf.metrics",
    "fullName": "tf.metrics.kl_divergence",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2005": {
    "name": "kld",
    "module": "tf.metrics",
    "fullName": "tf.metrics.kld",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2006": {
    "name": "kullback_leibler_divergence",
    "module": "tf.metrics",
    "fullName": "tf.metrics.kullback_leibler_divergence",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2007": {
    "name": "log_cosh",
    "module": "tf.metrics",
    "fullName": "tf.metrics.log_cosh",
    "signature": "(y_true, y_pred)",
    "description": "Logarithm of the hyperbolic cosine of the prediction error."
  },
  "2008": {
    "name": "logcosh",
    "module": "tf.metrics",
    "fullName": "tf.metrics.logcosh",
    "signature": "(y_true, y_pred)",
    "description": "Logarithm of the hyperbolic cosine of the prediction error."
  },
  "2009": {
    "name": "mae",
    "module": "tf.metrics",
    "fullName": "tf.metrics.mae",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute error between labels and predictions."
  },
  "2010": {
    "name": "mape",
    "module": "tf.metrics",
    "fullName": "tf.metrics.mape",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute percentage error between `y_true` and `y_pred`."
  },
  "2011": {
    "name": "mean_absolute_error",
    "module": "tf.metrics",
    "fullName": "tf.metrics.mean_absolute_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute error between labels and predictions."
  },
  "2012": {
    "name": "mean_absolute_percentage_error",
    "module": "tf.metrics",
    "fullName": "tf.metrics.mean_absolute_percentage_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute percentage error between `y_true` and `y_pred`."
  },
  "2013": {
    "name": "mean_squared_error",
    "module": "tf.metrics",
    "fullName": "tf.metrics.mean_squared_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared error between labels and predictions."
  },
  "2014": {
    "name": "mean_squared_logarithmic_error",
    "module": "tf.metrics",
    "fullName": "tf.metrics.mean_squared_logarithmic_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared logarithmic error between `y_true` and `y_pred`."
  },
  "2015": {
    "name": "mse",
    "module": "tf.metrics",
    "fullName": "tf.metrics.mse",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared error between labels and predictions."
  },
  "2016": {
    "name": "msle",
    "module": "tf.metrics",
    "fullName": "tf.metrics.msle",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared logarithmic error between `y_true` and `y_pred`."
  },
  "2017": {
    "name": "poisson",
    "module": "tf.metrics",
    "fullName": "tf.metrics.poisson",
    "signature": "(y_true, y_pred)",
    "description": "Computes the Poisson loss between y_true and y_pred."
  },
  "2018": {
    "name": "serialize",
    "module": "tf.metrics",
    "fullName": "tf.metrics.serialize",
    "signature": "(metric)",
    "description": "Serializes metric function or `Metric` instance."
  },
  "2019": {
    "name": "sparse_categorical_accuracy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.sparse_categorical_accuracy",
    "signature": "(y_true, y_pred)",
    "description": "Calculates how often predictions match integer labels."
  },
  "2020": {
    "name": "sparse_categorical_crossentropy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.sparse_categorical_crossentropy",
    "signature": "(y_true, y_pred, from_logits=False, axis=-1, ignore_class=None)",
    "description": "Computes the sparse categorical crossentropy loss."
  },
  "2021": {
    "name": "sparse_top_k_categorical_accuracy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.sparse_top_k_categorical_accuracy",
    "signature": "(y_true, y_pred, k=5)",
    "description": "Computes how often integer targets are in the top `K` predictions."
  },
  "2022": {
    "name": "squared_hinge",
    "module": "tf.metrics",
    "fullName": "tf.metrics.squared_hinge",
    "signature": "(y_true, y_pred)",
    "description": "Computes the squared hinge loss between `y_true` and `y_pred`."
  },
  "2023": {
    "name": "top_k_categorical_accuracy",
    "module": "tf.metrics",
    "fullName": "tf.metrics.top_k_categorical_accuracy",
    "signature": "(y_true, y_pred, k=5)",
    "description": "Computes how often targets are in the top `K` predictions."
  },
  "2024": {
    "name": "abs",
    "module": "tf.math",
    "fullName": "tf.math.abs",
    "signature": "(x, name=None)",
    "description": "Computes the absolute value of a tensor."
  },
  "2025": {
    "name": "accumulate_n",
    "module": "tf.math",
    "fullName": "tf.math.accumulate_n",
    "signature": "(inputs, shape=None, tensor_dtype=None, name=None)",
    "description": "Returns the element-wise sum of a list of tensors."
  },
  "2026": {
    "name": "acos",
    "module": "tf.math",
    "fullName": "tf.math.acos",
    "signature": "(x, name=None)",
    "description": "Computes acos of x element-wise."
  },
  "2027": {
    "name": "acosh",
    "module": "tf.math",
    "fullName": "tf.math.acosh",
    "signature": "(x, name=None)",
    "description": "Computes inverse hyperbolic cosine of x element-wise."
  },
  "2028": {
    "name": "add",
    "module": "tf.math",
    "fullName": "tf.math.add",
    "signature": "(x, y, name=None)",
    "description": "Returns x + y element-wise."
  },
  "2029": {
    "name": "add_n",
    "module": "tf.math",
    "fullName": "tf.math.add_n",
    "signature": "(inputs, name=None)",
    "description": "Adds all input tensors element-wise."
  },
  "2030": {
    "name": "angle",
    "module": "tf.math",
    "fullName": "tf.math.angle",
    "signature": "(input, name=None)",
    "description": "Returns the element-wise argument of a complex (or real) tensor."
  },
  "2031": {
    "name": "approx_max_k",
    "module": "tf.math",
    "fullName": "tf.math.approx_max_k",
    "signature": "(operand, k, reduction_dimension=-1, recall_target=0.95, reduction_input_size_override=-1, aggregate_to_topk=True, name=None)",
    "description": "Returns max `k` values and their indices of the input `operand` in an approximate manner."
  },
  "2032": {
    "name": "approx_min_k",
    "module": "tf.math",
    "fullName": "tf.math.approx_min_k",
    "signature": "(operand, k, reduction_dimension=-1, recall_target=0.95, reduction_input_size_override=-1, aggregate_to_topk=True, name=None)",
    "description": "Returns min `k` values and their indices of the input `operand` in an approximate manner."
  },
  "2033": {
    "name": "argmax",
    "module": "tf.math",
    "fullName": "tf.math.argmax",
    "signature": "(input, axis=None, output_type=tf.int64, name=None)",
    "description": "Returns the index with the largest value across axes of a tensor."
  },
  "2034": {
    "name": "argmin",
    "module": "tf.math",
    "fullName": "tf.math.argmin",
    "signature": "(input, axis=None, output_type=tf.int64, name=None)",
    "description": "Returns the index with the smallest value across axes of a tensor."
  },
  "2035": {
    "name": "asin",
    "module": "tf.math",
    "fullName": "tf.math.asin",
    "signature": "(x, name=None)",
    "description": "Computes the trignometric inverse sine of x element-wise."
  },
  "2036": {
    "name": "asinh",
    "module": "tf.math",
    "fullName": "tf.math.asinh",
    "signature": "(x, name=None)",
    "description": "Computes inverse hyperbolic sine of x element-wise."
  },
  "2037": {
    "name": "atan",
    "module": "tf.math",
    "fullName": "tf.math.atan",
    "signature": "(x, name=None)",
    "description": "Computes the trignometric inverse tangent of x element-wise."
  },
  "2038": {
    "name": "atan2",
    "module": "tf.math",
    "fullName": "tf.math.atan2",
    "signature": "(y, x, name=None)",
    "description": "Computes arctangent of `y/x` element-wise, respecting signs of the arguments."
  },
  "2039": {
    "name": "atanh",
    "module": "tf.math",
    "fullName": "tf.math.atanh",
    "signature": "(x, name=None)",
    "description": "Computes inverse hyperbolic tangent of x element-wise."
  },
  "2040": {
    "name": "bessel_i0",
    "module": "tf.math",
    "fullName": "tf.math.bessel_i0",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel i0 function of `x` element-wise."
  },
  "2041": {
    "name": "bessel_i0e",
    "module": "tf.math",
    "fullName": "tf.math.bessel_i0e",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel i0e function of `x` element-wise."
  },
  "2042": {
    "name": "bessel_i1",
    "module": "tf.math",
    "fullName": "tf.math.bessel_i1",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel i1 function of `x` element-wise."
  },
  "2043": {
    "name": "bessel_i1e",
    "module": "tf.math",
    "fullName": "tf.math.bessel_i1e",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel i1e function of `x` element-wise."
  },
  "2044": {
    "name": "betainc",
    "module": "tf.math",
    "fullName": "tf.math.betainc",
    "signature": "(a, b, x, name=None)",
    "description": "Compute the regularized incomplete beta integral \\\\(I_x(a, b)\\\\)."
  },
  "2045": {
    "name": "bincount",
    "module": "tf.math",
    "fullName": "tf.math.bincount",
    "signature": "(arr, weights=None, minlength=None, maxlength=None, dtype=tf.int32, name=None, axis=None, binary_output=False)",
    "description": "Counts the number of occurrences of each value in an integer array."
  },
  "2046": {
    "name": "ceil",
    "module": "tf.math",
    "fullName": "tf.math.ceil",
    "signature": "(x, name=None)",
    "description": "Return the ceiling of the input, element-wise."
  },
  "2047": {
    "name": "confusion_matrix",
    "module": "tf.math",
    "fullName": "tf.math.confusion_matrix",
    "signature": "(labels, predictions, num_classes=None, weights=None, dtype=tf.int32, name=None)",
    "description": "Computes the confusion matrix from predictions and labels."
  },
  "2048": {
    "name": "conj",
    "module": "tf.math",
    "fullName": "tf.math.conj",
    "signature": "(x, name=None)",
    "description": "Returns the complex conjugate of a complex number."
  },
  "2049": {
    "name": "cos",
    "module": "tf.math",
    "fullName": "tf.math.cos",
    "signature": "(x, name=None)",
    "description": "Computes cos of x element-wise."
  },
  "2050": {
    "name": "cosh",
    "module": "tf.math",
    "fullName": "tf.math.cosh",
    "signature": "(x, name=None)",
    "description": "Computes hyperbolic cosine of x element-wise."
  },
  "2051": {
    "name": "count_nonzero",
    "module": "tf.math",
    "fullName": "tf.math.count_nonzero",
    "signature": "(input, axis=None, keepdims=None, dtype=tf.int64, name=None)",
    "description": "Computes number of nonzero elements across dimensions of a tensor."
  },
  "2052": {
    "name": "cumprod",
    "module": "tf.math",
    "fullName": "tf.math.cumprod",
    "signature": "(x, axis=0, exclusive=False, reverse=False, name=None)",
    "description": "Compute the cumulative product of the tensor `x` along `axis`."
  },
  "2053": {
    "name": "cumsum",
    "module": "tf.math",
    "fullName": "tf.math.cumsum",
    "signature": "(x, axis=0, exclusive=False, reverse=False, name=None)",
    "description": "Compute the cumulative sum of the tensor `x` along `axis`."
  },
  "2054": {
    "name": "cumulative_logsumexp",
    "module": "tf.math",
    "fullName": "tf.math.cumulative_logsumexp",
    "signature": "(x, axis=0, exclusive=False, reverse=False, name=None)",
    "description": "Compute the cumulative log-sum-exp of the tensor `x` along `axis`."
  },
  "2055": {
    "name": "digamma",
    "module": "tf.math",
    "fullName": "tf.math.digamma",
    "signature": "(x, name=None)",
    "description": "Computes Psi, the derivative of Lgamma (the log of the absolute value of"
  },
  "2056": {
    "name": "divide",
    "module": "tf.math",
    "fullName": "tf.math.divide",
    "signature": "(x, y, name=None)",
    "description": "Computes Python style division of `x` by `y`."
  },
  "2057": {
    "name": "divide_no_nan",
    "module": "tf.math",
    "fullName": "tf.math.divide_no_nan",
    "signature": "(x, y, name=None)",
    "description": "Computes a safe divide which returns 0 if `y` (denominator) is zero."
  },
  "2058": {
    "name": "equal",
    "module": "tf.math",
    "fullName": "tf.math.equal",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x == y) element-wise."
  },
  "2059": {
    "name": "erf",
    "module": "tf.math",
    "fullName": "tf.math.erf",
    "signature": "(x, name=None)",
    "description": "Computes the [Gauss error function](https://en.wikipedia.org/wiki/Error_function) of `x` element-wise. In statistics, for non-negative values of $x$, the error function has the following interpretation: for a random variable $Y$ that is normally distributed with mean 0 and variance $1/\\sqrt{2}$, $erf(x)$ is the probability that $Y$ falls in the range $[\u2212x, x]$."
  },
  "2060": {
    "name": "erfc",
    "module": "tf.math",
    "fullName": "tf.math.erfc",
    "signature": "(x, name=None)",
    "description": "Computes the complementary error function of `x` element-wise."
  },
  "2061": {
    "name": "erfcinv",
    "module": "tf.math",
    "fullName": "tf.math.erfcinv",
    "signature": "(x, name=None)",
    "description": "Computes the inverse of complementary error function."
  },
  "2062": {
    "name": "erfinv",
    "module": "tf.math",
    "fullName": "tf.math.erfinv",
    "signature": "(x, name=None)",
    "description": "Compute inverse error function."
  },
  "2063": {
    "name": "exp",
    "module": "tf.math",
    "fullName": "tf.math.exp",
    "signature": "(x, name=None)",
    "description": "Computes exponential of x element-wise.  \\\\(y = e^x\\\\)."
  },
  "2064": {
    "name": "expm1",
    "module": "tf.math",
    "fullName": "tf.math.expm1",
    "signature": "(x, name=None)",
    "description": "Computes `exp(x) - 1` element-wise."
  },
  "2065": {
    "name": "floor",
    "module": "tf.math",
    "fullName": "tf.math.floor",
    "signature": "(x, name=None)",
    "description": "Returns element-wise largest integer not greater than x."
  },
  "2066": {
    "name": "floordiv",
    "module": "tf.math",
    "fullName": "tf.math.floordiv",
    "signature": "(x, y, name=None)",
    "description": "Divides `x / y` elementwise, rounding toward the most negative integer."
  },
  "2067": {
    "name": "floormod",
    "module": "tf.math",
    "fullName": "tf.math.floormod",
    "signature": "(x, y, name=None)",
    "description": "Returns element-wise remainder of division. When `x < 0` xor `y < 0` is"
  },
  "2068": {
    "name": "greater",
    "module": "tf.math",
    "fullName": "tf.math.greater",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x > y) element-wise."
  },
  "2069": {
    "name": "greater_equal",
    "module": "tf.math",
    "fullName": "tf.math.greater_equal",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x >= y) element-wise."
  },
  "2070": {
    "name": "igamma",
    "module": "tf.math",
    "fullName": "tf.math.igamma",
    "signature": "(a, x, name=None)",
    "description": "Compute the lower regularized incomplete Gamma function `P(a, x)`."
  },
  "2071": {
    "name": "igammac",
    "module": "tf.math",
    "fullName": "tf.math.igammac",
    "signature": "(a, x, name=None)",
    "description": "Compute the upper regularized incomplete Gamma function `Q(a, x)`."
  },
  "2072": {
    "name": "imag",
    "module": "tf.math",
    "fullName": "tf.math.imag",
    "signature": "(input, name=None)",
    "description": "Returns the imaginary part of a complex (or real) tensor."
  },
  "2073": {
    "name": "in_top_k",
    "module": "tf.math",
    "fullName": "tf.math.in_top_k",
    "signature": "(targets, predictions, k, name=None)",
    "description": "Says whether the targets are in the top `K` predictions."
  },
  "2074": {
    "name": "invert_permutation",
    "module": "tf.math",
    "fullName": "tf.math.invert_permutation",
    "signature": "(x, name=None)",
    "description": "Computes the inverse permutation of a tensor."
  },
  "2075": {
    "name": "is_finite",
    "module": "tf.math",
    "fullName": "tf.math.is_finite",
    "signature": "(x, name=None)",
    "description": "Returns which elements of x are finite."
  },
  "2076": {
    "name": "is_inf",
    "module": "tf.math",
    "fullName": "tf.math.is_inf",
    "signature": "(x, name=None)",
    "description": "Returns which elements of x are Inf."
  },
  "2077": {
    "name": "is_nan",
    "module": "tf.math",
    "fullName": "tf.math.is_nan",
    "signature": "(x, name=None)",
    "description": "Returns which elements of x are NaN."
  },
  "2078": {
    "name": "is_non_decreasing",
    "module": "tf.math",
    "fullName": "tf.math.is_non_decreasing",
    "signature": "(x, name=None)",
    "description": "Returns `True` if `x` is non-decreasing."
  },
  "2079": {
    "name": "is_strictly_increasing",
    "module": "tf.math",
    "fullName": "tf.math.is_strictly_increasing",
    "signature": "(x, name=None)",
    "description": "Returns `True` if `x` is strictly increasing."
  },
  "2080": {
    "name": "lbeta",
    "module": "tf.math",
    "fullName": "tf.math.lbeta",
    "signature": "(x, name=None)",
    "description": "Computes \\\\(ln(|Beta(x)|)\\\\), reducing along the last dimension."
  },
  "2081": {
    "name": "less",
    "module": "tf.math",
    "fullName": "tf.math.less",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x < y) element-wise."
  },
  "2082": {
    "name": "less_equal",
    "module": "tf.math",
    "fullName": "tf.math.less_equal",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x <= y) element-wise."
  },
  "2083": {
    "name": "lgamma",
    "module": "tf.math",
    "fullName": "tf.math.lgamma",
    "signature": "(x, name=None)",
    "description": "Computes the log of the absolute value of `Gamma(x)` element-wise."
  },
  "2084": {
    "name": "log",
    "module": "tf.math",
    "fullName": "tf.math.log",
    "signature": "(x, name=None)",
    "description": "Computes natural logarithm of x element-wise."
  },
  "2085": {
    "name": "log1p",
    "module": "tf.math",
    "fullName": "tf.math.log1p",
    "signature": "(x, name=None)",
    "description": "Computes natural logarithm of (1 + x) element-wise."
  },
  "2086": {
    "name": "log_sigmoid",
    "module": "tf.math",
    "fullName": "tf.math.log_sigmoid",
    "signature": "(x, name=None)",
    "description": "Computes log sigmoid of `x` element-wise."
  },
  "2087": {
    "name": "log_softmax",
    "module": "tf.math",
    "fullName": "tf.math.log_softmax",
    "signature": "(logits, axis=None, name=None)",
    "description": "Computes log softmax activations."
  },
  "2088": {
    "name": "logical_and",
    "module": "tf.math",
    "fullName": "tf.math.logical_and",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of x AND y element-wise."
  },
  "2089": {
    "name": "logical_not",
    "module": "tf.math",
    "fullName": "tf.math.logical_not",
    "signature": "(x, name=None)",
    "description": "Returns the truth value of `NOT x` element-wise."
  },
  "2090": {
    "name": "logical_or",
    "module": "tf.math",
    "fullName": "tf.math.logical_or",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of x OR y element-wise."
  },
  "2091": {
    "name": "logical_xor",
    "module": "tf.math",
    "fullName": "tf.math.logical_xor",
    "signature": "(x, y, name='LogicalXor')",
    "description": "Logical XOR function."
  },
  "2092": {
    "name": "maximum",
    "module": "tf.math",
    "fullName": "tf.math.maximum",
    "signature": "(x, y, name=None)",
    "description": "Returns the max of x and y (i.e. x > y ? x : y) element-wise."
  },
  "2093": {
    "name": "minimum",
    "module": "tf.math",
    "fullName": "tf.math.minimum",
    "signature": "(x, y, name=None)",
    "description": "Returns the min of x and y (i.e. x < y ? x : y) element-wise."
  },
  "2094": {
    "name": "mod",
    "module": "tf.math",
    "fullName": "tf.math.mod",
    "signature": "(x, y, name=None)",
    "description": "Returns element-wise remainder of division. When `x < 0` xor `y < 0` is"
  },
  "2095": {
    "name": "multiply",
    "module": "tf.math",
    "fullName": "tf.math.multiply",
    "signature": "(x, y, name=None)",
    "description": "Returns an element-wise x * y."
  },
  "2096": {
    "name": "multiply_no_nan",
    "module": "tf.math",
    "fullName": "tf.math.multiply_no_nan",
    "signature": "(x, y, name=None)",
    "description": "Computes the product of x and y and returns 0 if the y is zero, even if x is NaN or infinite."
  },
  "2097": {
    "name": "ndtri",
    "module": "tf.math",
    "fullName": "tf.math.ndtri",
    "signature": "(x, name=None)",
    "description": "Compute quantile of Standard Normal."
  },
  "2098": {
    "name": "negative",
    "module": "tf.math",
    "fullName": "tf.math.negative",
    "signature": "(x, name=None)",
    "description": "Computes numerical negative value element-wise."
  },
  "2099": {
    "name": "nextafter",
    "module": "tf.math",
    "fullName": "tf.math.nextafter",
    "signature": "(x1, x2, name=None)",
    "description": "Returns the next representable value of `x1` in the direction of `x2`, element-wise."
  },
  "2100": {
    "name": "not_equal",
    "module": "tf.math",
    "fullName": "tf.math.not_equal",
    "signature": "(x, y, name=None)",
    "description": "Returns the truth value of (x != y) element-wise."
  },
  "2101": {
    "name": "polygamma",
    "module": "tf.math",
    "fullName": "tf.math.polygamma",
    "signature": "(a, x, name=None)",
    "description": "Compute the polygamma function \\\\(\\psi^{(n)}(x)\\\\)."
  },
  "2102": {
    "name": "polyval",
    "module": "tf.math",
    "fullName": "tf.math.polyval",
    "signature": "(coeffs, x, name=None)",
    "description": "Computes the elementwise value of a polynomial."
  },
  "2103": {
    "name": "pow",
    "module": "tf.math",
    "fullName": "tf.math.pow",
    "signature": "(x, y, name=None)",
    "description": "Computes the power of one value to another."
  },
  "2104": {
    "name": "real",
    "module": "tf.math",
    "fullName": "tf.math.real",
    "signature": "(input, name=None)",
    "description": "Returns the real part of a complex (or real) tensor."
  },
  "2105": {
    "name": "reciprocal",
    "module": "tf.math",
    "fullName": "tf.math.reciprocal",
    "signature": "(x, name=None)",
    "description": "Computes the reciprocal of x element-wise."
  },
  "2106": {
    "name": "reciprocal_no_nan",
    "module": "tf.math",
    "fullName": "tf.math.reciprocal_no_nan",
    "signature": "(x, name=None)",
    "description": "Performs a safe reciprocal operation, element wise."
  },
  "2107": {
    "name": "reduce_all",
    "module": "tf.math",
    "fullName": "tf.math.reduce_all",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes `tf.math.logical_and` of elements across dimensions of a tensor."
  },
  "2108": {
    "name": "reduce_any",
    "module": "tf.math",
    "fullName": "tf.math.reduce_any",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes `tf.math.logical_or` of elements across dimensions of a tensor."
  },
  "2109": {
    "name": "reduce_euclidean_norm",
    "module": "tf.math",
    "fullName": "tf.math.reduce_euclidean_norm",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes the Euclidean norm of elements across dimensions of a tensor."
  },
  "2110": {
    "name": "reduce_logsumexp",
    "module": "tf.math",
    "fullName": "tf.math.reduce_logsumexp",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes log(sum(exp(elements across dimensions of a tensor)))."
  },
  "2111": {
    "name": "reduce_max",
    "module": "tf.math",
    "fullName": "tf.math.reduce_max",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes `tf.math.maximum` of elements across dimensions of a tensor."
  },
  "2112": {
    "name": "reduce_mean",
    "module": "tf.math",
    "fullName": "tf.math.reduce_mean",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes the mean of elements across dimensions of a tensor."
  },
  "2113": {
    "name": "reduce_min",
    "module": "tf.math",
    "fullName": "tf.math.reduce_min",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes the `tf.math.minimum` of elements across dimensions of a tensor."
  },
  "2114": {
    "name": "reduce_prod",
    "module": "tf.math",
    "fullName": "tf.math.reduce_prod",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes `tf.math.multiply` of elements across dimensions of a tensor."
  },
  "2115": {
    "name": "reduce_std",
    "module": "tf.math",
    "fullName": "tf.math.reduce_std",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes the standard deviation of elements across dimensions of a tensor."
  },
  "2116": {
    "name": "reduce_sum",
    "module": "tf.math",
    "fullName": "tf.math.reduce_sum",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes the sum of elements across dimensions of a tensor."
  },
  "2117": {
    "name": "reduce_variance",
    "module": "tf.math",
    "fullName": "tf.math.reduce_variance",
    "signature": "(input_tensor, axis=None, keepdims=False, name=None)",
    "description": "Computes the variance of elements across dimensions of a tensor."
  },
  "2118": {
    "name": "rint",
    "module": "tf.math",
    "fullName": "tf.math.rint",
    "signature": "(x, name=None)",
    "description": "Returns element-wise integer closest to x."
  },
  "2119": {
    "name": "round",
    "module": "tf.math",
    "fullName": "tf.math.round",
    "signature": "(x, name=None)",
    "description": "Rounds the values of a tensor to the nearest integer, element-wise."
  },
  "2120": {
    "name": "rsqrt",
    "module": "tf.math",
    "fullName": "tf.math.rsqrt",
    "signature": "(x, name=None)",
    "description": "Computes reciprocal of square root of x element-wise."
  },
  "2121": {
    "name": "scalar_mul",
    "module": "tf.math",
    "fullName": "tf.math.scalar_mul",
    "signature": "(scalar, x, name=None)",
    "description": "Multiplies a scalar times a `Tensor` or `IndexedSlices` object."
  },
  "2122": {
    "name": "segment_max",
    "module": "tf.math",
    "fullName": "tf.math.segment_max",
    "signature": "(data, segment_ids, name=None)",
    "description": "Computes the maximum along segments of a tensor."
  },
  "2123": {
    "name": "segment_mean",
    "module": "tf.math",
    "fullName": "tf.math.segment_mean",
    "signature": "(data, segment_ids, name=None)",
    "description": "Computes the mean along segments of a tensor."
  },
  "2124": {
    "name": "segment_min",
    "module": "tf.math",
    "fullName": "tf.math.segment_min",
    "signature": "(data, segment_ids, name=None)",
    "description": "Computes the minimum along segments of a tensor."
  },
  "2125": {
    "name": "segment_prod",
    "module": "tf.math",
    "fullName": "tf.math.segment_prod",
    "signature": "(data, segment_ids, name=None)",
    "description": "Computes the product along segments of a tensor."
  },
  "2126": {
    "name": "segment_sum",
    "module": "tf.math",
    "fullName": "tf.math.segment_sum",
    "signature": "(data, segment_ids, name=None)",
    "description": "Computes the sum along segments of a tensor."
  },
  "2127": {
    "name": "sigmoid",
    "module": "tf.math",
    "fullName": "tf.math.sigmoid",
    "signature": "(x, name=None)",
    "description": "Computes sigmoid of `x` element-wise."
  },
  "2128": {
    "name": "sign",
    "module": "tf.math",
    "fullName": "tf.math.sign",
    "signature": "(x, name=None)",
    "description": "Returns an element-wise indication of the sign of a number."
  },
  "2129": {
    "name": "sin",
    "module": "tf.math",
    "fullName": "tf.math.sin",
    "signature": "(x, name=None)",
    "description": "Computes sine of x element-wise."
  },
  "2130": {
    "name": "sinh",
    "module": "tf.math",
    "fullName": "tf.math.sinh",
    "signature": "(x, name=None)",
    "description": "Computes hyperbolic sine of x element-wise."
  },
  "2131": {
    "name": "sobol_sample",
    "module": "tf.math",
    "fullName": "tf.math.sobol_sample",
    "signature": "(dim, num_results, skip=0, dtype=tf.float32, name=None)",
    "description": "Generates points from the Sobol sequence."
  },
  "2132": {
    "name": "softmax",
    "module": "tf.math",
    "fullName": "tf.math.softmax",
    "signature": "(logits, axis=None, name=None)",
    "description": "Computes softmax activations."
  },
  "2133": {
    "name": "softplus",
    "module": "tf.math",
    "fullName": "tf.math.softplus",
    "signature": "(features, name=None)",
    "description": "Computes elementwise softplus: `softplus(x) = log(exp(x) + 1)`."
  },
  "2134": {
    "name": "softsign",
    "module": "tf.math",
    "fullName": "tf.math.softsign",
    "signature": "(features, name=None)",
    "description": "Computes softsign: `features / (abs(features) + 1)`."
  },
  "2135": {
    "name": "sqrt",
    "module": "tf.math",
    "fullName": "tf.math.sqrt",
    "signature": "(x, name=None)",
    "description": "Computes element-wise square root of the input tensor."
  },
  "2136": {
    "name": "square",
    "module": "tf.math",
    "fullName": "tf.math.square",
    "signature": "(x, name=None)",
    "description": "Computes square of x element-wise."
  },
  "2137": {
    "name": "squared_difference",
    "module": "tf.math",
    "fullName": "tf.math.squared_difference",
    "signature": "(x, y, name=None)",
    "description": "Returns conj(x - y)(x - y) element-wise."
  },
  "2138": {
    "name": "subtract",
    "module": "tf.math",
    "fullName": "tf.math.subtract",
    "signature": "(x, y, name=None)",
    "description": "Returns x - y element-wise."
  },
  "2139": {
    "name": "tan",
    "module": "tf.math",
    "fullName": "tf.math.tan",
    "signature": "(x, name=None)",
    "description": "Computes tan of x element-wise."
  },
  "2140": {
    "name": "tanh",
    "module": "tf.math",
    "fullName": "tf.math.tanh",
    "signature": "(x, name=None)",
    "description": "Computes hyperbolic tangent of `x` element-wise."
  },
  "2141": {
    "name": "top_k",
    "module": "tf.math",
    "fullName": "tf.math.top_k",
    "signature": "(input, k=1, sorted=True, name=None)",
    "description": "Finds values and indices of the `k` largest entries for the last dimension."
  },
  "2142": {
    "name": "truediv",
    "module": "tf.math",
    "fullName": "tf.math.truediv",
    "signature": "(x, y, name=None)",
    "description": "Divides x / y elementwise (using Python 3 division operator semantics)."
  },
  "2143": {
    "name": "unsorted_segment_max",
    "module": "tf.math",
    "fullName": "tf.math.unsorted_segment_max",
    "signature": "(data, segment_ids, num_segments, name=None)",
    "description": "Computes the maximum along segments of a tensor."
  },
  "2144": {
    "name": "unsorted_segment_mean",
    "module": "tf.math",
    "fullName": "tf.math.unsorted_segment_mean",
    "signature": "(data, segment_ids, num_segments, name=None)",
    "description": "Computes the mean along segments of a tensor."
  },
  "2145": {
    "name": "unsorted_segment_min",
    "module": "tf.math",
    "fullName": "tf.math.unsorted_segment_min",
    "signature": "(data, segment_ids, num_segments, name=None)",
    "description": "Computes the minimum along segments of a tensor."
  },
  "2146": {
    "name": "unsorted_segment_prod",
    "module": "tf.math",
    "fullName": "tf.math.unsorted_segment_prod",
    "signature": "(data, segment_ids, num_segments, name=None)",
    "description": "Computes the product along segments of a tensor."
  },
  "2147": {
    "name": "unsorted_segment_sqrt_n",
    "module": "tf.math",
    "fullName": "tf.math.unsorted_segment_sqrt_n",
    "signature": "(data, segment_ids, num_segments, name=None)",
    "description": "Computes the sum along segments of a tensor divided by the sqrt(N)."
  },
  "2148": {
    "name": "unsorted_segment_sum",
    "module": "tf.math",
    "fullName": "tf.math.unsorted_segment_sum",
    "signature": "(data, segment_ids, num_segments, name=None)",
    "description": "Computes the sum along segments of a tensor."
  },
  "2149": {
    "name": "xdivy",
    "module": "tf.math",
    "fullName": "tf.math.xdivy",
    "signature": "(x, y, name=None)",
    "description": "Returns 0 if x == 0, and x / y otherwise, elementwise."
  },
  "2150": {
    "name": "xlog1py",
    "module": "tf.math",
    "fullName": "tf.math.xlog1py",
    "signature": "(x, y, name=None)",
    "description": "Compute x * log1p(y)."
  },
  "2151": {
    "name": "xlogy",
    "module": "tf.math",
    "fullName": "tf.math.xlogy",
    "signature": "(x, y, name=None)",
    "description": "Returns 0 if x == 0, and x * log(y) otherwise, elementwise."
  },
  "2152": {
    "name": "zero_fraction",
    "module": "tf.math",
    "fullName": "tf.math.zero_fraction",
    "signature": "(value, name=None)",
    "description": "Returns the fraction of zeros in `value`."
  },
  "2153": {
    "name": "zeta",
    "module": "tf.math",
    "fullName": "tf.math.zeta",
    "signature": "(x, q, name=None)",
    "description": "Compute the Hurwitz zeta function \\\\(\\zeta(x, q)\\\\)."
  },
  "2154": {
    "name": "bessel_i0",
    "module": "tf.math.special",
    "fullName": "tf.math.special.bessel_i0",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel i0 function of `x` element-wise."
  },
  "2155": {
    "name": "bessel_i0e",
    "module": "tf.math.special",
    "fullName": "tf.math.special.bessel_i0e",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel i0e function of `x` element-wise."
  },
  "2156": {
    "name": "bessel_i1",
    "module": "tf.math.special",
    "fullName": "tf.math.special.bessel_i1",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel i1 function of `x` element-wise."
  },
  "2157": {
    "name": "bessel_i1e",
    "module": "tf.math.special",
    "fullName": "tf.math.special.bessel_i1e",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel i1e function of `x` element-wise."
  },
  "2158": {
    "name": "bessel_j0",
    "module": "tf.math.special",
    "fullName": "tf.math.special.bessel_j0",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel j0 function of `x` element-wise."
  },
  "2159": {
    "name": "bessel_j1",
    "module": "tf.math.special",
    "fullName": "tf.math.special.bessel_j1",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel j1 function of `x` element-wise."
  },
  "2160": {
    "name": "bessel_k0",
    "module": "tf.math.special",
    "fullName": "tf.math.special.bessel_k0",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel k0 function of `x` element-wise."
  },
  "2161": {
    "name": "bessel_k0e",
    "module": "tf.math.special",
    "fullName": "tf.math.special.bessel_k0e",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel k0e function of `x` element-wise."
  },
  "2162": {
    "name": "bessel_k1",
    "module": "tf.math.special",
    "fullName": "tf.math.special.bessel_k1",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel k1 function of `x` element-wise."
  },
  "2163": {
    "name": "bessel_k1e",
    "module": "tf.math.special",
    "fullName": "tf.math.special.bessel_k1e",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel k1e function of `x` element-wise."
  },
  "2164": {
    "name": "bessel_y0",
    "module": "tf.math.special",
    "fullName": "tf.math.special.bessel_y0",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel y0 function of `x` element-wise."
  },
  "2165": {
    "name": "bessel_y1",
    "module": "tf.math.special",
    "fullName": "tf.math.special.bessel_y1",
    "signature": "(x, name=None)",
    "description": "Computes the Bessel y1 function of `x` element-wise."
  },
  "2166": {
    "name": "dawsn",
    "module": "tf.math.special",
    "fullName": "tf.math.special.dawsn",
    "signature": "(x, name=None)",
    "description": "Computes Dawson's integral of `x` element-wise."
  },
  "2167": {
    "name": "expint",
    "module": "tf.math.special",
    "fullName": "tf.math.special.expint",
    "signature": "(x, name=None)",
    "description": "Computes the Exponential integral of `x` element-wise."
  },
  "2168": {
    "name": "fresnel_cos",
    "module": "tf.math.special",
    "fullName": "tf.math.special.fresnel_cos",
    "signature": "(x, name=None)",
    "description": "Computes Fresnel's cosine integral of `x` element-wise."
  },
  "2169": {
    "name": "fresnel_sin",
    "module": "tf.math.special",
    "fullName": "tf.math.special.fresnel_sin",
    "signature": "(x, name=None)",
    "description": "Computes Fresnel's sine integral of `x` element-wise."
  },
  "2170": {
    "name": "spence",
    "module": "tf.math.special",
    "fullName": "tf.math.special.spence",
    "signature": "(x, name=None)",
    "description": "Computes Spence's integral of `x` element-wise."
  },
  "2171": {
    "name": "BinaryCrossentropy",
    "module": "tf.losses",
    "fullName": "tf.losses.BinaryCrossentropy",
    "signature": "(from_logits=False, label_smoothing=0.0, axis=-1, reduction='auto', name='binary_crossentropy')",
    "description": "Computes the cross-entropy loss between true labels and predicted labels."
  },
  "2172": {
    "name": "BinaryFocalCrossentropy",
    "module": "tf.losses",
    "fullName": "tf.losses.BinaryFocalCrossentropy",
    "signature": "(apply_class_balancing=False, alpha=0.25, gamma=2.0, from_logits=False, label_smoothing=0.0, axis=-1, reduction='auto', name='binary_focal_crossentropy')",
    "description": "Computes the focal cross-entropy loss between true labels and predictions."
  },
  "2173": {
    "name": "CategoricalCrossentropy",
    "module": "tf.losses",
    "fullName": "tf.losses.CategoricalCrossentropy",
    "signature": "(from_logits=False, label_smoothing=0.0, axis=-1, reduction='auto', name='categorical_crossentropy')",
    "description": "Computes the crossentropy loss between the labels and predictions."
  },
  "2174": {
    "name": "CategoricalHinge",
    "module": "tf.losses",
    "fullName": "tf.losses.CategoricalHinge",
    "signature": "(reduction='auto', name='categorical_hinge')",
    "description": "Computes the categorical hinge loss between `y_true` and `y_pred`."
  },
  "2175": {
    "name": "CosineSimilarity",
    "module": "tf.losses",
    "fullName": "tf.losses.CosineSimilarity",
    "signature": "(axis=-1, reduction='auto', name='cosine_similarity')",
    "description": "Computes the cosine similarity between labels and predictions."
  },
  "2176": {
    "name": "Hinge",
    "module": "tf.losses",
    "fullName": "tf.losses.Hinge",
    "signature": "(reduction='auto', name='hinge')",
    "description": "Computes the hinge loss between `y_true` and `y_pred`."
  },
  "2177": {
    "name": "Huber",
    "module": "tf.losses",
    "fullName": "tf.losses.Huber",
    "signature": "(delta=1.0, reduction='auto', name='huber_loss')",
    "description": "Computes the Huber loss between `y_true` and `y_pred`."
  },
  "2178": {
    "name": "KLD",
    "module": "tf.losses",
    "fullName": "tf.losses.KLD",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2179": {
    "name": "KLDivergence",
    "module": "tf.losses",
    "fullName": "tf.losses.KLDivergence",
    "signature": "(reduction='auto', name='kl_divergence')",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2180": {
    "name": "LogCosh",
    "module": "tf.losses",
    "fullName": "tf.losses.LogCosh",
    "signature": "(reduction='auto', name='log_cosh')",
    "description": "Computes the logarithm of the hyperbolic cosine of the prediction error."
  },
  "2181": {
    "name": "Loss",
    "module": "tf.losses",
    "fullName": "tf.losses.Loss",
    "signature": "(reduction='auto', name=None)",
    "description": "Loss base class."
  },
  "2182": {
    "name": "MAE",
    "module": "tf.losses",
    "fullName": "tf.losses.MAE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute error between labels and predictions."
  },
  "2183": {
    "name": "MAPE",
    "module": "tf.losses",
    "fullName": "tf.losses.MAPE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute percentage error between `y_true` and `y_pred`."
  },
  "2184": {
    "name": "MSE",
    "module": "tf.losses",
    "fullName": "tf.losses.MSE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared error between labels and predictions."
  },
  "2185": {
    "name": "MSLE",
    "module": "tf.losses",
    "fullName": "tf.losses.MSLE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared logarithmic error between `y_true` and `y_pred`."
  },
  "2186": {
    "name": "MeanAbsoluteError",
    "module": "tf.losses",
    "fullName": "tf.losses.MeanAbsoluteError",
    "signature": "(reduction='auto', name='mean_absolute_error')",
    "description": "Computes the mean of absolute difference between labels and predictions."
  },
  "2187": {
    "name": "MeanAbsolutePercentageError",
    "module": "tf.losses",
    "fullName": "tf.losses.MeanAbsolutePercentageError",
    "signature": "(reduction='auto', name='mean_absolute_percentage_error')",
    "description": "Computes the mean absolute percentage error between `y_true` and `y_pred`."
  },
  "2188": {
    "name": "MeanSquaredError",
    "module": "tf.losses",
    "fullName": "tf.losses.MeanSquaredError",
    "signature": "(reduction='auto', name='mean_squared_error')",
    "description": "Computes the mean of squares of errors between labels and predictions."
  },
  "2189": {
    "name": "MeanSquaredLogarithmicError",
    "module": "tf.losses",
    "fullName": "tf.losses.MeanSquaredLogarithmicError",
    "signature": "(reduction='auto', name='mean_squared_logarithmic_error')",
    "description": "Computes the mean squared logarithmic error between `y_true` and `y_pred`."
  },
  "2190": {
    "name": "Poisson",
    "module": "tf.losses",
    "fullName": "tf.losses.Poisson",
    "signature": "(reduction='auto', name='poisson')",
    "description": "Computes the Poisson loss between `y_true` and `y_pred`."
  },
  "2191": {
    "name": "Reduction",
    "module": "tf.losses",
    "fullName": "tf.losses.Reduction",
    "signature": "()",
    "description": "Types of loss reduction."
  },
  "2192": {
    "name": "SparseCategoricalCrossentropy",
    "module": "tf.losses",
    "fullName": "tf.losses.SparseCategoricalCrossentropy",
    "signature": "(from_logits=False, ignore_class=None, reduction='auto', name='sparse_categorical_crossentropy')",
    "description": "Computes the crossentropy loss between the labels and predictions."
  },
  "2193": {
    "name": "SquaredHinge",
    "module": "tf.losses",
    "fullName": "tf.losses.SquaredHinge",
    "signature": "(reduction='auto', name='squared_hinge')",
    "description": "Computes the squared hinge loss between `y_true` and `y_pred`."
  },
  "2194": {
    "name": "binary_crossentropy",
    "module": "tf.losses",
    "fullName": "tf.losses.binary_crossentropy",
    "signature": "(y_true, y_pred, from_logits=False, label_smoothing=0.0, axis=-1)",
    "description": "Computes the binary crossentropy loss."
  },
  "2195": {
    "name": "binary_focal_crossentropy",
    "module": "tf.losses",
    "fullName": "tf.losses.binary_focal_crossentropy",
    "signature": "(y_true, y_pred, apply_class_balancing=False, alpha=0.25, gamma=2.0, from_logits=False, label_smoothing=0.0, axis=-1)",
    "description": "Computes the binary focal crossentropy loss."
  },
  "2196": {
    "name": "categorical_crossentropy",
    "module": "tf.losses",
    "fullName": "tf.losses.categorical_crossentropy",
    "signature": "(y_true, y_pred, from_logits=False, label_smoothing=0.0, axis=-1)",
    "description": "Computes the categorical crossentropy loss."
  },
  "2197": {
    "name": "categorical_hinge",
    "module": "tf.losses",
    "fullName": "tf.losses.categorical_hinge",
    "signature": "(y_true, y_pred)",
    "description": "Computes the categorical hinge loss between `y_true` and `y_pred`."
  },
  "2198": {
    "name": "cosine_similarity",
    "module": "tf.losses",
    "fullName": "tf.losses.cosine_similarity",
    "signature": "(y_true, y_pred, axis=-1)",
    "description": "Computes the cosine similarity between labels and predictions."
  },
  "2199": {
    "name": "deserialize",
    "module": "tf.losses",
    "fullName": "tf.losses.deserialize",
    "signature": "(name, custom_objects=None)",
    "description": "Deserializes a serialized loss class/function instance."
  },
  "2200": {
    "name": "get",
    "module": "tf.losses",
    "fullName": "tf.losses.get",
    "signature": "(identifier)",
    "description": "Retrieves a Keras loss as a `function`/`Loss` class instance."
  },
  "2201": {
    "name": "hinge",
    "module": "tf.losses",
    "fullName": "tf.losses.hinge",
    "signature": "(y_true, y_pred)",
    "description": "Computes the hinge loss between `y_true` and `y_pred`."
  },
  "2202": {
    "name": "huber",
    "module": "tf.losses",
    "fullName": "tf.losses.huber",
    "signature": "(y_true, y_pred, delta=1.0)",
    "description": "Computes Huber loss value."
  },
  "2203": {
    "name": "kl_divergence",
    "module": "tf.losses",
    "fullName": "tf.losses.kl_divergence",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2204": {
    "name": "kld",
    "module": "tf.losses",
    "fullName": "tf.losses.kld",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2205": {
    "name": "kullback_leibler_divergence",
    "module": "tf.losses",
    "fullName": "tf.losses.kullback_leibler_divergence",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2206": {
    "name": "log_cosh",
    "module": "tf.losses",
    "fullName": "tf.losses.log_cosh",
    "signature": "(y_true, y_pred)",
    "description": "Logarithm of the hyperbolic cosine of the prediction error."
  },
  "2207": {
    "name": "logcosh",
    "module": "tf.losses",
    "fullName": "tf.losses.logcosh",
    "signature": "(y_true, y_pred)",
    "description": "Logarithm of the hyperbolic cosine of the prediction error."
  },
  "2208": {
    "name": "mae",
    "module": "tf.losses",
    "fullName": "tf.losses.mae",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute error between labels and predictions."
  },
  "2209": {
    "name": "mape",
    "module": "tf.losses",
    "fullName": "tf.losses.mape",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute percentage error between `y_true` and `y_pred`."
  },
  "2210": {
    "name": "mean_absolute_error",
    "module": "tf.losses",
    "fullName": "tf.losses.mean_absolute_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute error between labels and predictions."
  },
  "2211": {
    "name": "mean_absolute_percentage_error",
    "module": "tf.losses",
    "fullName": "tf.losses.mean_absolute_percentage_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute percentage error between `y_true` and `y_pred`."
  },
  "2212": {
    "name": "mean_squared_error",
    "module": "tf.losses",
    "fullName": "tf.losses.mean_squared_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared error between labels and predictions."
  },
  "2213": {
    "name": "mean_squared_logarithmic_error",
    "module": "tf.losses",
    "fullName": "tf.losses.mean_squared_logarithmic_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared logarithmic error between `y_true` and `y_pred`."
  },
  "2214": {
    "name": "mse",
    "module": "tf.losses",
    "fullName": "tf.losses.mse",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared error between labels and predictions."
  },
  "2215": {
    "name": "msle",
    "module": "tf.losses",
    "fullName": "tf.losses.msle",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared logarithmic error between `y_true` and `y_pred`."
  },
  "2216": {
    "name": "poisson",
    "module": "tf.losses",
    "fullName": "tf.losses.poisson",
    "signature": "(y_true, y_pred)",
    "description": "Computes the Poisson loss between y_true and y_pred."
  },
  "2217": {
    "name": "serialize",
    "module": "tf.losses",
    "fullName": "tf.losses.serialize",
    "signature": "(loss)",
    "description": "Serializes loss function or `Loss` instance."
  },
  "2218": {
    "name": "sparse_categorical_crossentropy",
    "module": "tf.losses",
    "fullName": "tf.losses.sparse_categorical_crossentropy",
    "signature": "(y_true, y_pred, from_logits=False, axis=-1, ignore_class=None)",
    "description": "Computes the sparse categorical crossentropy loss."
  },
  "2219": {
    "name": "squared_hinge",
    "module": "tf.losses",
    "fullName": "tf.losses.squared_hinge",
    "signature": "(y_true, y_pred)",
    "description": "Computes the squared hinge loss between `y_true` and `y_pred`."
  },
  "2220": {
    "name": "KeyValueTensorInitializer",
    "module": "tf.lookup",
    "fullName": "tf.lookup.KeyValueTensorInitializer",
    "signature": "(keys, values, key_dtype=None, value_dtype=None, name=None)",
    "description": "Table initializers given `keys` and `values` tensors."
  },
  "2221": {
    "name": "StaticHashTable",
    "module": "tf.lookup",
    "fullName": "tf.lookup.StaticHashTable",
    "signature": "(*args, **kwargs)",
    "description": "A generic hash table that is immutable once initialized."
  },
  "2222": {
    "name": "StaticVocabularyTable",
    "module": "tf.lookup",
    "fullName": "tf.lookup.StaticVocabularyTable",
    "signature": "(*args, **kwargs)",
    "description": "String to Id table that assigns out-of-vocabulary keys to hash buckets."
  },
  "2223": {
    "name": "TextFileIndex",
    "module": "tf.lookup",
    "fullName": "tf.lookup.TextFileIndex",
    "signature": "()",
    "description": "The key and value content to get from each line."
  },
  "2224": {
    "name": "TextFileInitializer",
    "module": "tf.lookup",
    "fullName": "tf.lookup.TextFileInitializer",
    "signature": "(filename, key_dtype, key_index, value_dtype, value_index, vocab_size=None, delimiter='\\t', name=None, value_index_offset=0)",
    "description": "Table initializers from a text file."
  },
  "2225": {
    "name": "DenseHashTable",
    "module": "tf.lookup.experimental",
    "fullName": "tf.lookup.experimental.DenseHashTable",
    "signature": "(*args, **kwargs)",
    "description": "A mutable hash table with faster lookups and higher memory usage."
  },
  "2226": {
    "name": "MutableHashTable",
    "module": "tf.lookup.experimental",
    "fullName": "tf.lookup.experimental.MutableHashTable",
    "signature": "(*args, **kwargs)",
    "description": "A generic mutable hash table implementation."
  },
  "2227": {
    "name": "Interpreter",
    "module": "tf.lite",
    "fullName": "tf.lite.Interpreter",
    "signature": "(model_path=None, model_content=None, experimental_delegates=None, num_threads=None, experimental_op_resolver_type=<OpResolverType.AUTO: 0>, experimental_preserve_all_tensors=False)",
    "description": "Interpreter interface for running TensorFlow Lite models."
  },
  "2228": {
    "name": "OpsSet",
    "module": "tf.lite",
    "fullName": "tf.lite.OpsSet",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "Enum class defining the sets of ops available to generate TFLite models."
  },
  "2229": {
    "name": "RepresentativeDataset",
    "module": "tf.lite",
    "fullName": "tf.lite.RepresentativeDataset",
    "signature": "(input_gen)",
    "description": "Representative dataset used to optimize the model."
  },
  "2230": {
    "name": "TFLiteConverter",
    "module": "tf.lite",
    "fullName": "tf.lite.TFLiteConverter",
    "signature": "(funcs, trackable_obj=None)",
    "description": "Converts a TensorFlow model into TensorFlow Lite model."
  },
  "2231": {
    "name": "TargetSpec",
    "module": "tf.lite",
    "fullName": "tf.lite.TargetSpec",
    "signature": "(supported_ops=None, supported_types=None, experimental_select_user_tf_ops=None, experimental_supported_backends=None)",
    "description": "Specification of target device used to optimize the model."
  },
  "2232": {
    "name": "Analyzer",
    "module": "tf.lite.experimental",
    "fullName": "tf.lite.experimental.Analyzer",
    "signature": "()",
    "description": "Provides a collection of TFLite model analyzer tools."
  },
  "2233": {
    "name": "OpResolverType",
    "module": "tf.lite.experimental",
    "fullName": "tf.lite.experimental.OpResolverType",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "Different types of op resolvers for Tensorflow Lite."
  },
  "2234": {
    "name": "QuantizationDebugOptions",
    "module": "tf.lite.experimental",
    "fullName": "tf.lite.experimental.QuantizationDebugOptions",
    "signature": "(layer_debug_metrics: Optional[Mapping[str, Callable[[numpy.ndarray], float]]] = None, model_debug_metrics: Optional[Mapping[str, Callable[[Sequence[numpy.ndarray], Sequence[numpy.ndarray]], float]]] = None, layer_direct_compare_metrics: Optional[Mapping[str, Callable[[Sequence[numpy.ndarray], Sequence[numpy.ndarray], float, int], float]]] = None, denylisted_ops: Optional[List[str]] = None, denylisted_nodes: Optional[List[str]] = None, fully_quantize: bool = False) -> None",
    "description": "Debug options to set up a given QuantizationDebugger."
  },
  "2235": {
    "name": "QuantizationDebugger",
    "module": "tf.lite.experimental",
    "fullName": "tf.lite.experimental.QuantizationDebugger",
    "signature": "(quant_debug_model_path: Optional[str] = None, quant_debug_model_content: Optional[bytes] = None, float_model_path: Optional[str] = None, float_model_content: Optional[bytes] = None, debug_dataset: Optional[Callable[[], Iterable[Sequence[numpy.ndarray]]]] = None, debug_options: Optional[tensorflow.lite.tools.optimize.debugging.python.debugger.QuantizationDebugOptions] = None, converter: Optional[Any] = None) -> None",
    "description": "Debugger for Quantized TensorFlow Lite debug mode models."
  },
  "2236": {
    "name": "load_delegate",
    "module": "tf.lite.experimental",
    "fullName": "tf.lite.experimental.load_delegate",
    "signature": "(library, options=None)",
    "description": "Returns loaded Delegate object."
  },
  "2237": {
    "name": "compatible",
    "module": "tf.lite.experimental.authoring",
    "fullName": "tf.lite.experimental.authoring.compatible",
    "signature": "(target=None, converter_target_spec=None, **kwargs)",
    "description": "Wraps `tf.function` into a callable function with TFLite compatibility checking."
  },
  "2238": {
    "name": "LinearOperator",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperator",
    "signature": "(dtype, graph_parents=None, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name=None, parameters=None)",
    "description": "Base class defining a [batch of] linear operator[s]."
  },
  "2239": {
    "name": "LinearOperatorAdjoint",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorAdjoint",
    "signature": "(operator, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name=None)",
    "description": "`LinearOperator` representing the adjoint of another operator."
  },
  "2240": {
    "name": "LinearOperatorBlockDiag",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorBlockDiag",
    "signature": "(operators, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=True, name=None)",
    "description": "Combines one or more `LinearOperators` in to a Block Diagonal matrix."
  },
  "2241": {
    "name": "LinearOperatorBlockLowerTriangular",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorBlockLowerTriangular",
    "signature": "(operators, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorBlockLowerTriangular')",
    "description": "Combines `LinearOperators` into a blockwise lower-triangular matrix."
  },
  "2242": {
    "name": "LinearOperatorCirculant",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorCirculant",
    "signature": "(spectrum, input_output_dtype=tf.complex64, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=True, name='LinearOperatorCirculant')",
    "description": "`LinearOperator` acting like a circulant matrix."
  },
  "2243": {
    "name": "LinearOperatorCirculant2D",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorCirculant2D",
    "signature": "(spectrum, input_output_dtype=tf.complex64, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=True, name='LinearOperatorCirculant2D')",
    "description": "`LinearOperator` acting like a block circulant matrix."
  },
  "2244": {
    "name": "LinearOperatorCirculant3D",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorCirculant3D",
    "signature": "(spectrum, input_output_dtype=tf.complex64, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=True, name='LinearOperatorCirculant3D')",
    "description": "`LinearOperator` acting like a nested block circulant matrix."
  },
  "2245": {
    "name": "LinearOperatorComposition",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorComposition",
    "signature": "(operators, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name=None)",
    "description": "Composes one or more `LinearOperators`."
  },
  "2246": {
    "name": "LinearOperatorDiag",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorDiag",
    "signature": "(diag, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorDiag')",
    "description": "`LinearOperator` acting like a [batch] square diagonal matrix."
  },
  "2247": {
    "name": "LinearOperatorFullMatrix",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorFullMatrix",
    "signature": "(matrix, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorFullMatrix')",
    "description": "`LinearOperator` that wraps a [batch] matrix."
  },
  "2248": {
    "name": "LinearOperatorHouseholder",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorHouseholder",
    "signature": "(reflection_axis, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorHouseholder')",
    "description": "`LinearOperator` acting like a [batch] of Householder transformations."
  },
  "2249": {
    "name": "LinearOperatorIdentity",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorIdentity",
    "signature": "(num_rows, batch_shape=None, dtype=None, is_non_singular=True, is_self_adjoint=True, is_positive_definite=True, is_square=True, assert_proper_shapes=False, name='LinearOperatorIdentity')",
    "description": "`LinearOperator` acting like a [batch] square identity matrix."
  },
  "2250": {
    "name": "LinearOperatorInversion",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorInversion",
    "signature": "(operator, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name=None)",
    "description": "`LinearOperator` representing the inverse of another operator."
  },
  "2251": {
    "name": "LinearOperatorKronecker",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorKronecker",
    "signature": "(operators, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name=None)",
    "description": "Kronecker product between two `LinearOperators`."
  },
  "2252": {
    "name": "LinearOperatorLowRankUpdate",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorLowRankUpdate",
    "signature": "(base_operator, u, diag_update=None, v=None, is_diag_update_positive=None, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorLowRankUpdate')",
    "description": "Perturb a `LinearOperator` with a rank `K` update."
  },
  "2253": {
    "name": "LinearOperatorLowerTriangular",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorLowerTriangular",
    "signature": "(tril, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorLowerTriangular')",
    "description": "`LinearOperator` acting like a [batch] square lower triangular matrix."
  },
  "2254": {
    "name": "LinearOperatorPermutation",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorPermutation",
    "signature": "(perm, dtype=tf.float32, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorPermutation')",
    "description": "`LinearOperator` acting like a [batch] of permutation matrices."
  },
  "2255": {
    "name": "LinearOperatorScaledIdentity",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorScaledIdentity",
    "signature": "(num_rows, multiplier, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=True, assert_proper_shapes=False, name='LinearOperatorScaledIdentity')",
    "description": "`LinearOperator` acting like a scaled [batch] identity matrix `A = c I`."
  },
  "2256": {
    "name": "LinearOperatorToeplitz",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorToeplitz",
    "signature": "(col, row, is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorToeplitz')",
    "description": "`LinearOperator` acting like a [batch] of toeplitz matrices."
  },
  "2257": {
    "name": "LinearOperatorTridiag",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorTridiag",
    "signature": "(diagonals, diagonals_format='compact', is_non_singular=None, is_self_adjoint=None, is_positive_definite=None, is_square=None, name='LinearOperatorTridiag')",
    "description": "`LinearOperator` acting like a [batch] square tridiagonal matrix."
  },
  "2258": {
    "name": "LinearOperatorZeros",
    "module": "tf.linalg",
    "fullName": "tf.linalg.LinearOperatorZeros",
    "signature": "(num_rows, num_columns=None, batch_shape=None, dtype=None, is_non_singular=False, is_self_adjoint=True, is_positive_definite=False, is_square=True, assert_proper_shapes=False, name='LinearOperatorZeros')",
    "description": "`LinearOperator` acting like a [batch] zero matrix."
  },
  "2259": {
    "name": "adjoint",
    "module": "tf.linalg",
    "fullName": "tf.linalg.adjoint",
    "signature": "(matrix, name=None)",
    "description": "Transposes the last two dimensions of and conjugates tensor `matrix`."
  },
  "2260": {
    "name": "band_part",
    "module": "tf.linalg",
    "fullName": "tf.linalg.band_part",
    "signature": "(input, num_lower, num_upper, name=None)",
    "description": "Copy a tensor setting everything outside a central band in each innermost matrix to zero."
  },
  "2261": {
    "name": "banded_triangular_solve",
    "module": "tf.linalg",
    "fullName": "tf.linalg.banded_triangular_solve",
    "signature": "(bands, rhs, lower=True, adjoint=False, name=None)",
    "description": "Solve triangular systems of equations with a banded solver."
  },
  "2262": {
    "name": "cholesky",
    "module": "tf.linalg",
    "fullName": "tf.linalg.cholesky",
    "signature": "(input, name=None)",
    "description": "Computes the Cholesky decomposition of one or more square matrices."
  },
  "2263": {
    "name": "cholesky_solve",
    "module": "tf.linalg",
    "fullName": "tf.linalg.cholesky_solve",
    "signature": "(chol, rhs, name=None)",
    "description": "Solves systems of linear eqns `A X = RHS`, given Cholesky factorizations."
  },
  "2264": {
    "name": "cross",
    "module": "tf.linalg",
    "fullName": "tf.linalg.cross",
    "signature": "(a, b, name=None)",
    "description": "Compute the pairwise cross product."
  },
  "2265": {
    "name": "det",
    "module": "tf.linalg",
    "fullName": "tf.linalg.det",
    "signature": "(input, name=None)",
    "description": "Computes the determinant of one or more square matrices."
  },
  "2266": {
    "name": "diag",
    "module": "tf.linalg",
    "fullName": "tf.linalg.diag",
    "signature": "(diagonal, name='diag', k=0, num_rows=-1, num_cols=-1, padding_value=0, align='RIGHT_LEFT')",
    "description": "Returns a batched diagonal tensor with given batched diagonal values."
  },
  "2267": {
    "name": "diag_part",
    "module": "tf.linalg",
    "fullName": "tf.linalg.diag_part",
    "signature": "(input, name='diag_part', k=0, padding_value=0, align='RIGHT_LEFT')",
    "description": "Returns the batched diagonal part of a batched tensor."
  },
  "2268": {
    "name": "eig",
    "module": "tf.linalg",
    "fullName": "tf.linalg.eig",
    "signature": "(tensor, name=None)",
    "description": "Computes the eigen decomposition of a batch of matrices."
  },
  "2269": {
    "name": "eigh",
    "module": "tf.linalg",
    "fullName": "tf.linalg.eigh",
    "signature": "(tensor, name=None)",
    "description": "Computes the eigen decomposition of a batch of self-adjoint matrices."
  },
  "2270": {
    "name": "eigh_tridiagonal",
    "module": "tf.linalg",
    "fullName": "tf.linalg.eigh_tridiagonal",
    "signature": "(alpha, beta, eigvals_only=True, select='a', select_range=None, tol=None, name=None)",
    "description": "Computes the eigenvalues of a Hermitian tridiagonal matrix."
  },
  "2271": {
    "name": "eigvals",
    "module": "tf.linalg",
    "fullName": "tf.linalg.eigvals",
    "signature": "(tensor, name=None)",
    "description": "Computes the eigenvalues of one or more matrices."
  },
  "2272": {
    "name": "eigvalsh",
    "module": "tf.linalg",
    "fullName": "tf.linalg.eigvalsh",
    "signature": "(tensor, name=None)",
    "description": "Computes the eigenvalues of one or more self-adjoint matrices."
  },
  "2273": {
    "name": "einsum",
    "module": "tf.linalg",
    "fullName": "tf.linalg.einsum",
    "signature": "(equation, *inputs, **kwargs)",
    "description": "Tensor contraction over specified indices and outer product."
  },
  "2274": {
    "name": "expm",
    "module": "tf.linalg",
    "fullName": "tf.linalg.expm",
    "signature": "(input, name=None)",
    "description": "Computes the matrix exponential of one or more square matrices."
  },
  "2275": {
    "name": "eye",
    "module": "tf.linalg",
    "fullName": "tf.linalg.eye",
    "signature": "(num_rows, num_columns=None, batch_shape=None, dtype=tf.float32, name=None)",
    "description": "Construct an identity matrix, or a batch of matrices."
  },
  "2276": {
    "name": "global_norm",
    "module": "tf.linalg",
    "fullName": "tf.linalg.global_norm",
    "signature": "(t_list, name=None)",
    "description": "Computes the global norm of multiple tensors."
  },
  "2277": {
    "name": "inv",
    "module": "tf.linalg",
    "fullName": "tf.linalg.inv",
    "signature": "(input, adjoint=False, name=None)",
    "description": "Computes the inverse of one or more square invertible matrices or their adjoints (conjugate transposes)."
  },
  "2278": {
    "name": "logdet",
    "module": "tf.linalg",
    "fullName": "tf.linalg.logdet",
    "signature": "(matrix, name=None)",
    "description": "Computes log of the determinant of a hermitian positive definite matrix."
  },
  "2279": {
    "name": "logm",
    "module": "tf.linalg",
    "fullName": "tf.linalg.logm",
    "signature": "(input, name=None)",
    "description": "Computes the matrix logarithm of one or more square matrices:"
  },
  "2280": {
    "name": "lstsq",
    "module": "tf.linalg",
    "fullName": "tf.linalg.lstsq",
    "signature": "(matrix, rhs, l2_regularizer=0.0, fast=True, name=None)",
    "description": "Solves one or more linear least-squares problems."
  },
  "2281": {
    "name": "lu",
    "module": "tf.linalg",
    "fullName": "tf.linalg.lu",
    "signature": "(input, output_idx_type=tf.int32, name=None)",
    "description": "Computes the LU decomposition of one or more square matrices."
  },
  "2282": {
    "name": "lu_matrix_inverse",
    "module": "tf.linalg",
    "fullName": "tf.linalg.lu_matrix_inverse",
    "signature": "(lower_upper, perm, validate_args=False, name=None)",
    "description": "Computes the inverse given the LU decomposition(s) of one or more matrices."
  },
  "2283": {
    "name": "lu_reconstruct",
    "module": "tf.linalg",
    "fullName": "tf.linalg.lu_reconstruct",
    "signature": "(lower_upper, perm, validate_args=False, name=None)",
    "description": "The reconstruct one or more matrices from their LU decomposition(s)."
  },
  "2284": {
    "name": "lu_solve",
    "module": "tf.linalg",
    "fullName": "tf.linalg.lu_solve",
    "signature": "(lower_upper, perm, rhs, validate_args=False, name=None)",
    "description": "Solves systems of linear eqns `A X = RHS`, given LU factorizations."
  },
  "2285": {
    "name": "matmul",
    "module": "tf.linalg",
    "fullName": "tf.linalg.matmul",
    "signature": "(a, b, transpose_a=False, transpose_b=False, adjoint_a=False, adjoint_b=False, a_is_sparse=False, b_is_sparse=False, output_type=None, name=None)",
    "description": "Multiplies matrix `a` by matrix `b`, producing `a` * `b`."
  },
  "2286": {
    "name": "matrix_rank",
    "module": "tf.linalg",
    "fullName": "tf.linalg.matrix_rank",
    "signature": "(a, tol=None, validate_args=False, name=None)",
    "description": "Compute the matrix rank of one or more matrices."
  },
  "2287": {
    "name": "matrix_transpose",
    "module": "tf.linalg",
    "fullName": "tf.linalg.matrix_transpose",
    "signature": "(a, name='matrix_transpose', conjugate=False)",
    "description": "Transposes last two dimensions of tensor `a`."
  },
  "2288": {
    "name": "matvec",
    "module": "tf.linalg",
    "fullName": "tf.linalg.matvec",
    "signature": "(a, b, transpose_a=False, adjoint_a=False, a_is_sparse=False, b_is_sparse=False, name=None)",
    "description": "Multiplies matrix `a` by vector `b`, producing `a` * `b`."
  },
  "2289": {
    "name": "norm",
    "module": "tf.linalg",
    "fullName": "tf.linalg.norm",
    "signature": "(tensor, ord='euclidean', axis=None, keepdims=None, name=None)",
    "description": "Computes the norm of vectors, matrices, and tensors."
  },
  "2290": {
    "name": "normalize",
    "module": "tf.linalg",
    "fullName": "tf.linalg.normalize",
    "signature": "(tensor, ord='euclidean', axis=None, name=None)",
    "description": "Normalizes `tensor` along dimension `axis` using specified norm."
  },
  "2291": {
    "name": "pinv",
    "module": "tf.linalg",
    "fullName": "tf.linalg.pinv",
    "signature": "(a, rcond=None, validate_args=False, name=None)",
    "description": "Compute the Moore-Penrose pseudo-inverse of one or more matrices."
  },
  "2292": {
    "name": "qr",
    "module": "tf.linalg",
    "fullName": "tf.linalg.qr",
    "signature": "(input, full_matrices=False, name=None)",
    "description": "Computes the QR decompositions of one or more matrices."
  },
  "2293": {
    "name": "set_diag",
    "module": "tf.linalg",
    "fullName": "tf.linalg.set_diag",
    "signature": "(input, diagonal, name='set_diag', k=0, align='RIGHT_LEFT')",
    "description": "Returns a batched matrix tensor with new batched diagonal values."
  },
  "2294": {
    "name": "slogdet",
    "module": "tf.linalg",
    "fullName": "tf.linalg.slogdet",
    "signature": "(input, name=None)",
    "description": "Computes the sign and the log of the absolute value of the determinant of"
  },
  "2295": {
    "name": "solve",
    "module": "tf.linalg",
    "fullName": "tf.linalg.solve",
    "signature": "(matrix, rhs, adjoint=False, name=None)",
    "description": "Solves systems of linear equations."
  },
  "2296": {
    "name": "sqrtm",
    "module": "tf.linalg",
    "fullName": "tf.linalg.sqrtm",
    "signature": "(input, name=None)",
    "description": "Computes the matrix square root of one or more square matrices:"
  },
  "2297": {
    "name": "svd",
    "module": "tf.linalg",
    "fullName": "tf.linalg.svd",
    "signature": "(tensor, full_matrices=False, compute_uv=True, name=None)",
    "description": "Computes the singular value decompositions of one or more matrices."
  },
  "2298": {
    "name": "tensor_diag",
    "module": "tf.linalg",
    "fullName": "tf.linalg.tensor_diag",
    "signature": "(diagonal, name=None)",
    "description": "Returns a diagonal tensor with a given diagonal values."
  },
  "2299": {
    "name": "tensor_diag_part",
    "module": "tf.linalg",
    "fullName": "tf.linalg.tensor_diag_part",
    "signature": "(input, name=None)",
    "description": "Returns the diagonal part of the tensor."
  },
  "2300": {
    "name": "tensordot",
    "module": "tf.linalg",
    "fullName": "tf.linalg.tensordot",
    "signature": "(a, b, axes, name=None)",
    "description": "Tensor contraction of a and b along specified axes and outer product."
  },
  "2301": {
    "name": "trace",
    "module": "tf.linalg",
    "fullName": "tf.linalg.trace",
    "signature": "(x, name=None)",
    "description": "Compute the trace of a tensor `x`."
  },
  "2302": {
    "name": "triangular_solve",
    "module": "tf.linalg",
    "fullName": "tf.linalg.triangular_solve",
    "signature": "(matrix, rhs, lower=True, adjoint=False, name=None)",
    "description": "Solve systems of linear equations with upper or lower triangular matrices."
  },
  "2303": {
    "name": "tridiagonal_matmul",
    "module": "tf.linalg",
    "fullName": "tf.linalg.tridiagonal_matmul",
    "signature": "(diagonals, rhs, diagonals_format='compact', name=None)",
    "description": "Multiplies tridiagonal matrix by matrix."
  },
  "2304": {
    "name": "tridiagonal_solve",
    "module": "tf.linalg",
    "fullName": "tf.linalg.tridiagonal_solve",
    "signature": "(diagonals, rhs, diagonals_format='compact', transpose_rhs=False, conjugate_rhs=False, name=None, partial_pivoting=True, perturb_singular=False)",
    "description": "Solves tridiagonal systems of equations."
  },
  "2305": {
    "name": "conjugate_gradient",
    "module": "tf.linalg.experimental",
    "fullName": "tf.linalg.experimental.conjugate_gradient",
    "signature": "(operator, rhs, preconditioner=None, x=None, tol=1e-05, max_iter=20, name='conjugate_gradient')",
    "description": "Conjugate gradient solver."
  },
  "2306": {
    "name": "Model",
    "module": "tf.keras",
    "fullName": "tf.keras.Model",
    "signature": "(*args, **kwargs)",
    "description": "`Model` groups layers into an object with training and inference features."
  },
  "2307": {
    "name": "Sequential",
    "module": "tf.keras",
    "fullName": "tf.keras.Sequential",
    "signature": "(layers=None, name=None)",
    "description": "`Sequential` groups a linear stack of layers into a `tf.keras.Model`."
  },
  "2308": {
    "name": "CustomObjectScope",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.CustomObjectScope",
    "signature": "(*args)",
    "description": "Exposes custom classes/functions to Keras deserialization internals."
  },
  "2309": {
    "name": "GeneratorEnqueuer",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.GeneratorEnqueuer",
    "signature": "(generator, use_multiprocessing=False, random_seed=None)",
    "description": "Builds a queue out of a data generator."
  },
  "2310": {
    "name": "OrderedEnqueuer",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.OrderedEnqueuer",
    "signature": "(sequence, use_multiprocessing=False, shuffle=False)",
    "description": "Builds a Enqueuer from a Sequence."
  },
  "2311": {
    "name": "Progbar",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.Progbar",
    "signature": "(target, width=30, verbose=1, interval=0.05, stateful_metrics=None, unit_name='step')",
    "description": "Displays a progress bar."
  },
  "2312": {
    "name": "Sequence",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.Sequence",
    "signature": "()",
    "description": "Base object for fitting to a sequence of data, such as a dataset."
  },
  "2313": {
    "name": "SequenceEnqueuer",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.SequenceEnqueuer",
    "signature": "(sequence, use_multiprocessing=False)",
    "description": "Base class to enqueue inputs."
  },
  "2314": {
    "name": "SidecarEvaluator",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.SidecarEvaluator",
    "signature": "(model, data, checkpoint_dir, steps=None, max_evaluations=None, callbacks=None)",
    "description": "A class designed for a dedicated evaluator task."
  },
  "2315": {
    "name": "array_to_img",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.array_to_img",
    "signature": "(x, data_format=None, scale=True, dtype=None)",
    "description": "Converts a 3D Numpy array to a PIL Image instance."
  },
  "2316": {
    "name": "audio_dataset_from_directory",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.audio_dataset_from_directory",
    "signature": "(directory, labels='inferred', label_mode='int', class_names=None, batch_size=32, sampling_rate=None, output_sequence_length=None, ragged=False, shuffle=True, seed=None, validation_split=None, subset=None, follow_links=False)",
    "description": "Generates a `tf.data.Dataset` from audio files in a directory."
  },
  "2317": {
    "name": "custom_object_scope",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.custom_object_scope",
    "signature": "(*args)",
    "description": "Exposes custom classes/functions to Keras deserialization internals."
  },
  "2318": {
    "name": "deserialize_keras_object",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.deserialize_keras_object",
    "signature": "(identifier, module_objects=None, custom_objects=None, printable_module_name='object')",
    "description": "Turns the serialized form of a Keras object back into an actual object."
  },
  "2319": {
    "name": "disable_interactive_logging",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.disable_interactive_logging",
    "signature": "()",
    "description": "Turn off interactive logging."
  },
  "2320": {
    "name": "enable_interactive_logging",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.enable_interactive_logging",
    "signature": "()",
    "description": "Turn on interactive logging."
  },
  "2321": {
    "name": "get_custom_objects",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.get_custom_objects",
    "signature": "()",
    "description": "Retrieves a live reference to the global dictionary of custom objects."
  },
  "2322": {
    "name": "get_registered_name",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.get_registered_name",
    "signature": "(obj)",
    "description": "Returns the name registered to an object within the Keras framework."
  },
  "2323": {
    "name": "get_registered_object",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.get_registered_object",
    "signature": "(name, custom_objects=None, module_objects=None)",
    "description": "Returns the class associated with `name` if it is registered with Keras."
  },
  "2324": {
    "name": "get_source_inputs",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.get_source_inputs",
    "signature": "(tensor, layer=None, node_index=None)",
    "description": "Returns the list of input tensors necessary to compute `tensor`."
  },
  "2325": {
    "name": "image_dataset_from_directory",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.image_dataset_from_directory",
    "signature": "(directory, labels='inferred', label_mode='int', class_names=None, color_mode='rgb', batch_size=32, image_size=(256, 256), shuffle=True, seed=None, validation_split=None, subset=None, interpolation='bilinear', follow_links=False, crop_to_aspect_ratio=False, **kwargs)",
    "description": "Generates a `tf.data.Dataset` from image files in a directory."
  },
  "2326": {
    "name": "img_to_array",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.img_to_array",
    "signature": "(img, data_format=None, dtype=None)",
    "description": "Converts a PIL Image instance to a Numpy array."
  },
  "2327": {
    "name": "is_interactive_logging_enabled",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.is_interactive_logging_enabled",
    "signature": "()",
    "description": "Check if interactive logging is enabled."
  },
  "2328": {
    "name": "model_to_dot",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.model_to_dot",
    "signature": "(model, show_shapes=False, show_dtype=False, show_layer_names=True, rankdir='TB', expand_nested=False, dpi=96, subgraph=False, layer_range=None, show_layer_activations=False)",
    "description": "Convert a Keras model to dot format."
  },
  "2329": {
    "name": "normalize",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.normalize",
    "signature": "(x, axis=-1, order=2)",
    "description": "Normalizes a Numpy array."
  },
  "2330": {
    "name": "pack_x_y_sample_weight",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.pack_x_y_sample_weight",
    "signature": "(x, y=None, sample_weight=None)",
    "description": "Packs user-provided data into a tuple."
  },
  "2331": {
    "name": "pad_sequences",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.pad_sequences",
    "signature": "(sequences, maxlen=None, dtype='int32', padding='pre', truncating='pre', value=0.0)",
    "description": "Pads sequences to the same length."
  },
  "2332": {
    "name": "plot_model",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.plot_model",
    "signature": "(model, to_file='model.png', show_shapes=False, show_dtype=False, show_layer_names=True, rankdir='TB', expand_nested=False, dpi=96, layer_range=None, show_layer_activations=False)",
    "description": "Converts a Keras model to dot format and save to a file."
  },
  "2333": {
    "name": "register_keras_serializable",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.register_keras_serializable",
    "signature": "(package='Custom', name=None)",
    "description": "Registers an object with the Keras serialization framework."
  },
  "2334": {
    "name": "save_img",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.save_img",
    "signature": "(path, x, data_format=None, file_format=None, scale=True, **kwargs)",
    "description": "Saves an image stored as a Numpy array to a path or file object."
  },
  "2335": {
    "name": "serialize_keras_object",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.serialize_keras_object",
    "signature": "(instance)",
    "description": "Serialize a Keras object into a JSON-compatible representation."
  },
  "2336": {
    "name": "set_random_seed",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.set_random_seed",
    "signature": "(seed)",
    "description": "Sets all random seeds for the program (Python, NumPy, and TensorFlow)."
  },
  "2337": {
    "name": "split_dataset",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.split_dataset",
    "signature": "(dataset, left_size=None, right_size=None, shuffle=False, seed=None)",
    "description": "Split a dataset into a left half and a right half (e.g. train / test)."
  },
  "2338": {
    "name": "text_dataset_from_directory",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.text_dataset_from_directory",
    "signature": "(directory, labels='inferred', label_mode='int', class_names=None, batch_size=32, max_length=None, shuffle=True, seed=None, validation_split=None, subset=None, follow_links=False)",
    "description": "Generates a `tf.data.Dataset` from text files in a directory."
  },
  "2339": {
    "name": "timeseries_dataset_from_array",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.timeseries_dataset_from_array",
    "signature": "(data, targets, sequence_length, sequence_stride=1, sampling_rate=1, batch_size=128, shuffle=False, seed=None, start_index=None, end_index=None)",
    "description": "Creates a dataset of sliding windows over a timeseries provided as array."
  },
  "2340": {
    "name": "to_categorical",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.to_categorical",
    "signature": "(y, num_classes=None, dtype='float32')",
    "description": "Converts a class vector (integers) to binary class matrix."
  },
  "2341": {
    "name": "unpack_x_y_sample_weight",
    "module": "tf.keras.utils",
    "fullName": "tf.keras.utils.unpack_x_y_sample_weight",
    "signature": "(data)",
    "description": "Unpacks user-provided data tuple."
  },
  "2342": {
    "name": "DatasetCreator",
    "module": "tf.keras.utils.experimental",
    "fullName": "tf.keras.utils.experimental.DatasetCreator",
    "signature": "(dataset_fn, input_options=None)",
    "description": "Object that returns a `tf.data.Dataset` upon invoking."
  },
  "2343": {
    "name": "L1",
    "module": "tf.keras.regularizers",
    "fullName": "tf.keras.regularizers.L1",
    "signature": "(l1=0.01, **kwargs)",
    "description": "A regularizer that applies a L1 regularization penalty."
  },
  "2344": {
    "name": "L1L2",
    "module": "tf.keras.regularizers",
    "fullName": "tf.keras.regularizers.L1L2",
    "signature": "(l1=0.0, l2=0.0)",
    "description": "A regularizer that applies both L1 and L2 regularization penalties."
  },
  "2345": {
    "name": "L2",
    "module": "tf.keras.regularizers",
    "fullName": "tf.keras.regularizers.L2",
    "signature": "(l2=0.01, **kwargs)",
    "description": "A regularizer that applies a L2 regularization penalty."
  },
  "2346": {
    "name": "OrthogonalRegularizer",
    "module": "tf.keras.regularizers",
    "fullName": "tf.keras.regularizers.OrthogonalRegularizer",
    "signature": "(factor=0.01, mode='rows')",
    "description": "A regularizer that encourages input vectors to be orthogonal to each other."
  },
  "2347": {
    "name": "Regularizer",
    "module": "tf.keras.regularizers",
    "fullName": "tf.keras.regularizers.Regularizer",
    "signature": "()",
    "description": "Regularizer base class."
  },
  "2348": {
    "name": "deserialize",
    "module": "tf.keras.regularizers",
    "fullName": "tf.keras.regularizers.deserialize",
    "signature": "(config, custom_objects=None)",
    "description": "No description available."
  },
  "2349": {
    "name": "get",
    "module": "tf.keras.regularizers",
    "fullName": "tf.keras.regularizers.get",
    "signature": "(identifier)",
    "description": "Retrieve a regularizer instance from a config or identifier."
  },
  "2350": {
    "name": "l1",
    "module": "tf.keras.regularizers",
    "fullName": "tf.keras.regularizers.l1",
    "signature": "(l1=0.01, **kwargs)",
    "description": "A regularizer that applies a L1 regularization penalty."
  },
  "2351": {
    "name": "l1_l2",
    "module": "tf.keras.regularizers",
    "fullName": "tf.keras.regularizers.l1_l2",
    "signature": "(l1=0.01, l2=0.01)",
    "description": "Create a regularizer that applies both L1 and L2 penalties."
  },
  "2352": {
    "name": "l2",
    "module": "tf.keras.regularizers",
    "fullName": "tf.keras.regularizers.l2",
    "signature": "(l2=0.01, **kwargs)",
    "description": "A regularizer that applies a L2 regularization penalty."
  },
  "2353": {
    "name": "orthogonal_regularizer",
    "module": "tf.keras.regularizers",
    "fullName": "tf.keras.regularizers.orthogonal_regularizer",
    "signature": "(factor=0.01, mode='rows')",
    "description": "A regularizer that encourages input vectors to be orthogonal to each other."
  },
  "2354": {
    "name": "serialize",
    "module": "tf.keras.regularizers",
    "fullName": "tf.keras.regularizers.serialize",
    "signature": "(regularizer)",
    "description": "No description available."
  },
  "2355": {
    "name": "image_dataset_from_directory",
    "module": "tf.keras.preprocessing",
    "fullName": "tf.keras.preprocessing.image_dataset_from_directory",
    "signature": "(directory, labels='inferred', label_mode='int', class_names=None, color_mode='rgb', batch_size=32, image_size=(256, 256), shuffle=True, seed=None, validation_split=None, subset=None, interpolation='bilinear', follow_links=False, crop_to_aspect_ratio=False, **kwargs)",
    "description": "Generates a `tf.data.Dataset` from image files in a directory."
  },
  "2356": {
    "name": "text_dataset_from_directory",
    "module": "tf.keras.preprocessing",
    "fullName": "tf.keras.preprocessing.text_dataset_from_directory",
    "signature": "(directory, labels='inferred', label_mode='int', class_names=None, batch_size=32, max_length=None, shuffle=True, seed=None, validation_split=None, subset=None, follow_links=False)",
    "description": "Generates a `tf.data.Dataset` from text files in a directory."
  },
  "2357": {
    "name": "timeseries_dataset_from_array",
    "module": "tf.keras.preprocessing",
    "fullName": "tf.keras.preprocessing.timeseries_dataset_from_array",
    "signature": "(data, targets, sequence_length, sequence_stride=1, sampling_rate=1, batch_size=128, shuffle=False, seed=None, start_index=None, end_index=None)",
    "description": "Creates a dataset of sliding windows over a timeseries provided as array."
  },
  "2358": {
    "name": "make_sampling_table",
    "module": "tf.keras.preprocessing.sequence",
    "fullName": "tf.keras.preprocessing.sequence.make_sampling_table",
    "signature": "(size, sampling_factor=1e-05)",
    "description": "Generates a word rank-based probabilistic sampling table."
  },
  "2359": {
    "name": "pad_sequences",
    "module": "tf.keras.preprocessing.sequence",
    "fullName": "tf.keras.preprocessing.sequence.pad_sequences",
    "signature": "(sequences, maxlen=None, dtype='int32', padding='pre', truncating='pre', value=0.0)",
    "description": "Pads sequences to the same length."
  },
  "2360": {
    "name": "skipgrams",
    "module": "tf.keras.preprocessing.sequence",
    "fullName": "tf.keras.preprocessing.sequence.skipgrams",
    "signature": "(sequence, vocabulary_size, window_size=4, negative_samples=1.0, shuffle=True, categorical=False, sampling_table=None, seed=None)",
    "description": "Generates skipgram word pairs."
  },
  "2361": {
    "name": "apply_affine_transform",
    "module": "tf.keras.preprocessing.image",
    "fullName": "tf.keras.preprocessing.image.apply_affine_transform",
    "signature": "(x, theta=0, tx=0, ty=0, shear=0, zx=1, zy=1, row_axis=1, col_axis=2, channel_axis=0, fill_mode='nearest', cval=0.0, order=1)",
    "description": "Applies an affine transformation specified by the parameters given."
  },
  "2362": {
    "name": "apply_brightness_shift",
    "module": "tf.keras.preprocessing.image",
    "fullName": "tf.keras.preprocessing.image.apply_brightness_shift",
    "signature": "(x, brightness, scale=True)",
    "description": "Performs a brightness shift."
  },
  "2363": {
    "name": "apply_channel_shift",
    "module": "tf.keras.preprocessing.image",
    "fullName": "tf.keras.preprocessing.image.apply_channel_shift",
    "signature": "(x, intensity, channel_axis=0)",
    "description": "Performs a channel shift."
  },
  "2364": {
    "name": "array_to_img",
    "module": "tf.keras.preprocessing.image",
    "fullName": "tf.keras.preprocessing.image.array_to_img",
    "signature": "(x, data_format=None, scale=True, dtype=None)",
    "description": "Converts a 3D Numpy array to a PIL Image instance."
  },
  "2365": {
    "name": "img_to_array",
    "module": "tf.keras.preprocessing.image",
    "fullName": "tf.keras.preprocessing.image.img_to_array",
    "signature": "(img, data_format=None, dtype=None)",
    "description": "Converts a PIL Image instance to a Numpy array."
  },
  "2366": {
    "name": "random_channel_shift",
    "module": "tf.keras.preprocessing.image",
    "fullName": "tf.keras.preprocessing.image.random_channel_shift",
    "signature": "(x, intensity_range, channel_axis=0)",
    "description": "Performs a random channel shift."
  },
  "2367": {
    "name": "random_shear",
    "module": "tf.keras.preprocessing.image",
    "fullName": "tf.keras.preprocessing.image.random_shear",
    "signature": "(x, intensity, row_axis=1, col_axis=2, channel_axis=0, fill_mode='nearest', cval=0.0, interpolation_order=1)",
    "description": "Performs a random spatial shear of a Numpy image tensor."
  },
  "2368": {
    "name": "save_img",
    "module": "tf.keras.preprocessing.image",
    "fullName": "tf.keras.preprocessing.image.save_img",
    "signature": "(path, x, data_format=None, file_format=None, scale=True, **kwargs)",
    "description": "Saves an image stored as a Numpy array to a path or file object."
  },
  "2369": {
    "name": "smart_resize",
    "module": "tf.keras.preprocessing.image",
    "fullName": "tf.keras.preprocessing.image.smart_resize",
    "signature": "(x, size, interpolation='bilinear')",
    "description": "Resize images to a target size without aspect ratio distortion."
  },
  "2370": {
    "name": "Adadelta",
    "module": "tf.keras.optimizers",
    "fullName": "tf.keras.optimizers.Adadelta",
    "signature": "(learning_rate=0.001, rho=0.95, epsilon=1e-07, name='Adadelta', **kwargs)",
    "description": "Optimizer that implements the Adadelta algorithm."
  },
  "2371": {
    "name": "Adagrad",
    "module": "tf.keras.optimizers",
    "fullName": "tf.keras.optimizers.Adagrad",
    "signature": "(learning_rate=0.001, initial_accumulator_value=0.1, epsilon=1e-07, name='Adagrad', **kwargs)",
    "description": "Optimizer that implements the Adagrad algorithm."
  },
  "2372": {
    "name": "Adam",
    "module": "tf.keras.optimizers",
    "fullName": "tf.keras.optimizers.Adam",
    "signature": "(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, amsgrad=False, name='Adam', **kwargs)",
    "description": "Optimizer that implements the Adam algorithm."
  },
  "2373": {
    "name": "Adamax",
    "module": "tf.keras.optimizers",
    "fullName": "tf.keras.optimizers.Adamax",
    "signature": "(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, name='Adamax', **kwargs)",
    "description": "Optimizer that implements the Adamax algorithm."
  },
  "2374": {
    "name": "Ftrl",
    "module": "tf.keras.optimizers",
    "fullName": "tf.keras.optimizers.Ftrl",
    "signature": "(learning_rate=0.001, learning_rate_power=-0.5, initial_accumulator_value=0.1, l1_regularization_strength=0.0, l2_regularization_strength=0.0, name='Ftrl', l2_shrinkage_regularization_strength=0.0, beta=0.0, **kwargs)",
    "description": "Optimizer that implements the FTRL algorithm."
  },
  "2375": {
    "name": "Nadam",
    "module": "tf.keras.optimizers",
    "fullName": "tf.keras.optimizers.Nadam",
    "signature": "(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, name='Nadam', **kwargs)",
    "description": "Optimizer that implements the NAdam algorithm."
  },
  "2376": {
    "name": "Optimizer",
    "module": "tf.keras.optimizers",
    "fullName": "tf.keras.optimizers.Optimizer",
    "signature": "(name, gradient_aggregator=None, gradient_transformers=None, **kwargs)",
    "description": "Base class for Keras optimizers."
  },
  "2377": {
    "name": "RMSprop",
    "module": "tf.keras.optimizers",
    "fullName": "tf.keras.optimizers.RMSprop",
    "signature": "(learning_rate=0.001, rho=0.9, momentum=0.0, epsilon=1e-07, centered=False, name='RMSprop', **kwargs)",
    "description": "Optimizer that implements the RMSprop algorithm."
  },
  "2378": {
    "name": "SGD",
    "module": "tf.keras.optimizers",
    "fullName": "tf.keras.optimizers.SGD",
    "signature": "(learning_rate=0.01, momentum=0.0, nesterov=False, name='SGD', **kwargs)",
    "description": "Gradient descent (with momentum) optimizer."
  },
  "2379": {
    "name": "deserialize",
    "module": "tf.keras.optimizers",
    "fullName": "tf.keras.optimizers.deserialize",
    "signature": "(config, custom_objects=None, **kwargs)",
    "description": "Inverse of the `serialize` function."
  },
  "2380": {
    "name": "get",
    "module": "tf.keras.optimizers",
    "fullName": "tf.keras.optimizers.get",
    "signature": "(identifier, **kwargs)",
    "description": "Retrieves a Keras Optimizer instance."
  },
  "2381": {
    "name": "serialize",
    "module": "tf.keras.optimizers",
    "fullName": "tf.keras.optimizers.serialize",
    "signature": "(optimizer)",
    "description": "Serialize the optimizer configuration to JSON compatible python dict."
  },
  "2382": {
    "name": "Model",
    "module": "tf.keras.models",
    "fullName": "tf.keras.models.Model",
    "signature": "(*args, **kwargs)",
    "description": "`Model` groups layers into an object with training and inference features."
  },
  "2383": {
    "name": "Sequential",
    "module": "tf.keras.models",
    "fullName": "tf.keras.models.Sequential",
    "signature": "(layers=None, name=None)",
    "description": "`Sequential` groups a linear stack of layers into a `tf.keras.Model`."
  },
  "2384": {
    "name": "clone_model",
    "module": "tf.keras.models",
    "fullName": "tf.keras.models.clone_model",
    "signature": "(model, input_tensors=None, clone_function=None)",
    "description": "Clone a Functional or Sequential `Model` instance."
  },
  "2385": {
    "name": "load_model",
    "module": "tf.keras.models",
    "fullName": "tf.keras.models.load_model",
    "signature": "(filepath, custom_objects=None, compile=True, options=None)",
    "description": "Loads a model saved via `model.save()`."
  },
  "2386": {
    "name": "model_from_config",
    "module": "tf.keras.models",
    "fullName": "tf.keras.models.model_from_config",
    "signature": "(config, custom_objects=None)",
    "description": "Instantiates a Keras model from its config."
  },
  "2387": {
    "name": "model_from_json",
    "module": "tf.keras.models",
    "fullName": "tf.keras.models.model_from_json",
    "signature": "(json_string, custom_objects=None)",
    "description": "Parses a JSON model configuration string and returns a model instance."
  },
  "2388": {
    "name": "model_from_yaml",
    "module": "tf.keras.models",
    "fullName": "tf.keras.models.model_from_yaml",
    "signature": "(yaml_string, custom_objects=None)",
    "description": "Parses a yaml model configuration file and returns a model instance."
  },
  "2389": {
    "name": "save_model",
    "module": "tf.keras.models",
    "fullName": "tf.keras.models.save_model",
    "signature": "(model, filepath, overwrite=True, include_optimizer=True, save_format=None, signatures=None, options=None, save_traces=True)",
    "description": "Saves a model as a TensorFlow SavedModel or HDF5 file."
  },
  "2390": {
    "name": "SharpnessAwareMinimization",
    "module": "tf.keras.models.experimental",
    "fullName": "tf.keras.models.experimental.SharpnessAwareMinimization",
    "signature": "(model, rho=0.05, num_batch_splits=None, name=None)",
    "description": "Sharpness aware minimization (SAM) training flow."
  },
  "2391": {
    "name": "LossScaleOptimizer",
    "module": "tf.keras.mixed_precision",
    "fullName": "tf.keras.mixed_precision.LossScaleOptimizer",
    "signature": "(inner_optimizer, *args, **kwargs)",
    "description": "An optimizer that applies loss scaling to prevent numeric underflow."
  },
  "2392": {
    "name": "Policy",
    "module": "tf.keras.mixed_precision",
    "fullName": "tf.keras.mixed_precision.Policy",
    "signature": "(name)",
    "description": "A dtype policy for a Keras layer."
  },
  "2393": {
    "name": "global_policy",
    "module": "tf.keras.mixed_precision",
    "fullName": "tf.keras.mixed_precision.global_policy",
    "signature": "()",
    "description": "Returns the global dtype policy."
  },
  "2394": {
    "name": "set_global_policy",
    "module": "tf.keras.mixed_precision",
    "fullName": "tf.keras.mixed_precision.set_global_policy",
    "signature": "(policy)",
    "description": "Sets the global dtype policy."
  },
  "2395": {
    "name": "AUC",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.AUC",
    "signature": "(num_thresholds=200, curve='ROC', summation_method='interpolation', name=None, dtype=None, thresholds=None, multi_label=False, num_labels=None, label_weights=None, from_logits=False)",
    "description": "Approximates the AUC (Area under the curve) of the ROC or PR curves."
  },
  "2396": {
    "name": "Accuracy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.Accuracy",
    "signature": "(name='accuracy', dtype=None)",
    "description": "Calculates how often predictions equal labels."
  },
  "2397": {
    "name": "BinaryAccuracy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.BinaryAccuracy",
    "signature": "(name='binary_accuracy', dtype=None, threshold=0.5)",
    "description": "Calculates how often predictions match binary labels."
  },
  "2398": {
    "name": "BinaryCrossentropy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.BinaryCrossentropy",
    "signature": "(name='binary_crossentropy', dtype=None, from_logits=False, label_smoothing=0)",
    "description": "Computes the crossentropy metric between the labels and predictions."
  },
  "2399": {
    "name": "BinaryIoU",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.BinaryIoU",
    "signature": "(target_class_ids: Union[List[int], Tuple[int, ...]] = (0, 1), threshold=0.5, name=None, dtype=None)",
    "description": "Computes the Intersection-Over-Union metric for class 0 and/or 1."
  },
  "2400": {
    "name": "CategoricalAccuracy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.CategoricalAccuracy",
    "signature": "(name='categorical_accuracy', dtype=None)",
    "description": "Calculates how often predictions match one-hot labels."
  },
  "2401": {
    "name": "CategoricalCrossentropy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.CategoricalCrossentropy",
    "signature": "(name='categorical_crossentropy', dtype=None, from_logits=False, label_smoothing=0, axis=-1)",
    "description": "Computes the crossentropy metric between the labels and predictions."
  },
  "2402": {
    "name": "CategoricalHinge",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.CategoricalHinge",
    "signature": "(name='categorical_hinge', dtype=None)",
    "description": "Computes the categorical hinge metric between `y_true` and `y_pred`."
  },
  "2403": {
    "name": "CosineSimilarity",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.CosineSimilarity",
    "signature": "(name='cosine_similarity', dtype=None, axis=-1)",
    "description": "Computes the cosine similarity between the labels and predictions."
  },
  "2404": {
    "name": "FalseNegatives",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.FalseNegatives",
    "signature": "(thresholds=None, name=None, dtype=None)",
    "description": "Calculates the number of false negatives."
  },
  "2405": {
    "name": "FalsePositives",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.FalsePositives",
    "signature": "(thresholds=None, name=None, dtype=None)",
    "description": "Calculates the number of false positives."
  },
  "2406": {
    "name": "Hinge",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.Hinge",
    "signature": "(name='hinge', dtype=None)",
    "description": "Computes the hinge metric between `y_true` and `y_pred`."
  },
  "2407": {
    "name": "IoU",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.IoU",
    "signature": "(num_classes: int, target_class_ids: Union[List[int], Tuple[int, ...]], name: Optional[str] = None, dtype: Union[str, tensorflow.python.framework.dtypes.DType, NoneType] = None, ignore_class: Optional[int] = None, sparse_y_true: bool = True, sparse_y_pred: bool = True, axis: int = -1)",
    "description": "Computes the Intersection-Over-Union metric for specific target classes."
  },
  "2408": {
    "name": "KLD",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.KLD",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2409": {
    "name": "KLDivergence",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.KLDivergence",
    "signature": "(name='kullback_leibler_divergence', dtype=None)",
    "description": "Computes Kullback-Leibler divergence metric between `y_true` and"
  },
  "2410": {
    "name": "LogCoshError",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.LogCoshError",
    "signature": "(name='logcosh', dtype=None)",
    "description": "Computes the logarithm of the hyperbolic cosine of the prediction error."
  },
  "2411": {
    "name": "MAE",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.MAE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute error between labels and predictions."
  },
  "2412": {
    "name": "MAPE",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.MAPE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute percentage error between `y_true` and `y_pred`."
  },
  "2413": {
    "name": "MSE",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.MSE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared error between labels and predictions."
  },
  "2414": {
    "name": "MSLE",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.MSLE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared logarithmic error between `y_true` and `y_pred`."
  },
  "2415": {
    "name": "Mean",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.Mean",
    "signature": "(name='mean', dtype=None)",
    "description": "Computes the (weighted) mean of the given values."
  },
  "2416": {
    "name": "MeanAbsoluteError",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.MeanAbsoluteError",
    "signature": "(name='mean_absolute_error', dtype=None)",
    "description": "Computes the mean absolute error between the labels and predictions."
  },
  "2417": {
    "name": "MeanAbsolutePercentageError",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.MeanAbsolutePercentageError",
    "signature": "(name='mean_absolute_percentage_error', dtype=None)",
    "description": "Computes the mean absolute percentage error between `y_true` and"
  },
  "2418": {
    "name": "MeanIoU",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.MeanIoU",
    "signature": "(num_classes: int, name: Optional[str] = None, dtype: Union[str, tensorflow.python.framework.dtypes.DType, NoneType] = None, ignore_class: Optional[int] = None, sparse_y_true: bool = True, sparse_y_pred: bool = True, axis: int = -1)",
    "description": "Computes the mean Intersection-Over-Union metric."
  },
  "2419": {
    "name": "MeanMetricWrapper",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.MeanMetricWrapper",
    "signature": "(fn, name=None, dtype=None, **kwargs)",
    "description": "Wraps a stateless metric function with the Mean metric."
  },
  "2420": {
    "name": "MeanRelativeError",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.MeanRelativeError",
    "signature": "(normalizer, name=None, dtype=None)",
    "description": "Computes the mean relative error by normalizing with the given values."
  },
  "2421": {
    "name": "MeanSquaredError",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.MeanSquaredError",
    "signature": "(name='mean_squared_error', dtype=None)",
    "description": "Computes the mean squared error between `y_true` and `y_pred`."
  },
  "2422": {
    "name": "MeanSquaredLogarithmicError",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.MeanSquaredLogarithmicError",
    "signature": "(name='mean_squared_logarithmic_error', dtype=None)",
    "description": "Computes the mean squared logarithmic error between `y_true` and"
  },
  "2423": {
    "name": "MeanTensor",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.MeanTensor",
    "signature": "(name='mean_tensor', dtype=None, shape=None)",
    "description": "Computes the element-wise (weighted) mean of the given tensors."
  },
  "2424": {
    "name": "Metric",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.Metric",
    "signature": "(*args, **kwargs)",
    "description": "Encapsulates metric logic and state."
  },
  "2425": {
    "name": "OneHotIoU",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.OneHotIoU",
    "signature": "(num_classes: int, target_class_ids: Union[List[int], Tuple[int, ...]], name=None, dtype=None, ignore_class: Optional[int] = None, sparse_y_pred: bool = False, axis: int = -1)",
    "description": "Computes the Intersection-Over-Union metric for one-hot encoded labels."
  },
  "2426": {
    "name": "OneHotMeanIoU",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.OneHotMeanIoU",
    "signature": "(num_classes: int, name: str = None, dtype: Union[str, tensorflow.python.framework.dtypes.DType, NoneType] = None, ignore_class: Optional[int] = None, sparse_y_pred: bool = False, axis: int = -1)",
    "description": "Computes mean Intersection-Over-Union metric for one-hot encoded labels."
  },
  "2427": {
    "name": "Poisson",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.Poisson",
    "signature": "(name='poisson', dtype=None)",
    "description": "Computes the Poisson metric between `y_true` and `y_pred`."
  },
  "2428": {
    "name": "Precision",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.Precision",
    "signature": "(thresholds=None, top_k=None, class_id=None, name=None, dtype=None)",
    "description": "Computes the precision of the predictions with respect to the labels."
  },
  "2429": {
    "name": "PrecisionAtRecall",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.PrecisionAtRecall",
    "signature": "(recall, num_thresholds=200, class_id=None, name=None, dtype=None)",
    "description": "Computes best precision where recall is >= specified value."
  },
  "2430": {
    "name": "Recall",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.Recall",
    "signature": "(thresholds=None, top_k=None, class_id=None, name=None, dtype=None)",
    "description": "Computes the recall of the predictions with respect to the labels."
  },
  "2431": {
    "name": "RecallAtPrecision",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.RecallAtPrecision",
    "signature": "(precision, num_thresholds=200, class_id=None, name=None, dtype=None)",
    "description": "Computes best recall where precision is >= specified value."
  },
  "2432": {
    "name": "RootMeanSquaredError",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.RootMeanSquaredError",
    "signature": "(name='root_mean_squared_error', dtype=None)",
    "description": "Computes root mean squared error metric between `y_true` and `y_pred`."
  },
  "2433": {
    "name": "SensitivityAtSpecificity",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.SensitivityAtSpecificity",
    "signature": "(specificity, num_thresholds=200, class_id=None, name=None, dtype=None)",
    "description": "Computes best sensitivity where specificity is >= specified value."
  },
  "2434": {
    "name": "SparseCategoricalAccuracy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.SparseCategoricalAccuracy",
    "signature": "(name='sparse_categorical_accuracy', dtype=None)",
    "description": "Calculates how often predictions match integer labels."
  },
  "2435": {
    "name": "SparseCategoricalCrossentropy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.SparseCategoricalCrossentropy",
    "signature": "(name: str = 'sparse_categorical_crossentropy', dtype: Union[str, tensorflow.python.framework.dtypes.DType, NoneType] = None, from_logits: bool = False, ignore_class: Optional[int] = None, axis: int = -1)",
    "description": "Computes the crossentropy metric between the labels and predictions."
  },
  "2436": {
    "name": "SparseTopKCategoricalAccuracy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.SparseTopKCategoricalAccuracy",
    "signature": "(k=5, name='sparse_top_k_categorical_accuracy', dtype=None)",
    "description": "Computes how often integer targets are in the top `K` predictions."
  },
  "2437": {
    "name": "SpecificityAtSensitivity",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.SpecificityAtSensitivity",
    "signature": "(sensitivity, num_thresholds=200, class_id=None, name=None, dtype=None)",
    "description": "Computes best specificity where sensitivity is >= specified value."
  },
  "2438": {
    "name": "SquaredHinge",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.SquaredHinge",
    "signature": "(name='squared_hinge', dtype=None)",
    "description": "Computes the squared hinge metric between `y_true` and `y_pred`."
  },
  "2439": {
    "name": "Sum",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.Sum",
    "signature": "(name='sum', dtype=None)",
    "description": "Computes the (weighted) sum of the given values."
  },
  "2440": {
    "name": "TopKCategoricalAccuracy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.TopKCategoricalAccuracy",
    "signature": "(k=5, name='top_k_categorical_accuracy', dtype=None)",
    "description": "Computes how often targets are in the top `K` predictions."
  },
  "2441": {
    "name": "TrueNegatives",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.TrueNegatives",
    "signature": "(thresholds=None, name=None, dtype=None)",
    "description": "Calculates the number of true negatives."
  },
  "2442": {
    "name": "TruePositives",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.TruePositives",
    "signature": "(thresholds=None, name=None, dtype=None)",
    "description": "Calculates the number of true positives."
  },
  "2443": {
    "name": "binary_accuracy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.binary_accuracy",
    "signature": "(y_true, y_pred, threshold=0.5)",
    "description": "Calculates how often predictions match binary labels."
  },
  "2444": {
    "name": "binary_crossentropy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.binary_crossentropy",
    "signature": "(y_true, y_pred, from_logits=False, label_smoothing=0.0, axis=-1)",
    "description": "Computes the binary crossentropy loss."
  },
  "2445": {
    "name": "binary_focal_crossentropy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.binary_focal_crossentropy",
    "signature": "(y_true, y_pred, apply_class_balancing=False, alpha=0.25, gamma=2.0, from_logits=False, label_smoothing=0.0, axis=-1)",
    "description": "Computes the binary focal crossentropy loss."
  },
  "2446": {
    "name": "categorical_accuracy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.categorical_accuracy",
    "signature": "(y_true, y_pred)",
    "description": "Calculates how often predictions match one-hot labels."
  },
  "2447": {
    "name": "categorical_crossentropy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.categorical_crossentropy",
    "signature": "(y_true, y_pred, from_logits=False, label_smoothing=0.0, axis=-1)",
    "description": "Computes the categorical crossentropy loss."
  },
  "2448": {
    "name": "deserialize",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.deserialize",
    "signature": "(config, custom_objects=None)",
    "description": "Deserializes a serialized metric class/function instance."
  },
  "2449": {
    "name": "get",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.get",
    "signature": "(identifier)",
    "description": "Retrieves a Keras metric as a `function`/`Metric` class instance."
  },
  "2450": {
    "name": "hinge",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.hinge",
    "signature": "(y_true, y_pred)",
    "description": "Computes the hinge loss between `y_true` and `y_pred`."
  },
  "2451": {
    "name": "kl_divergence",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.kl_divergence",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2452": {
    "name": "kld",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.kld",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2453": {
    "name": "kullback_leibler_divergence",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.kullback_leibler_divergence",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2454": {
    "name": "log_cosh",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.log_cosh",
    "signature": "(y_true, y_pred)",
    "description": "Logarithm of the hyperbolic cosine of the prediction error."
  },
  "2455": {
    "name": "logcosh",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.logcosh",
    "signature": "(y_true, y_pred)",
    "description": "Logarithm of the hyperbolic cosine of the prediction error."
  },
  "2456": {
    "name": "mae",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.mae",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute error between labels and predictions."
  },
  "2457": {
    "name": "mape",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.mape",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute percentage error between `y_true` and `y_pred`."
  },
  "2458": {
    "name": "mean_absolute_error",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.mean_absolute_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute error between labels and predictions."
  },
  "2459": {
    "name": "mean_absolute_percentage_error",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.mean_absolute_percentage_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute percentage error between `y_true` and `y_pred`."
  },
  "2460": {
    "name": "mean_squared_error",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.mean_squared_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared error between labels and predictions."
  },
  "2461": {
    "name": "mean_squared_logarithmic_error",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.mean_squared_logarithmic_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared logarithmic error between `y_true` and `y_pred`."
  },
  "2462": {
    "name": "mse",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.mse",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared error between labels and predictions."
  },
  "2463": {
    "name": "msle",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.msle",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared logarithmic error between `y_true` and `y_pred`."
  },
  "2464": {
    "name": "poisson",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.poisson",
    "signature": "(y_true, y_pred)",
    "description": "Computes the Poisson loss between y_true and y_pred."
  },
  "2465": {
    "name": "serialize",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.serialize",
    "signature": "(metric)",
    "description": "Serializes metric function or `Metric` instance."
  },
  "2466": {
    "name": "sparse_categorical_accuracy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.sparse_categorical_accuracy",
    "signature": "(y_true, y_pred)",
    "description": "Calculates how often predictions match integer labels."
  },
  "2467": {
    "name": "sparse_categorical_crossentropy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.sparse_categorical_crossentropy",
    "signature": "(y_true, y_pred, from_logits=False, axis=-1, ignore_class=None)",
    "description": "Computes the sparse categorical crossentropy loss."
  },
  "2468": {
    "name": "sparse_top_k_categorical_accuracy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.sparse_top_k_categorical_accuracy",
    "signature": "(y_true, y_pred, k=5)",
    "description": "Computes how often integer targets are in the top `K` predictions."
  },
  "2469": {
    "name": "squared_hinge",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.squared_hinge",
    "signature": "(y_true, y_pred)",
    "description": "Computes the squared hinge loss between `y_true` and `y_pred`."
  },
  "2470": {
    "name": "top_k_categorical_accuracy",
    "module": "tf.keras.metrics",
    "fullName": "tf.keras.metrics.top_k_categorical_accuracy",
    "signature": "(y_true, y_pred, k=5)",
    "description": "Computes how often targets are in the top `K` predictions."
  },
  "2471": {
    "name": "BinaryCrossentropy",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.BinaryCrossentropy",
    "signature": "(from_logits=False, label_smoothing=0.0, axis=-1, reduction='auto', name='binary_crossentropy')",
    "description": "Computes the cross-entropy loss between true labels and predicted labels."
  },
  "2472": {
    "name": "BinaryFocalCrossentropy",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.BinaryFocalCrossentropy",
    "signature": "(apply_class_balancing=False, alpha=0.25, gamma=2.0, from_logits=False, label_smoothing=0.0, axis=-1, reduction='auto', name='binary_focal_crossentropy')",
    "description": "Computes the focal cross-entropy loss between true labels and predictions."
  },
  "2473": {
    "name": "CategoricalCrossentropy",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.CategoricalCrossentropy",
    "signature": "(from_logits=False, label_smoothing=0.0, axis=-1, reduction='auto', name='categorical_crossentropy')",
    "description": "Computes the crossentropy loss between the labels and predictions."
  },
  "2474": {
    "name": "CategoricalHinge",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.CategoricalHinge",
    "signature": "(reduction='auto', name='categorical_hinge')",
    "description": "Computes the categorical hinge loss between `y_true` and `y_pred`."
  },
  "2475": {
    "name": "CosineSimilarity",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.CosineSimilarity",
    "signature": "(axis=-1, reduction='auto', name='cosine_similarity')",
    "description": "Computes the cosine similarity between labels and predictions."
  },
  "2476": {
    "name": "Hinge",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.Hinge",
    "signature": "(reduction='auto', name='hinge')",
    "description": "Computes the hinge loss between `y_true` and `y_pred`."
  },
  "2477": {
    "name": "Huber",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.Huber",
    "signature": "(delta=1.0, reduction='auto', name='huber_loss')",
    "description": "Computes the Huber loss between `y_true` and `y_pred`."
  },
  "2478": {
    "name": "KLD",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.KLD",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2479": {
    "name": "KLDivergence",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.KLDivergence",
    "signature": "(reduction='auto', name='kl_divergence')",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2480": {
    "name": "LogCosh",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.LogCosh",
    "signature": "(reduction='auto', name='log_cosh')",
    "description": "Computes the logarithm of the hyperbolic cosine of the prediction error."
  },
  "2481": {
    "name": "Loss",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.Loss",
    "signature": "(reduction='auto', name=None)",
    "description": "Loss base class."
  },
  "2482": {
    "name": "MAE",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.MAE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute error between labels and predictions."
  },
  "2483": {
    "name": "MAPE",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.MAPE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute percentage error between `y_true` and `y_pred`."
  },
  "2484": {
    "name": "MSE",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.MSE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared error between labels and predictions."
  },
  "2485": {
    "name": "MSLE",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.MSLE",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared logarithmic error between `y_true` and `y_pred`."
  },
  "2486": {
    "name": "MeanAbsoluteError",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.MeanAbsoluteError",
    "signature": "(reduction='auto', name='mean_absolute_error')",
    "description": "Computes the mean of absolute difference between labels and predictions."
  },
  "2487": {
    "name": "MeanAbsolutePercentageError",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.MeanAbsolutePercentageError",
    "signature": "(reduction='auto', name='mean_absolute_percentage_error')",
    "description": "Computes the mean absolute percentage error between `y_true` and `y_pred`."
  },
  "2488": {
    "name": "MeanSquaredError",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.MeanSquaredError",
    "signature": "(reduction='auto', name='mean_squared_error')",
    "description": "Computes the mean of squares of errors between labels and predictions."
  },
  "2489": {
    "name": "MeanSquaredLogarithmicError",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.MeanSquaredLogarithmicError",
    "signature": "(reduction='auto', name='mean_squared_logarithmic_error')",
    "description": "Computes the mean squared logarithmic error between `y_true` and `y_pred`."
  },
  "2490": {
    "name": "Poisson",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.Poisson",
    "signature": "(reduction='auto', name='poisson')",
    "description": "Computes the Poisson loss between `y_true` and `y_pred`."
  },
  "2491": {
    "name": "Reduction",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.Reduction",
    "signature": "()",
    "description": "Types of loss reduction."
  },
  "2492": {
    "name": "SparseCategoricalCrossentropy",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.SparseCategoricalCrossentropy",
    "signature": "(from_logits=False, ignore_class=None, reduction='auto', name='sparse_categorical_crossentropy')",
    "description": "Computes the crossentropy loss between the labels and predictions."
  },
  "2493": {
    "name": "SquaredHinge",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.SquaredHinge",
    "signature": "(reduction='auto', name='squared_hinge')",
    "description": "Computes the squared hinge loss between `y_true` and `y_pred`."
  },
  "2494": {
    "name": "binary_crossentropy",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.binary_crossentropy",
    "signature": "(y_true, y_pred, from_logits=False, label_smoothing=0.0, axis=-1)",
    "description": "Computes the binary crossentropy loss."
  },
  "2495": {
    "name": "binary_focal_crossentropy",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.binary_focal_crossentropy",
    "signature": "(y_true, y_pred, apply_class_balancing=False, alpha=0.25, gamma=2.0, from_logits=False, label_smoothing=0.0, axis=-1)",
    "description": "Computes the binary focal crossentropy loss."
  },
  "2496": {
    "name": "categorical_crossentropy",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.categorical_crossentropy",
    "signature": "(y_true, y_pred, from_logits=False, label_smoothing=0.0, axis=-1)",
    "description": "Computes the categorical crossentropy loss."
  },
  "2497": {
    "name": "categorical_hinge",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.categorical_hinge",
    "signature": "(y_true, y_pred)",
    "description": "Computes the categorical hinge loss between `y_true` and `y_pred`."
  },
  "2498": {
    "name": "cosine_similarity",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.cosine_similarity",
    "signature": "(y_true, y_pred, axis=-1)",
    "description": "Computes the cosine similarity between labels and predictions."
  },
  "2499": {
    "name": "deserialize",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.deserialize",
    "signature": "(name, custom_objects=None)",
    "description": "Deserializes a serialized loss class/function instance."
  },
  "2500": {
    "name": "get",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.get",
    "signature": "(identifier)",
    "description": "Retrieves a Keras loss as a `function`/`Loss` class instance."
  },
  "2501": {
    "name": "hinge",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.hinge",
    "signature": "(y_true, y_pred)",
    "description": "Computes the hinge loss between `y_true` and `y_pred`."
  },
  "2502": {
    "name": "huber",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.huber",
    "signature": "(y_true, y_pred, delta=1.0)",
    "description": "Computes Huber loss value."
  },
  "2503": {
    "name": "kl_divergence",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.kl_divergence",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2504": {
    "name": "kld",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.kld",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2505": {
    "name": "kullback_leibler_divergence",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.kullback_leibler_divergence",
    "signature": "(y_true, y_pred)",
    "description": "Computes Kullback-Leibler divergence loss between `y_true` and `y_pred`."
  },
  "2506": {
    "name": "log_cosh",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.log_cosh",
    "signature": "(y_true, y_pred)",
    "description": "Logarithm of the hyperbolic cosine of the prediction error."
  },
  "2507": {
    "name": "logcosh",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.logcosh",
    "signature": "(y_true, y_pred)",
    "description": "Logarithm of the hyperbolic cosine of the prediction error."
  },
  "2508": {
    "name": "mae",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.mae",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute error between labels and predictions."
  },
  "2509": {
    "name": "mape",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.mape",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute percentage error between `y_true` and `y_pred`."
  },
  "2510": {
    "name": "mean_absolute_error",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.mean_absolute_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute error between labels and predictions."
  },
  "2511": {
    "name": "mean_absolute_percentage_error",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.mean_absolute_percentage_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean absolute percentage error between `y_true` and `y_pred`."
  },
  "2512": {
    "name": "mean_squared_error",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.mean_squared_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared error between labels and predictions."
  },
  "2513": {
    "name": "mean_squared_logarithmic_error",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.mean_squared_logarithmic_error",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared logarithmic error between `y_true` and `y_pred`."
  },
  "2514": {
    "name": "mse",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.mse",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared error between labels and predictions."
  },
  "2515": {
    "name": "msle",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.msle",
    "signature": "(y_true, y_pred)",
    "description": "Computes the mean squared logarithmic error between `y_true` and `y_pred`."
  },
  "2516": {
    "name": "poisson",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.poisson",
    "signature": "(y_true, y_pred)",
    "description": "Computes the Poisson loss between y_true and y_pred."
  },
  "2517": {
    "name": "serialize",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.serialize",
    "signature": "(loss)",
    "description": "Serializes loss function or `Loss` instance."
  },
  "2518": {
    "name": "sparse_categorical_crossentropy",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.sparse_categorical_crossentropy",
    "signature": "(y_true, y_pred, from_logits=False, axis=-1, ignore_class=None)",
    "description": "Computes the sparse categorical crossentropy loss."
  },
  "2519": {
    "name": "squared_hinge",
    "module": "tf.keras.losses",
    "fullName": "tf.keras.losses.squared_hinge",
    "signature": "(y_true, y_pred)",
    "description": "Computes the squared hinge loss between `y_true` and `y_pred`."
  },
  "2520": {
    "name": "AbstractRNNCell",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.AbstractRNNCell",
    "signature": "(*args, **kwargs)",
    "description": "Abstract object representing an RNN cell."
  },
  "2521": {
    "name": "Activation",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Activation",
    "signature": "(activation, **kwargs)",
    "description": "Applies an activation function to an output."
  },
  "2522": {
    "name": "ActivityRegularization",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.ActivityRegularization",
    "signature": "(l1=0.0, l2=0.0, **kwargs)",
    "description": "Layer that applies an update to the cost function based input activity."
  },
  "2523": {
    "name": "Add",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Add",
    "signature": "(*args, **kwargs)",
    "description": "Layer that adds a list of inputs."
  },
  "2524": {
    "name": "AdditiveAttention",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.AdditiveAttention",
    "signature": "(use_scale=True, **kwargs)",
    "description": "Additive attention layer, a.k.a. Bahdanau-style attention."
  },
  "2525": {
    "name": "AlphaDropout",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.AlphaDropout",
    "signature": "(rate, noise_shape=None, seed=None, **kwargs)",
    "description": "Applies Alpha Dropout to the input."
  },
  "2526": {
    "name": "Attention",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Attention",
    "signature": "(use_scale=False, score_mode='dot', **kwargs)",
    "description": "Dot-product attention layer, a.k.a. Luong-style attention."
  },
  "2527": {
    "name": "Average",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Average",
    "signature": "(*args, **kwargs)",
    "description": "Layer that averages a list of inputs element-wise."
  },
  "2528": {
    "name": "AveragePooling1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.AveragePooling1D",
    "signature": "(pool_size=2, strides=None, padding='valid', data_format='channels_last', **kwargs)",
    "description": "Average pooling for temporal data."
  },
  "2529": {
    "name": "AveragePooling2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.AveragePooling2D",
    "signature": "(pool_size=(2, 2), strides=None, padding='valid', data_format=None, **kwargs)",
    "description": "Average pooling operation for spatial data."
  },
  "2530": {
    "name": "AveragePooling3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.AveragePooling3D",
    "signature": "(pool_size=(2, 2, 2), strides=None, padding='valid', data_format=None, **kwargs)",
    "description": "Average pooling operation for 3D data (spatial or spatio-temporal)."
  },
  "2531": {
    "name": "AvgPool1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.AvgPool1D",
    "signature": "(pool_size=2, strides=None, padding='valid', data_format='channels_last', **kwargs)",
    "description": "Average pooling for temporal data."
  },
  "2532": {
    "name": "AvgPool2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.AvgPool2D",
    "signature": "(pool_size=(2, 2), strides=None, padding='valid', data_format=None, **kwargs)",
    "description": "Average pooling operation for spatial data."
  },
  "2533": {
    "name": "AvgPool3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.AvgPool3D",
    "signature": "(pool_size=(2, 2, 2), strides=None, padding='valid', data_format=None, **kwargs)",
    "description": "Average pooling operation for 3D data (spatial or spatio-temporal)."
  },
  "2534": {
    "name": "BatchNormalization",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.BatchNormalization",
    "signature": "(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True, beta_initializer='zeros', gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, **kwargs)",
    "description": "Layer that normalizes its inputs."
  },
  "2535": {
    "name": "Bidirectional",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Bidirectional",
    "signature": "(layer, merge_mode='concat', weights=None, backward_layer=None, **kwargs)",
    "description": "Bidirectional wrapper for RNNs."
  },
  "2536": {
    "name": "CategoryEncoding",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.CategoryEncoding",
    "signature": "(num_tokens=None, output_mode='multi_hot', sparse=False, **kwargs)",
    "description": "A preprocessing layer which encodes integer features."
  },
  "2537": {
    "name": "CenterCrop",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.CenterCrop",
    "signature": "(height, width, **kwargs)",
    "description": "A preprocessing layer which crops images."
  },
  "2538": {
    "name": "Concatenate",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Concatenate",
    "signature": "(axis=-1, **kwargs)",
    "description": "Layer that concatenates a list of inputs."
  },
  "2539": {
    "name": "Conv1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Conv1D",
    "signature": "(filters, kernel_size, strides=1, padding='valid', data_format='channels_last', dilation_rate=1, groups=1, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "1D convolution layer (e.g. temporal convolution)."
  },
  "2540": {
    "name": "Conv1DTranspose",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Conv1DTranspose",
    "signature": "(filters, kernel_size, strides=1, padding='valid', output_padding=None, data_format=None, dilation_rate=1, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "Transposed convolution layer (sometimes called Deconvolution)."
  },
  "2541": {
    "name": "Conv2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Conv2D",
    "signature": "(filters, kernel_size, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1), groups=1, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "2D convolution layer (e.g. spatial convolution over images)."
  },
  "2542": {
    "name": "Conv2DTranspose",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Conv2DTranspose",
    "signature": "(filters, kernel_size, strides=(1, 1), padding='valid', output_padding=None, data_format=None, dilation_rate=(1, 1), activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "Transposed convolution layer (sometimes called Deconvolution)."
  },
  "2543": {
    "name": "Conv3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Conv3D",
    "signature": "(filters, kernel_size, strides=(1, 1, 1), padding='valid', data_format=None, dilation_rate=(1, 1, 1), groups=1, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "3D convolution layer (e.g. spatial convolution over volumes)."
  },
  "2544": {
    "name": "Conv3DTranspose",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Conv3DTranspose",
    "signature": "(filters, kernel_size, strides=(1, 1, 1), padding='valid', output_padding=None, data_format=None, dilation_rate=(1, 1, 1), activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "Transposed convolution layer (sometimes called Deconvolution)."
  },
  "2545": {
    "name": "ConvLSTM1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.ConvLSTM1D",
    "signature": "(filters, kernel_size, strides=1, padding='valid', data_format=None, dilation_rate=1, activation='tanh', recurrent_activation='hard_sigmoid', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', unit_forget_bias=True, kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, return_sequences=False, return_state=False, go_backwards=False, stateful=False, dropout=0.0, recurrent_dropout=0.0, **kwargs)",
    "description": "1D Convolutional LSTM."
  },
  "2546": {
    "name": "ConvLSTM2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.ConvLSTM2D",
    "signature": "(filters, kernel_size, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1), activation='tanh', recurrent_activation='hard_sigmoid', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', unit_forget_bias=True, kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, return_sequences=False, return_state=False, go_backwards=False, stateful=False, dropout=0.0, recurrent_dropout=0.0, **kwargs)",
    "description": "2D Convolutional LSTM."
  },
  "2547": {
    "name": "ConvLSTM3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.ConvLSTM3D",
    "signature": "(filters, kernel_size, strides=(1, 1, 1), padding='valid', data_format=None, dilation_rate=(1, 1, 1), activation='tanh', recurrent_activation='hard_sigmoid', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', unit_forget_bias=True, kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, return_sequences=False, return_state=False, go_backwards=False, stateful=False, dropout=0.0, recurrent_dropout=0.0, **kwargs)",
    "description": "3D Convolutional LSTM."
  },
  "2548": {
    "name": "Convolution1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Convolution1D",
    "signature": "(filters, kernel_size, strides=1, padding='valid', data_format='channels_last', dilation_rate=1, groups=1, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "1D convolution layer (e.g. temporal convolution)."
  },
  "2549": {
    "name": "Convolution1DTranspose",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Convolution1DTranspose",
    "signature": "(filters, kernel_size, strides=1, padding='valid', output_padding=None, data_format=None, dilation_rate=1, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "Transposed convolution layer (sometimes called Deconvolution)."
  },
  "2550": {
    "name": "Convolution2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Convolution2D",
    "signature": "(filters, kernel_size, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1), groups=1, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "2D convolution layer (e.g. spatial convolution over images)."
  },
  "2551": {
    "name": "Convolution2DTranspose",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Convolution2DTranspose",
    "signature": "(filters, kernel_size, strides=(1, 1), padding='valid', output_padding=None, data_format=None, dilation_rate=(1, 1), activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "Transposed convolution layer (sometimes called Deconvolution)."
  },
  "2552": {
    "name": "Convolution3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Convolution3D",
    "signature": "(filters, kernel_size, strides=(1, 1, 1), padding='valid', data_format=None, dilation_rate=(1, 1, 1), groups=1, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "3D convolution layer (e.g. spatial convolution over volumes)."
  },
  "2553": {
    "name": "Convolution3DTranspose",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Convolution3DTranspose",
    "signature": "(filters, kernel_size, strides=(1, 1, 1), padding='valid', output_padding=None, data_format=None, dilation_rate=(1, 1, 1), activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "Transposed convolution layer (sometimes called Deconvolution)."
  },
  "2554": {
    "name": "Cropping1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Cropping1D",
    "signature": "(cropping=(1, 1), **kwargs)",
    "description": "Cropping layer for 1D input (e.g. temporal sequence)."
  },
  "2555": {
    "name": "Cropping2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Cropping2D",
    "signature": "(cropping=((0, 0), (0, 0)), data_format=None, **kwargs)",
    "description": "Cropping layer for 2D input (e.g. picture)."
  },
  "2556": {
    "name": "Cropping3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Cropping3D",
    "signature": "(cropping=((1, 1), (1, 1), (1, 1)), data_format=None, **kwargs)",
    "description": "Cropping layer for 3D data (e.g. spatial or spatio-temporal)."
  },
  "2557": {
    "name": "Dense",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Dense",
    "signature": "(units, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "Just your regular densely-connected NN layer."
  },
  "2558": {
    "name": "DenseFeatures",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.DenseFeatures",
    "signature": "(feature_columns, trainable=True, name=None, **kwargs)",
    "description": "A layer that produces a dense `Tensor` based on given `feature_columns`."
  },
  "2559": {
    "name": "DepthwiseConv1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.DepthwiseConv1D",
    "signature": "(kernel_size, strides=1, padding='valid', depth_multiplier=1, data_format=None, dilation_rate=1, activation=None, use_bias=True, depthwise_initializer='glorot_uniform', bias_initializer='zeros', depthwise_regularizer=None, bias_regularizer=None, activity_regularizer=None, depthwise_constraint=None, bias_constraint=None, **kwargs)",
    "description": "Depthwise 1D convolution."
  },
  "2560": {
    "name": "DepthwiseConv2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.DepthwiseConv2D",
    "signature": "(kernel_size, strides=(1, 1), padding='valid', depth_multiplier=1, data_format=None, dilation_rate=(1, 1), activation=None, use_bias=True, depthwise_initializer='glorot_uniform', bias_initializer='zeros', depthwise_regularizer=None, bias_regularizer=None, activity_regularizer=None, depthwise_constraint=None, bias_constraint=None, **kwargs)",
    "description": "Depthwise 2D convolution."
  },
  "2561": {
    "name": "Discretization",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Discretization",
    "signature": "(bin_boundaries=None, num_bins=None, epsilon=0.01, output_mode='int', sparse=False, **kwargs)",
    "description": "A preprocessing layer which buckets continuous features by ranges."
  },
  "2562": {
    "name": "Dot",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Dot",
    "signature": "(axes, normalize=False, **kwargs)",
    "description": "Layer that computes a dot product between samples in two tensors."
  },
  "2563": {
    "name": "Dropout",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Dropout",
    "signature": "(rate, noise_shape=None, seed=None, **kwargs)",
    "description": "Applies Dropout to the input."
  },
  "2564": {
    "name": "ELU",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.ELU",
    "signature": "(alpha=1.0, **kwargs)",
    "description": "Exponential Linear Unit."
  },
  "2565": {
    "name": "EinsumDense",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.EinsumDense",
    "signature": "(equation, output_shape, activation=None, bias_axes=None, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "A layer that uses `tf.einsum` as the backing computation."
  },
  "2566": {
    "name": "Embedding",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Embedding",
    "signature": "(input_dim, output_dim, embeddings_initializer='uniform', embeddings_regularizer=None, activity_regularizer=None, embeddings_constraint=None, mask_zero=False, input_length=None, **kwargs)",
    "description": "Turns positive integers (indexes) into dense vectors of fixed size."
  },
  "2567": {
    "name": "Flatten",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Flatten",
    "signature": "(data_format=None, **kwargs)",
    "description": "Flattens the input. Does not affect the batch size."
  },
  "2568": {
    "name": "GRU",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GRU",
    "signature": "(units, activation='tanh', recurrent_activation='sigmoid', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, return_sequences=False, return_state=False, go_backwards=False, stateful=False, unroll=False, time_major=False, reset_after=True, **kwargs)",
    "description": "Gated Recurrent Unit - Cho et al. 2014."
  },
  "2569": {
    "name": "GRUCell",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GRUCell",
    "signature": "(units, activation='tanh', recurrent_activation='sigmoid', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, reset_after=True, **kwargs)",
    "description": "Cell class for the GRU layer."
  },
  "2570": {
    "name": "GaussianDropout",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GaussianDropout",
    "signature": "(rate, seed=None, **kwargs)",
    "description": "Apply multiplicative 1-centered Gaussian noise."
  },
  "2571": {
    "name": "GaussianNoise",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GaussianNoise",
    "signature": "(stddev, seed=None, **kwargs)",
    "description": "Apply additive zero-centered Gaussian noise."
  },
  "2572": {
    "name": "GlobalAveragePooling1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GlobalAveragePooling1D",
    "signature": "(data_format='channels_last', **kwargs)",
    "description": "Global average pooling operation for temporal data."
  },
  "2573": {
    "name": "GlobalAveragePooling2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GlobalAveragePooling2D",
    "signature": "(*args, **kwargs)",
    "description": "Global average pooling operation for spatial data."
  },
  "2574": {
    "name": "GlobalAveragePooling3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GlobalAveragePooling3D",
    "signature": "(*args, **kwargs)",
    "description": "Global Average pooling operation for 3D data."
  },
  "2575": {
    "name": "GlobalAvgPool1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GlobalAvgPool1D",
    "signature": "(data_format='channels_last', **kwargs)",
    "description": "Global average pooling operation for temporal data."
  },
  "2576": {
    "name": "GlobalAvgPool2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GlobalAvgPool2D",
    "signature": "(*args, **kwargs)",
    "description": "Global average pooling operation for spatial data."
  },
  "2577": {
    "name": "GlobalAvgPool3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GlobalAvgPool3D",
    "signature": "(*args, **kwargs)",
    "description": "Global Average pooling operation for 3D data."
  },
  "2578": {
    "name": "GlobalMaxPool1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GlobalMaxPool1D",
    "signature": "(*args, **kwargs)",
    "description": "Global max pooling operation for 1D temporal data."
  },
  "2579": {
    "name": "GlobalMaxPool2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GlobalMaxPool2D",
    "signature": "(*args, **kwargs)",
    "description": "Global max pooling operation for spatial data."
  },
  "2580": {
    "name": "GlobalMaxPool3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GlobalMaxPool3D",
    "signature": "(*args, **kwargs)",
    "description": "Global Max pooling operation for 3D data."
  },
  "2581": {
    "name": "GlobalMaxPooling1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GlobalMaxPooling1D",
    "signature": "(*args, **kwargs)",
    "description": "Global max pooling operation for 1D temporal data."
  },
  "2582": {
    "name": "GlobalMaxPooling2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GlobalMaxPooling2D",
    "signature": "(*args, **kwargs)",
    "description": "Global max pooling operation for spatial data."
  },
  "2583": {
    "name": "GlobalMaxPooling3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.GlobalMaxPooling3D",
    "signature": "(*args, **kwargs)",
    "description": "Global Max pooling operation for 3D data."
  },
  "2584": {
    "name": "Hashing",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Hashing",
    "signature": "(num_bins, mask_value=None, salt=None, output_mode='int', sparse=False, **kwargs)",
    "description": "A preprocessing layer which hashes and bins categorical features."
  },
  "2585": {
    "name": "InputLayer",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.InputLayer",
    "signature": "(input_shape=None, batch_size=None, dtype=None, input_tensor=None, sparse=None, name=None, ragged=None, type_spec=None, **kwargs)",
    "description": "Layer to be used as an entry point into a Network (a graph of layers)."
  },
  "2586": {
    "name": "InputSpec",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.InputSpec",
    "signature": "(dtype=None, shape=None, ndim=None, max_ndim=None, min_ndim=None, axes=None, allow_last_axis_squeeze=False, name=None)",
    "description": "Specifies the rank, dtype and shape of every input to a layer."
  },
  "2587": {
    "name": "IntegerLookup",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.IntegerLookup",
    "signature": "(max_tokens=None, num_oov_indices=1, mask_token=None, oov_token=-1, vocabulary=None, vocabulary_dtype='int64', idf_weights=None, invert=False, output_mode='int', sparse=False, pad_to_max_tokens=False, **kwargs)",
    "description": "A preprocessing layer which maps integer features to contiguous ranges."
  },
  "2588": {
    "name": "LSTM",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.LSTM",
    "signature": "(units, activation='tanh', recurrent_activation='sigmoid', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', unit_forget_bias=True, kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, return_sequences=False, return_state=False, go_backwards=False, stateful=False, time_major=False, unroll=False, **kwargs)",
    "description": "Long Short-Term Memory layer - Hochreiter 1997."
  },
  "2589": {
    "name": "LSTMCell",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.LSTMCell",
    "signature": "(units, activation='tanh', recurrent_activation='sigmoid', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', unit_forget_bias=True, kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, **kwargs)",
    "description": "Cell class for the LSTM layer."
  },
  "2590": {
    "name": "Lambda",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Lambda",
    "signature": "(function, output_shape=None, mask=None, arguments=None, **kwargs)",
    "description": "Wraps arbitrary expressions as a `Layer` object."
  },
  "2591": {
    "name": "Layer",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Layer",
    "signature": "(trainable=True, name=None, dtype=None, dynamic=False, **kwargs)",
    "description": "This is the class from which all layers inherit."
  },
  "2592": {
    "name": "LayerNormalization",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.LayerNormalization",
    "signature": "(axis=-1, epsilon=0.001, center=True, scale=True, beta_initializer='zeros', gamma_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, **kwargs)",
    "description": "Layer normalization layer (Ba et al., 2016)."
  },
  "2593": {
    "name": "LeakyReLU",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.LeakyReLU",
    "signature": "(alpha=0.3, **kwargs)",
    "description": "Leaky version of a Rectified Linear Unit."
  },
  "2594": {
    "name": "LocallyConnected1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.LocallyConnected1D",
    "signature": "(filters, kernel_size, strides=1, padding='valid', data_format=None, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, implementation=1, **kwargs)",
    "description": "Locally-connected layer for 1D inputs."
  },
  "2595": {
    "name": "LocallyConnected2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.LocallyConnected2D",
    "signature": "(filters, kernel_size, strides=(1, 1), padding='valid', data_format=None, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, implementation=1, **kwargs)",
    "description": "Locally-connected layer for 2D inputs."
  },
  "2596": {
    "name": "Masking",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Masking",
    "signature": "(mask_value=0.0, **kwargs)",
    "description": "Masks a sequence by using a mask value to skip timesteps."
  },
  "2597": {
    "name": "MaxPool1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.MaxPool1D",
    "signature": "(pool_size=2, strides=None, padding='valid', data_format='channels_last', **kwargs)",
    "description": "Max pooling operation for 1D temporal data."
  },
  "2598": {
    "name": "MaxPool2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.MaxPool2D",
    "signature": "(pool_size=(2, 2), strides=None, padding='valid', data_format=None, **kwargs)",
    "description": "Max pooling operation for 2D spatial data."
  },
  "2599": {
    "name": "MaxPool3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.MaxPool3D",
    "signature": "(pool_size=(2, 2, 2), strides=None, padding='valid', data_format=None, **kwargs)",
    "description": "Max pooling operation for 3D data (spatial or spatio-temporal)."
  },
  "2600": {
    "name": "MaxPooling1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.MaxPooling1D",
    "signature": "(pool_size=2, strides=None, padding='valid', data_format='channels_last', **kwargs)",
    "description": "Max pooling operation for 1D temporal data."
  },
  "2601": {
    "name": "MaxPooling2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.MaxPooling2D",
    "signature": "(pool_size=(2, 2), strides=None, padding='valid', data_format=None, **kwargs)",
    "description": "Max pooling operation for 2D spatial data."
  },
  "2602": {
    "name": "MaxPooling3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.MaxPooling3D",
    "signature": "(pool_size=(2, 2, 2), strides=None, padding='valid', data_format=None, **kwargs)",
    "description": "Max pooling operation for 3D data (spatial or spatio-temporal)."
  },
  "2603": {
    "name": "Maximum",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Maximum",
    "signature": "(*args, **kwargs)",
    "description": "Layer that computes the maximum (element-wise) a list of inputs."
  },
  "2604": {
    "name": "Minimum",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Minimum",
    "signature": "(*args, **kwargs)",
    "description": "Layer that computes the minimum (element-wise) a list of inputs."
  },
  "2605": {
    "name": "MultiHeadAttention",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.MultiHeadAttention",
    "signature": "(num_heads, key_dim, value_dim=None, dropout=0.0, use_bias=True, output_shape=None, attention_axes=None, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "MultiHeadAttention layer."
  },
  "2606": {
    "name": "Multiply",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Multiply",
    "signature": "(*args, **kwargs)",
    "description": "Layer that multiplies (element-wise) a list of inputs."
  },
  "2607": {
    "name": "Normalization",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Normalization",
    "signature": "(axis=-1, mean=None, variance=None, invert=False, **kwargs)",
    "description": "A preprocessing layer which normalizes continuous features."
  },
  "2608": {
    "name": "PReLU",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.PReLU",
    "signature": "(alpha_initializer='zeros', alpha_regularizer=None, alpha_constraint=None, shared_axes=None, **kwargs)",
    "description": "Parametric Rectified Linear Unit."
  },
  "2609": {
    "name": "Permute",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Permute",
    "signature": "(dims, **kwargs)",
    "description": "Permutes the dimensions of the input according to a given pattern."
  },
  "2610": {
    "name": "RNN",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.RNN",
    "signature": "(cell, return_sequences=False, return_state=False, go_backwards=False, stateful=False, unroll=False, time_major=False, **kwargs)",
    "description": "Base class for recurrent layers."
  },
  "2611": {
    "name": "RandomBrightness",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.RandomBrightness",
    "signature": "(factor, value_range=(0, 255), seed=None, **kwargs)",
    "description": "A preprocessing layer which randomly adjusts brightness during training."
  },
  "2612": {
    "name": "RandomContrast",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.RandomContrast",
    "signature": "(factor, seed=None, **kwargs)",
    "description": "A preprocessing layer which randomly adjusts contrast during training."
  },
  "2613": {
    "name": "RandomCrop",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.RandomCrop",
    "signature": "(height, width, seed=None, **kwargs)",
    "description": "A preprocessing layer which randomly crops images during training."
  },
  "2614": {
    "name": "RandomFlip",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.RandomFlip",
    "signature": "(mode='horizontal_and_vertical', seed=None, **kwargs)",
    "description": "A preprocessing layer which randomly flips images during training."
  },
  "2615": {
    "name": "RandomHeight",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.RandomHeight",
    "signature": "(factor, interpolation='bilinear', seed=None, **kwargs)",
    "description": "A preprocessing layer which randomly varies image height during training."
  },
  "2616": {
    "name": "RandomRotation",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.RandomRotation",
    "signature": "(factor, fill_mode='reflect', interpolation='bilinear', seed=None, fill_value=0.0, **kwargs)",
    "description": "A preprocessing layer which randomly rotates images during training."
  },
  "2617": {
    "name": "RandomTranslation",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.RandomTranslation",
    "signature": "(height_factor, width_factor, fill_mode='reflect', interpolation='bilinear', seed=None, fill_value=0.0, **kwargs)",
    "description": "A preprocessing layer which randomly translates images during training."
  },
  "2618": {
    "name": "RandomWidth",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.RandomWidth",
    "signature": "(factor, interpolation='bilinear', seed=None, **kwargs)",
    "description": "A preprocessing layer which randomly varies image width during training."
  },
  "2619": {
    "name": "RandomZoom",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.RandomZoom",
    "signature": "(height_factor, width_factor=None, fill_mode='reflect', interpolation='bilinear', seed=None, fill_value=0.0, **kwargs)",
    "description": "A preprocessing layer which randomly zooms images during training."
  },
  "2620": {
    "name": "ReLU",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.ReLU",
    "signature": "(max_value=None, negative_slope=0.0, threshold=0.0, **kwargs)",
    "description": "Rectified Linear Unit activation function."
  },
  "2621": {
    "name": "RepeatVector",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.RepeatVector",
    "signature": "(n, **kwargs)",
    "description": "Repeats the input n times."
  },
  "2622": {
    "name": "Rescaling",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Rescaling",
    "signature": "(scale, offset=0.0, **kwargs)",
    "description": "A preprocessing layer which rescales input values to a new range."
  },
  "2623": {
    "name": "Reshape",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Reshape",
    "signature": "(target_shape, **kwargs)",
    "description": "Layer that reshapes inputs into the given shape."
  },
  "2624": {
    "name": "Resizing",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Resizing",
    "signature": "(height, width, interpolation='bilinear', crop_to_aspect_ratio=False, **kwargs)",
    "description": "A preprocessing layer which resizes images."
  },
  "2625": {
    "name": "SeparableConv1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.SeparableConv1D",
    "signature": "(filters, kernel_size, strides=1, padding='valid', data_format=None, dilation_rate=1, depth_multiplier=1, activation=None, use_bias=True, depthwise_initializer='glorot_uniform', pointwise_initializer='glorot_uniform', bias_initializer='zeros', depthwise_regularizer=None, pointwise_regularizer=None, bias_regularizer=None, activity_regularizer=None, depthwise_constraint=None, pointwise_constraint=None, bias_constraint=None, **kwargs)",
    "description": "Depthwise separable 1D convolution."
  },
  "2626": {
    "name": "SeparableConv2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.SeparableConv2D",
    "signature": "(filters, kernel_size, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1), depth_multiplier=1, activation=None, use_bias=True, depthwise_initializer='glorot_uniform', pointwise_initializer='glorot_uniform', bias_initializer='zeros', depthwise_regularizer=None, pointwise_regularizer=None, bias_regularizer=None, activity_regularizer=None, depthwise_constraint=None, pointwise_constraint=None, bias_constraint=None, **kwargs)",
    "description": "Depthwise separable 2D convolution."
  },
  "2627": {
    "name": "SeparableConvolution1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.SeparableConvolution1D",
    "signature": "(filters, kernel_size, strides=1, padding='valid', data_format=None, dilation_rate=1, depth_multiplier=1, activation=None, use_bias=True, depthwise_initializer='glorot_uniform', pointwise_initializer='glorot_uniform', bias_initializer='zeros', depthwise_regularizer=None, pointwise_regularizer=None, bias_regularizer=None, activity_regularizer=None, depthwise_constraint=None, pointwise_constraint=None, bias_constraint=None, **kwargs)",
    "description": "Depthwise separable 1D convolution."
  },
  "2628": {
    "name": "SeparableConvolution2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.SeparableConvolution2D",
    "signature": "(filters, kernel_size, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1), depth_multiplier=1, activation=None, use_bias=True, depthwise_initializer='glorot_uniform', pointwise_initializer='glorot_uniform', bias_initializer='zeros', depthwise_regularizer=None, pointwise_regularizer=None, bias_regularizer=None, activity_regularizer=None, depthwise_constraint=None, pointwise_constraint=None, bias_constraint=None, **kwargs)",
    "description": "Depthwise separable 2D convolution."
  },
  "2629": {
    "name": "SimpleRNN",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.SimpleRNN",
    "signature": "(units, activation='tanh', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, return_sequences=False, return_state=False, go_backwards=False, stateful=False, unroll=False, **kwargs)",
    "description": "Fully-connected RNN where the output is to be fed back to input."
  },
  "2630": {
    "name": "SimpleRNNCell",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.SimpleRNNCell",
    "signature": "(units, activation='tanh', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, **kwargs)",
    "description": "Cell class for SimpleRNN."
  },
  "2631": {
    "name": "Softmax",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Softmax",
    "signature": "(axis=-1, **kwargs)",
    "description": "Softmax activation function."
  },
  "2632": {
    "name": "SpatialDropout1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.SpatialDropout1D",
    "signature": "(rate, **kwargs)",
    "description": "Spatial 1D version of Dropout."
  },
  "2633": {
    "name": "SpatialDropout2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.SpatialDropout2D",
    "signature": "(rate, data_format=None, **kwargs)",
    "description": "Spatial 2D version of Dropout."
  },
  "2634": {
    "name": "SpatialDropout3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.SpatialDropout3D",
    "signature": "(rate, data_format=None, **kwargs)",
    "description": "Spatial 3D version of Dropout."
  },
  "2635": {
    "name": "StackedRNNCells",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.StackedRNNCells",
    "signature": "(cells, **kwargs)",
    "description": "Wrapper allowing a stack of RNN cells to behave as a single cell."
  },
  "2636": {
    "name": "StringLookup",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.StringLookup",
    "signature": "(max_tokens=None, num_oov_indices=1, mask_token=None, oov_token='[UNK]', vocabulary=None, idf_weights=None, encoding=None, invert=False, output_mode='int', sparse=False, pad_to_max_tokens=False, **kwargs)",
    "description": "A preprocessing layer which maps string features to integer indices."
  },
  "2637": {
    "name": "Subtract",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Subtract",
    "signature": "(*args, **kwargs)",
    "description": "Layer that subtracts two inputs."
  },
  "2638": {
    "name": "TextVectorization",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.TextVectorization",
    "signature": "(max_tokens=None, standardize='lower_and_strip_punctuation', split='whitespace', ngrams=None, output_mode='int', output_sequence_length=None, pad_to_max_tokens=False, vocabulary=None, idf_weights=None, sparse=False, ragged=False, **kwargs)",
    "description": "A preprocessing layer which maps text features to integer sequences."
  },
  "2639": {
    "name": "ThresholdedReLU",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.ThresholdedReLU",
    "signature": "(theta=1.0, **kwargs)",
    "description": "Thresholded Rectified Linear Unit."
  },
  "2640": {
    "name": "TimeDistributed",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.TimeDistributed",
    "signature": "(layer, **kwargs)",
    "description": "This wrapper allows to apply a layer to every temporal slice of an input."
  },
  "2641": {
    "name": "UnitNormalization",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.UnitNormalization",
    "signature": "(axis=-1, **kwargs)",
    "description": "Unit normalization layer."
  },
  "2642": {
    "name": "UpSampling1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.UpSampling1D",
    "signature": "(size=2, **kwargs)",
    "description": "Upsampling layer for 1D inputs."
  },
  "2643": {
    "name": "UpSampling2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.UpSampling2D",
    "signature": "(size=(2, 2), data_format=None, interpolation='nearest', **kwargs)",
    "description": "Upsampling layer for 2D inputs."
  },
  "2644": {
    "name": "UpSampling3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.UpSampling3D",
    "signature": "(size=(2, 2, 2), data_format=None, **kwargs)",
    "description": "Upsampling layer for 3D inputs."
  },
  "2645": {
    "name": "Wrapper",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.Wrapper",
    "signature": "(layer, **kwargs)",
    "description": "Abstract wrapper base class."
  },
  "2646": {
    "name": "ZeroPadding1D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.ZeroPadding1D",
    "signature": "(padding=1, **kwargs)",
    "description": "Zero-padding layer for 1D input (e.g. temporal sequence)."
  },
  "2647": {
    "name": "ZeroPadding2D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.ZeroPadding2D",
    "signature": "(padding=(1, 1), data_format=None, **kwargs)",
    "description": "Zero-padding layer for 2D input (e.g. picture)."
  },
  "2648": {
    "name": "ZeroPadding3D",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.ZeroPadding3D",
    "signature": "(padding=(1, 1, 1), data_format=None, **kwargs)",
    "description": "Zero-padding layer for 3D data (spatial or spatio-temporal)."
  },
  "2649": {
    "name": "add",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.add",
    "signature": "(inputs, **kwargs)",
    "description": "Functional interface to the `tf.keras.layers.Add` layer."
  },
  "2650": {
    "name": "average",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.average",
    "signature": "(inputs, **kwargs)",
    "description": "Functional interface to the `tf.keras.layers.Average` layer."
  },
  "2651": {
    "name": "concatenate",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.concatenate",
    "signature": "(inputs, axis=-1, **kwargs)",
    "description": "Functional interface to the `Concatenate` layer."
  },
  "2652": {
    "name": "deserialize",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.deserialize",
    "signature": "(config, custom_objects=None)",
    "description": "Instantiates a layer from a config dictionary."
  },
  "2653": {
    "name": "dot",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.dot",
    "signature": "(inputs, axes, normalize=False, **kwargs)",
    "description": "Functional interface to the `Dot` layer."
  },
  "2654": {
    "name": "maximum",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.maximum",
    "signature": "(inputs, **kwargs)",
    "description": "Functional interface to compute maximum (element-wise) list of `inputs`."
  },
  "2655": {
    "name": "minimum",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.minimum",
    "signature": "(inputs, **kwargs)",
    "description": "Functional interface to the `Minimum` layer."
  },
  "2656": {
    "name": "multiply",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.multiply",
    "signature": "(inputs, **kwargs)",
    "description": "Functional interface to the `Multiply` layer."
  },
  "2657": {
    "name": "serialize",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.serialize",
    "signature": "(layer)",
    "description": "Serializes a `Layer` object into a JSON-compatible representation."
  },
  "2658": {
    "name": "subtract",
    "module": "tf.keras.layers",
    "fullName": "tf.keras.layers.subtract",
    "signature": "(inputs, **kwargs)",
    "description": "Functional interface to the `Subtract` layer."
  },
  "2659": {
    "name": "EinsumDense",
    "module": "tf.keras.layers.experimental",
    "fullName": "tf.keras.layers.experimental.EinsumDense",
    "signature": "(equation, output_shape, activation=None, bias_axes=None, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)",
    "description": "A layer that uses `tf.einsum` as the backing computation."
  },
  "2660": {
    "name": "RandomFourierFeatures",
    "module": "tf.keras.layers.experimental",
    "fullName": "tf.keras.layers.experimental.RandomFourierFeatures",
    "signature": "(output_dim, kernel_initializer='gaussian', scale=None, trainable=False, name=None, **kwargs)",
    "description": "Layer that projects its inputs into a random feature space."
  },
  "2661": {
    "name": "SyncBatchNormalization",
    "module": "tf.keras.layers.experimental",
    "fullName": "tf.keras.layers.experimental.SyncBatchNormalization",
    "signature": "(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True, beta_initializer='zeros', gamma_initializer='ones', moving_mean_initializer='zeros', moving_variance_initializer='ones', beta_regularizer=None, gamma_regularizer=None, beta_constraint=None, gamma_constraint=None, **kwargs)",
    "description": "Normalize and scale inputs or activations synchronously across replicas."
  },
  "2662": {
    "name": "CategoryEncoding",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.CategoryEncoding",
    "signature": "(num_tokens=None, output_mode='multi_hot', sparse=False, **kwargs)",
    "description": "A preprocessing layer which encodes integer features."
  },
  "2663": {
    "name": "CenterCrop",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.CenterCrop",
    "signature": "(height, width, **kwargs)",
    "description": "A preprocessing layer which crops images."
  },
  "2664": {
    "name": "Discretization",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.Discretization",
    "signature": "(bin_boundaries=None, num_bins=None, epsilon=0.01, output_mode='int', sparse=False, **kwargs)",
    "description": "A preprocessing layer which buckets continuous features by ranges."
  },
  "2665": {
    "name": "HashedCrossing",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.HashedCrossing",
    "signature": "(num_bins, output_mode='int', sparse=False, **kwargs)",
    "description": "A preprocessing layer which crosses features using the \"hashing trick\"."
  },
  "2666": {
    "name": "Hashing",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.Hashing",
    "signature": "(num_bins, mask_value=None, salt=None, output_mode='int', sparse=False, **kwargs)",
    "description": "A preprocessing layer which hashes and bins categorical features."
  },
  "2667": {
    "name": "IntegerLookup",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.IntegerLookup",
    "signature": "(max_tokens=None, num_oov_indices=1, mask_token=None, oov_token=-1, vocabulary=None, vocabulary_dtype='int64', idf_weights=None, invert=False, output_mode='int', sparse=False, pad_to_max_tokens=False, **kwargs)",
    "description": "A preprocessing layer which maps integer features to contiguous ranges."
  },
  "2668": {
    "name": "Normalization",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.Normalization",
    "signature": "(axis=-1, mean=None, variance=None, invert=False, **kwargs)",
    "description": "A preprocessing layer which normalizes continuous features."
  },
  "2669": {
    "name": "PreprocessingLayer",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.PreprocessingLayer",
    "signature": "(**kwargs)",
    "description": "Base class for Preprocessing Layers."
  },
  "2670": {
    "name": "RandomContrast",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.RandomContrast",
    "signature": "(factor, seed=None, **kwargs)",
    "description": "A preprocessing layer which randomly adjusts contrast during training."
  },
  "2671": {
    "name": "RandomCrop",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.RandomCrop",
    "signature": "(height, width, seed=None, **kwargs)",
    "description": "A preprocessing layer which randomly crops images during training."
  },
  "2672": {
    "name": "RandomFlip",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.RandomFlip",
    "signature": "(mode='horizontal_and_vertical', seed=None, **kwargs)",
    "description": "A preprocessing layer which randomly flips images during training."
  },
  "2673": {
    "name": "RandomHeight",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.RandomHeight",
    "signature": "(factor, interpolation='bilinear', seed=None, **kwargs)",
    "description": "A preprocessing layer which randomly varies image height during training."
  },
  "2674": {
    "name": "RandomRotation",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.RandomRotation",
    "signature": "(factor, fill_mode='reflect', interpolation='bilinear', seed=None, fill_value=0.0, **kwargs)",
    "description": "A preprocessing layer which randomly rotates images during training."
  },
  "2675": {
    "name": "RandomTranslation",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.RandomTranslation",
    "signature": "(height_factor, width_factor, fill_mode='reflect', interpolation='bilinear', seed=None, fill_value=0.0, **kwargs)",
    "description": "A preprocessing layer which randomly translates images during training."
  },
  "2676": {
    "name": "RandomWidth",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.RandomWidth",
    "signature": "(factor, interpolation='bilinear', seed=None, **kwargs)",
    "description": "A preprocessing layer which randomly varies image width during training."
  },
  "2677": {
    "name": "RandomZoom",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.RandomZoom",
    "signature": "(height_factor, width_factor=None, fill_mode='reflect', interpolation='bilinear', seed=None, fill_value=0.0, **kwargs)",
    "description": "A preprocessing layer which randomly zooms images during training."
  },
  "2678": {
    "name": "Rescaling",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.Rescaling",
    "signature": "(scale, offset=0.0, **kwargs)",
    "description": "A preprocessing layer which rescales input values to a new range."
  },
  "2679": {
    "name": "Resizing",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.Resizing",
    "signature": "(height, width, interpolation='bilinear', crop_to_aspect_ratio=False, **kwargs)",
    "description": "A preprocessing layer which resizes images."
  },
  "2680": {
    "name": "StringLookup",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.StringLookup",
    "signature": "(max_tokens=None, num_oov_indices=1, mask_token=None, oov_token='[UNK]', vocabulary=None, idf_weights=None, encoding=None, invert=False, output_mode='int', sparse=False, pad_to_max_tokens=False, **kwargs)",
    "description": "A preprocessing layer which maps string features to integer indices."
  },
  "2681": {
    "name": "TextVectorization",
    "module": "tf.keras.layers.experimental.preprocessing",
    "fullName": "tf.keras.layers.experimental.preprocessing.TextVectorization",
    "signature": "(max_tokens=None, standardize='lower_and_strip_punctuation', split='whitespace', ngrams=None, output_mode='int', output_sequence_length=None, pad_to_max_tokens=False, vocabulary=None, idf_weights=None, sparse=False, ragged=False, **kwargs)",
    "description": "A preprocessing layer which maps text features to integer sequences."
  },
  "2682": {
    "name": "Constant",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.Constant",
    "signature": "(value=0)",
    "description": "Initializer that generates tensors with constant values."
  },
  "2683": {
    "name": "GlorotNormal",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.GlorotNormal",
    "signature": "(seed=None)",
    "description": "The Glorot normal initializer, also called Xavier normal initializer."
  },
  "2684": {
    "name": "GlorotUniform",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.GlorotUniform",
    "signature": "(seed=None)",
    "description": "The Glorot uniform initializer, also called Xavier uniform initializer."
  },
  "2685": {
    "name": "HeNormal",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.HeNormal",
    "signature": "(seed=None)",
    "description": "He normal initializer."
  },
  "2686": {
    "name": "HeUniform",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.HeUniform",
    "signature": "(seed=None)",
    "description": "He uniform variance scaling initializer."
  },
  "2687": {
    "name": "Identity",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.Identity",
    "signature": "(gain=1.0)",
    "description": "Initializer that generates the identity matrix."
  },
  "2688": {
    "name": "Initializer",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.Initializer",
    "signature": "()",
    "description": "Initializer base class: all Keras initializers inherit from this class."
  },
  "2689": {
    "name": "LecunNormal",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.LecunNormal",
    "signature": "(seed=None)",
    "description": "Lecun normal initializer."
  },
  "2690": {
    "name": "LecunUniform",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.LecunUniform",
    "signature": "(seed=None)",
    "description": "Lecun uniform initializer."
  },
  "2691": {
    "name": "Ones",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.Ones",
    "signature": "()",
    "description": "Initializer that generates tensors initialized to 1."
  },
  "2692": {
    "name": "Orthogonal",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.Orthogonal",
    "signature": "(gain=1.0, seed=None)",
    "description": "Initializer that generates an orthogonal matrix."
  },
  "2693": {
    "name": "RandomNormal",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.RandomNormal",
    "signature": "(mean=0.0, stddev=0.05, seed=None)",
    "description": "Initializer that generates tensors with a normal distribution."
  },
  "2694": {
    "name": "RandomUniform",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.RandomUniform",
    "signature": "(minval=-0.05, maxval=0.05, seed=None)",
    "description": "Initializer that generates tensors with a uniform distribution."
  },
  "2695": {
    "name": "TruncatedNormal",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.TruncatedNormal",
    "signature": "(mean=0.0, stddev=0.05, seed=None)",
    "description": "Initializer that generates a truncated normal distribution."
  },
  "2696": {
    "name": "VarianceScaling",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.VarianceScaling",
    "signature": "(scale=1.0, mode='fan_in', distribution='truncated_normal', seed=None)",
    "description": "Initializer capable of adapting its scale to the shape of weights tensors."
  },
  "2697": {
    "name": "Zeros",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.Zeros",
    "signature": "()",
    "description": "Initializer that generates tensors initialized to 0."
  },
  "2698": {
    "name": "constant",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.constant",
    "signature": "(value=0)",
    "description": "Initializer that generates tensors with constant values."
  },
  "2699": {
    "name": "deserialize",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.deserialize",
    "signature": "(config, custom_objects=None)",
    "description": "Return an `Initializer` object from its config."
  },
  "2700": {
    "name": "get",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.get",
    "signature": "(identifier)",
    "description": "Retrieve a Keras initializer by the identifier."
  },
  "2701": {
    "name": "glorot_normal",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.glorot_normal",
    "signature": "(seed=None)",
    "description": "The Glorot normal initializer, also called Xavier normal initializer."
  },
  "2702": {
    "name": "glorot_uniform",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.glorot_uniform",
    "signature": "(seed=None)",
    "description": "The Glorot uniform initializer, also called Xavier uniform initializer."
  },
  "2703": {
    "name": "he_normal",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.he_normal",
    "signature": "(seed=None)",
    "description": "He normal initializer."
  },
  "2704": {
    "name": "he_uniform",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.he_uniform",
    "signature": "(seed=None)",
    "description": "He uniform variance scaling initializer."
  },
  "2705": {
    "name": "identity",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.identity",
    "signature": "(gain=1.0)",
    "description": "Initializer that generates the identity matrix."
  },
  "2706": {
    "name": "lecun_normal",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.lecun_normal",
    "signature": "(seed=None)",
    "description": "Lecun normal initializer."
  },
  "2707": {
    "name": "lecun_uniform",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.lecun_uniform",
    "signature": "(seed=None)",
    "description": "Lecun uniform initializer."
  },
  "2708": {
    "name": "ones",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.ones",
    "signature": "()",
    "description": "Initializer that generates tensors initialized to 1."
  },
  "2709": {
    "name": "orthogonal",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.orthogonal",
    "signature": "(gain=1.0, seed=None)",
    "description": "Initializer that generates an orthogonal matrix."
  },
  "2710": {
    "name": "random_normal",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.random_normal",
    "signature": "(mean=0.0, stddev=0.05, seed=None)",
    "description": "Initializer that generates tensors with a normal distribution."
  },
  "2711": {
    "name": "random_uniform",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.random_uniform",
    "signature": "(minval=-0.05, maxval=0.05, seed=None)",
    "description": "Initializer that generates tensors with a uniform distribution."
  },
  "2712": {
    "name": "serialize",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.serialize",
    "signature": "(initializer)",
    "description": "No description available."
  },
  "2713": {
    "name": "truncated_normal",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.truncated_normal",
    "signature": "(mean=0.0, stddev=0.05, seed=None)",
    "description": "Initializer that generates a truncated normal distribution."
  },
  "2714": {
    "name": "variance_scaling",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.variance_scaling",
    "signature": "(scale=1.0, mode='fan_in', distribution='truncated_normal', seed=None)",
    "description": "Initializer capable of adapting its scale to the shape of weights tensors."
  },
  "2715": {
    "name": "zeros",
    "module": "tf.keras.initializers",
    "fullName": "tf.keras.initializers.zeros",
    "signature": "()",
    "description": "Initializer that generates tensors initialized to 0."
  },
  "2716": {
    "name": "CosineDecay",
    "module": "tf.keras.experimental",
    "fullName": "tf.keras.experimental.CosineDecay",
    "signature": "(initial_learning_rate, decay_steps, alpha=0.0, name=None)",
    "description": "A LearningRateSchedule that uses a cosine decay schedule."
  },
  "2717": {
    "name": "CosineDecayRestarts",
    "module": "tf.keras.experimental",
    "fullName": "tf.keras.experimental.CosineDecayRestarts",
    "signature": "(initial_learning_rate, first_decay_steps, t_mul=2.0, m_mul=1.0, alpha=0.0, name=None)",
    "description": "A LearningRateSchedule that uses a cosine decay schedule with restarts."
  },
  "2718": {
    "name": "LinearModel",
    "module": "tf.keras.experimental",
    "fullName": "tf.keras.experimental.LinearModel",
    "signature": "(units=1, activation=None, use_bias=True, kernel_initializer='zeros', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, **kwargs)",
    "description": "Linear Model for regression and classification problems."
  },
  "2719": {
    "name": "SequenceFeatures",
    "module": "tf.keras.experimental",
    "fullName": "tf.keras.experimental.SequenceFeatures",
    "signature": "(feature_columns, trainable=True, name=None, **kwargs)",
    "description": "A layer for sequence input."
  },
  "2720": {
    "name": "WideDeepModel",
    "module": "tf.keras.experimental",
    "fullName": "tf.keras.experimental.WideDeepModel",
    "signature": "(linear_model, dnn_model, activation=None, **kwargs)",
    "description": "Wide & Deep Model for regression and classification problems."
  },
  "2721": {
    "name": "model_to_estimator",
    "module": "tf.keras.estimator",
    "fullName": "tf.keras.estimator.model_to_estimator",
    "signature": "(keras_model=None, keras_model_path=None, custom_objects=None, model_dir=None, config=None, checkpoint_format='checkpoint', metric_names_map=None, export_outputs=None)",
    "description": "Constructs an `Estimator` instance from given keras model."
  },
  "2722": {
    "name": "get_word_index",
    "module": "tf.keras.datasets.reuters",
    "fullName": "tf.keras.datasets.reuters.get_word_index",
    "signature": "(path='reuters_word_index.json')",
    "description": "Retrieves a dict mapping words to their index in the Reuters dataset."
  },
  "2723": {
    "name": "load_data",
    "module": "tf.keras.datasets.reuters",
    "fullName": "tf.keras.datasets.reuters.load_data",
    "signature": "(path='reuters.npz', num_words=None, skip_top=0, maxlen=None, test_split=0.2, seed=113, start_char=1, oov_char=2, index_from=3, **kwargs)",
    "description": "Loads the Reuters newswire classification dataset."
  },
  "2724": {
    "name": "load_data",
    "module": "tf.keras.datasets.mnist",
    "fullName": "tf.keras.datasets.mnist.load_data",
    "signature": "(path='mnist.npz')",
    "description": "Loads the MNIST dataset."
  },
  "2725": {
    "name": "get_word_index",
    "module": "tf.keras.datasets.imdb",
    "fullName": "tf.keras.datasets.imdb.get_word_index",
    "signature": "(path='imdb_word_index.json')",
    "description": "Retrieves a dict mapping words to their index in the IMDB dataset."
  },
  "2726": {
    "name": "load_data",
    "module": "tf.keras.datasets.imdb",
    "fullName": "tf.keras.datasets.imdb.load_data",
    "signature": "(path='imdb.npz', num_words=None, skip_top=0, maxlen=None, seed=113, start_char=1, oov_char=2, index_from=3, **kwargs)",
    "description": "Loads the [IMDB dataset](https://ai.stanford.edu/~amaas/data/sentiment/)."
  },
  "2727": {
    "name": "load_data",
    "module": "tf.keras.datasets.fashion_mnist",
    "fullName": "tf.keras.datasets.fashion_mnist.load_data",
    "signature": "()",
    "description": "Loads the Fashion-MNIST dataset."
  },
  "2728": {
    "name": "load_data",
    "module": "tf.keras.datasets.cifar100",
    "fullName": "tf.keras.datasets.cifar100.load_data",
    "signature": "(label_mode='fine')",
    "description": "Loads the CIFAR100 dataset."
  },
  "2729": {
    "name": "load_data",
    "module": "tf.keras.datasets.cifar10",
    "fullName": "tf.keras.datasets.cifar10.load_data",
    "signature": "()",
    "description": "Loads the CIFAR10 dataset."
  },
  "2730": {
    "name": "load_data",
    "module": "tf.keras.datasets.boston_housing",
    "fullName": "tf.keras.datasets.boston_housing.load_data",
    "signature": "(path='boston_housing.npz', test_split=0.2, seed=113)",
    "description": "Loads the Boston Housing dataset."
  },
  "2731": {
    "name": "Constraint",
    "module": "tf.keras.constraints",
    "fullName": "tf.keras.constraints.Constraint",
    "signature": "()",
    "description": "Base class for weight constraints."
  },
  "2732": {
    "name": "MaxNorm",
    "module": "tf.keras.constraints",
    "fullName": "tf.keras.constraints.MaxNorm",
    "signature": "(max_value=2, axis=0)",
    "description": "MaxNorm weight constraint."
  },
  "2733": {
    "name": "MinMaxNorm",
    "module": "tf.keras.constraints",
    "fullName": "tf.keras.constraints.MinMaxNorm",
    "signature": "(min_value=0.0, max_value=1.0, rate=1.0, axis=0)",
    "description": "MinMaxNorm weight constraint."
  },
  "2734": {
    "name": "NonNeg",
    "module": "tf.keras.constraints",
    "fullName": "tf.keras.constraints.NonNeg",
    "signature": "()",
    "description": "Constrains the weights to be non-negative."
  },
  "2735": {
    "name": "RadialConstraint",
    "module": "tf.keras.constraints",
    "fullName": "tf.keras.constraints.RadialConstraint",
    "signature": "()",
    "description": "Constrains `Conv2D` kernel weights to be the same for each radius."
  },
  "2736": {
    "name": "UnitNorm",
    "module": "tf.keras.constraints",
    "fullName": "tf.keras.constraints.UnitNorm",
    "signature": "(axis=0)",
    "description": "Constrains the weights incident to each hidden unit to have unit norm."
  },
  "2737": {
    "name": "deserialize",
    "module": "tf.keras.constraints",
    "fullName": "tf.keras.constraints.deserialize",
    "signature": "(config, custom_objects=None)",
    "description": "No description available."
  },
  "2738": {
    "name": "get",
    "module": "tf.keras.constraints",
    "fullName": "tf.keras.constraints.get",
    "signature": "(identifier)",
    "description": "Retrieves a Keras constraint function."
  },
  "2739": {
    "name": "max_norm",
    "module": "tf.keras.constraints",
    "fullName": "tf.keras.constraints.max_norm",
    "signature": "(max_value=2, axis=0)",
    "description": "MaxNorm weight constraint."
  },
  "2740": {
    "name": "min_max_norm",
    "module": "tf.keras.constraints",
    "fullName": "tf.keras.constraints.min_max_norm",
    "signature": "(min_value=0.0, max_value=1.0, rate=1.0, axis=0)",
    "description": "MinMaxNorm weight constraint."
  },
  "2741": {
    "name": "non_neg",
    "module": "tf.keras.constraints",
    "fullName": "tf.keras.constraints.non_neg",
    "signature": "()",
    "description": "Constrains the weights to be non-negative."
  },
  "2742": {
    "name": "radial_constraint",
    "module": "tf.keras.constraints",
    "fullName": "tf.keras.constraints.radial_constraint",
    "signature": "()",
    "description": "Constrains `Conv2D` kernel weights to be the same for each radius."
  },
  "2743": {
    "name": "serialize",
    "module": "tf.keras.constraints",
    "fullName": "tf.keras.constraints.serialize",
    "signature": "(constraint)",
    "description": "No description available."
  },
  "2744": {
    "name": "unit_norm",
    "module": "tf.keras.constraints",
    "fullName": "tf.keras.constraints.unit_norm",
    "signature": "(axis=0)",
    "description": "Constrains the weights incident to each hidden unit to have unit norm."
  },
  "2745": {
    "name": "BackupAndRestore",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.BackupAndRestore",
    "signature": "(backup_dir, save_freq='epoch', delete_checkpoint=True)",
    "description": "Callback to back up and restore the training state."
  },
  "2746": {
    "name": "BaseLogger",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.BaseLogger",
    "signature": "(stateful_metrics=None)",
    "description": "Callback that accumulates epoch averages of metrics."
  },
  "2747": {
    "name": "CSVLogger",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.CSVLogger",
    "signature": "(filename, separator=',', append=False)",
    "description": "Callback that streams epoch results to a CSV file."
  },
  "2748": {
    "name": "Callback",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.Callback",
    "signature": "()",
    "description": "Abstract base class used to build new callbacks."
  },
  "2749": {
    "name": "CallbackList",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.CallbackList",
    "signature": "(callbacks=None, add_history=False, add_progbar=False, model=None, **params)",
    "description": "Container abstracting a list of callbacks."
  },
  "2750": {
    "name": "EarlyStopping",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.EarlyStopping",
    "signature": "(monitor='val_loss', min_delta=0, patience=0, verbose=0, mode='auto', baseline=None, restore_best_weights=False)",
    "description": "Stop training when a monitored metric has stopped improving."
  },
  "2751": {
    "name": "History",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.History",
    "signature": "()",
    "description": "Callback that records events into a `History` object."
  },
  "2752": {
    "name": "LambdaCallback",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.LambdaCallback",
    "signature": "(on_epoch_begin=None, on_epoch_end=None, on_batch_begin=None, on_batch_end=None, on_train_begin=None, on_train_end=None, **kwargs)",
    "description": "Callback for creating simple, custom callbacks on-the-fly."
  },
  "2753": {
    "name": "LearningRateScheduler",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.LearningRateScheduler",
    "signature": "(schedule, verbose=0)",
    "description": "Learning rate scheduler."
  },
  "2754": {
    "name": "ModelCheckpoint",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.ModelCheckpoint",
    "signature": "(filepath, monitor: str = 'val_loss', verbose: int = 0, save_best_only: bool = False, save_weights_only: bool = False, mode: str = 'auto', save_freq='epoch', options=None, initial_value_threshold=None, **kwargs)",
    "description": "Callback to save the Keras model or model weights at some frequency."
  },
  "2755": {
    "name": "ProgbarLogger",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.ProgbarLogger",
    "signature": "(count_mode: str = 'samples', stateful_metrics=None)",
    "description": "Callback that prints metrics to stdout."
  },
  "2756": {
    "name": "ReduceLROnPlateau",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.ReduceLROnPlateau",
    "signature": "(monitor='val_loss', factor=0.1, patience=10, verbose=0, mode='auto', min_delta=0.0001, cooldown=0, min_lr=0, **kwargs)",
    "description": "Reduce learning rate when a metric has stopped improving."
  },
  "2757": {
    "name": "RemoteMonitor",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.RemoteMonitor",
    "signature": "(root='http://localhost:9000', path='/publish/epoch/end/', field='data', headers=None, send_as_json=False)",
    "description": "Callback used to stream events to a server."
  },
  "2758": {
    "name": "TensorBoard",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.TensorBoard",
    "signature": "(log_dir='logs', histogram_freq=0, write_graph=True, write_images=False, write_steps_per_second=False, update_freq='epoch', profile_batch=0, embeddings_freq=0, embeddings_metadata=None, **kwargs)",
    "description": "Enable visualizations for TensorBoard."
  },
  "2759": {
    "name": "TerminateOnNaN",
    "module": "tf.keras.callbacks",
    "fullName": "tf.keras.callbacks.TerminateOnNaN",
    "signature": "()",
    "description": "Callback that terminates training when a NaN loss is encountered."
  },
  "2760": {
    "name": "abs",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.abs",
    "signature": "(x)",
    "description": "Element-wise absolute value."
  },
  "2761": {
    "name": "all",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.all",
    "signature": "(x, axis=None, keepdims=False)",
    "description": "Bitwise reduction (logical AND)."
  },
  "2762": {
    "name": "any",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.any",
    "signature": "(x, axis=None, keepdims=False)",
    "description": "Bitwise reduction (logical OR)."
  },
  "2763": {
    "name": "arange",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.arange",
    "signature": "(start, stop=None, step=1, dtype='int32')",
    "description": "Creates a 1D tensor containing a sequence of integers."
  },
  "2764": {
    "name": "argmax",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.argmax",
    "signature": "(x, axis=-1)",
    "description": "Returns the index of the maximum value along an axis."
  },
  "2765": {
    "name": "argmin",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.argmin",
    "signature": "(x, axis=-1)",
    "description": "Returns the index of the minimum value along an axis."
  },
  "2766": {
    "name": "backend",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.backend",
    "signature": "()",
    "description": "Publicly accessible method for determining the current backend."
  },
  "2767": {
    "name": "batch_dot",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.batch_dot",
    "signature": "(x, y, axes=None)",
    "description": "Batchwise dot product."
  },
  "2768": {
    "name": "batch_flatten",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.batch_flatten",
    "signature": "(x)",
    "description": "Turn a nD tensor into a 2D tensor with same 0th dimension."
  },
  "2769": {
    "name": "batch_get_value",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.batch_get_value",
    "signature": "(tensors)",
    "description": "Returns the value of more than one tensor variable."
  },
  "2770": {
    "name": "batch_normalization",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.batch_normalization",
    "signature": "(x, mean, var, beta, gamma, axis=-1, epsilon=0.001)",
    "description": "Applies batch normalization on x given mean, var, beta and gamma."
  },
  "2771": {
    "name": "batch_set_value",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.batch_set_value",
    "signature": "(tuples)",
    "description": "Sets the values of many tensor variables at once."
  },
  "2772": {
    "name": "bias_add",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.bias_add",
    "signature": "(x, bias, data_format=None)",
    "description": "Adds a bias vector to a tensor."
  },
  "2773": {
    "name": "binary_crossentropy",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.binary_crossentropy",
    "signature": "(target, output, from_logits=False)",
    "description": "Binary crossentropy between an output tensor and a target tensor."
  },
  "2774": {
    "name": "binary_focal_crossentropy",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.binary_focal_crossentropy",
    "signature": "(target, output, apply_class_balancing=False, alpha=0.25, gamma=2.0, from_logits=False)",
    "description": "Binary focal crossentropy between an output tensor and a target tensor."
  },
  "2775": {
    "name": "cast",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.cast",
    "signature": "(x, dtype)",
    "description": "Casts a tensor to a different dtype and returns it."
  },
  "2776": {
    "name": "cast_to_floatx",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.cast_to_floatx",
    "signature": "(x)",
    "description": "Cast a Numpy array to the default Keras float type."
  },
  "2777": {
    "name": "categorical_crossentropy",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.categorical_crossentropy",
    "signature": "(target, output, from_logits=False, axis=-1)",
    "description": "Categorical crossentropy between an output tensor and a target tensor."
  },
  "2778": {
    "name": "clear_session",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.clear_session",
    "signature": "()",
    "description": "Resets all state generated by Keras."
  },
  "2779": {
    "name": "clip",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.clip",
    "signature": "(x, min_value, max_value)",
    "description": "Element-wise value clipping."
  },
  "2780": {
    "name": "concatenate",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.concatenate",
    "signature": "(tensors, axis=-1)",
    "description": "Concatenates a list of tensors alongside the specified axis."
  },
  "2781": {
    "name": "constant",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.constant",
    "signature": "(value, dtype=None, shape=None, name=None)",
    "description": "Creates a constant tensor."
  },
  "2782": {
    "name": "conv1d",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.conv1d",
    "signature": "(x, kernel, strides=1, padding='valid', data_format=None, dilation_rate=1)",
    "description": "1D convolution."
  },
  "2783": {
    "name": "conv2d",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.conv2d",
    "signature": "(x, kernel, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1))",
    "description": "2D convolution."
  },
  "2784": {
    "name": "conv2d_transpose",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.conv2d_transpose",
    "signature": "(x, kernel, output_shape, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1))",
    "description": "2D deconvolution (i.e."
  },
  "2785": {
    "name": "conv3d",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.conv3d",
    "signature": "(x, kernel, strides=(1, 1, 1), padding='valid', data_format=None, dilation_rate=(1, 1, 1))",
    "description": "3D convolution."
  },
  "2786": {
    "name": "cos",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.cos",
    "signature": "(x)",
    "description": "Computes cos of x element-wise."
  },
  "2787": {
    "name": "count_params",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.count_params",
    "signature": "(x)",
    "description": "Returns the static number of elements in a variable or tensor."
  },
  "2788": {
    "name": "ctc_batch_cost",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.ctc_batch_cost",
    "signature": "(y_true, y_pred, input_length, label_length)",
    "description": "Runs CTC loss algorithm on each batch element."
  },
  "2789": {
    "name": "ctc_decode",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.ctc_decode",
    "signature": "(y_pred, input_length, greedy=True, beam_width=100, top_paths=1)",
    "description": "Decodes the output of a softmax."
  },
  "2790": {
    "name": "ctc_label_dense_to_sparse",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.ctc_label_dense_to_sparse",
    "signature": "(labels, label_lengths)",
    "description": "Converts CTC labels from dense to sparse."
  },
  "2791": {
    "name": "cumprod",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.cumprod",
    "signature": "(x, axis=0)",
    "description": "Cumulative product of the values in a tensor, alongside the specified axis."
  },
  "2792": {
    "name": "cumsum",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.cumsum",
    "signature": "(x, axis=0)",
    "description": "Cumulative sum of the values in a tensor, alongside the specified axis."
  },
  "2793": {
    "name": "depthwise_conv2d",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.depthwise_conv2d",
    "signature": "(x, depthwise_kernel, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1))",
    "description": "2D convolution with separable filters."
  },
  "2794": {
    "name": "dot",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.dot",
    "signature": "(x, y)",
    "description": "Multiplies 2 tensors (and/or variables) and returns a tensor."
  },
  "2795": {
    "name": "dropout",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.dropout",
    "signature": "(x, level, noise_shape=None, seed=None)",
    "description": "Sets entries in `x` to zero at random, while scaling the entire tensor."
  },
  "2796": {
    "name": "dtype",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.dtype",
    "signature": "(x)",
    "description": "Returns the dtype of a Keras tensor or variable, as a string."
  },
  "2797": {
    "name": "elu",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.elu",
    "signature": "(x, alpha=1.0)",
    "description": "Exponential linear unit."
  },
  "2798": {
    "name": "epsilon",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.epsilon",
    "signature": "()",
    "description": "Returns the value of the fuzz factor used in numeric expressions."
  },
  "2799": {
    "name": "equal",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.equal",
    "signature": "(x, y)",
    "description": "Element-wise equality between two tensors."
  },
  "2800": {
    "name": "eval",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.eval",
    "signature": "(x)",
    "description": "Evaluates the value of a variable."
  },
  "2801": {
    "name": "exp",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.exp",
    "signature": "(x)",
    "description": "Element-wise exponential."
  },
  "2802": {
    "name": "expand_dims",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.expand_dims",
    "signature": "(x, axis=-1)",
    "description": "Adds a 1-sized dimension at index \"axis\"."
  },
  "2803": {
    "name": "eye",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.eye",
    "signature": "(size, dtype=None, name=None)",
    "description": "Instantiate an identity matrix and returns it."
  },
  "2804": {
    "name": "flatten",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.flatten",
    "signature": "(x)",
    "description": "Flatten a tensor."
  },
  "2805": {
    "name": "floatx",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.floatx",
    "signature": "()",
    "description": "Returns the default float type, as a string."
  },
  "2806": {
    "name": "foldl",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.foldl",
    "signature": "(fn, elems, initializer=None, name=None)",
    "description": "Reduce elems using fn to combine them from left to right."
  },
  "2807": {
    "name": "foldr",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.foldr",
    "signature": "(fn, elems, initializer=None, name=None)",
    "description": "Reduce elems using fn to combine them from right to left."
  },
  "2808": {
    "name": "function",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.function",
    "signature": "(inputs, outputs, updates=None, name=None, **kwargs)",
    "description": "Instantiates a Keras function."
  },
  "2809": {
    "name": "gather",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.gather",
    "signature": "(reference, indices)",
    "description": "Retrieves the elements of indices `indices` in the tensor `reference`."
  },
  "2810": {
    "name": "get_uid",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.get_uid",
    "signature": "(prefix='')",
    "description": "Associates a string prefix with an integer counter in a TensorFlow graph."
  },
  "2811": {
    "name": "get_value",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.get_value",
    "signature": "(x)",
    "description": "Returns the value of a variable."
  },
  "2812": {
    "name": "gradients",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.gradients",
    "signature": "(loss, variables)",
    "description": "Returns the gradients of `loss` w.r.t. `variables`."
  },
  "2813": {
    "name": "greater",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.greater",
    "signature": "(x, y)",
    "description": "Element-wise truth value of (x > y)."
  },
  "2814": {
    "name": "greater_equal",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.greater_equal",
    "signature": "(x, y)",
    "description": "Element-wise truth value of (x >= y)."
  },
  "2815": {
    "name": "hard_sigmoid",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.hard_sigmoid",
    "signature": "(x)",
    "description": "Segment-wise linear approximation of sigmoid."
  },
  "2816": {
    "name": "image_data_format",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.image_data_format",
    "signature": "()",
    "description": "Returns the default image data format convention."
  },
  "2817": {
    "name": "in_test_phase",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.in_test_phase",
    "signature": "(x, alt, training=None)",
    "description": "Selects `x` in test phase, and `alt` otherwise."
  },
  "2818": {
    "name": "in_top_k",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.in_top_k",
    "signature": "(predictions, targets, k)",
    "description": "Returns whether the `targets` are in the top `k` `predictions`."
  },
  "2819": {
    "name": "in_train_phase",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.in_train_phase",
    "signature": "(x, alt, training=None)",
    "description": "Selects `x` in train phase, and `alt` otherwise."
  },
  "2820": {
    "name": "int_shape",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.int_shape",
    "signature": "(x)",
    "description": "Returns the shape of tensor or variable as a tuple of int or None entries."
  },
  "2821": {
    "name": "is_keras_tensor",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.is_keras_tensor",
    "signature": "(x)",
    "description": "Returns whether `x` is a Keras tensor."
  },
  "2822": {
    "name": "is_sparse",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.is_sparse",
    "signature": "(tensor)",
    "description": "Returns whether a tensor is a sparse tensor."
  },
  "2823": {
    "name": "l2_normalize",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.l2_normalize",
    "signature": "(x, axis=None)",
    "description": "Normalizes a tensor wrt the L2 norm alongside the specified axis."
  },
  "2824": {
    "name": "learning_phase",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.learning_phase",
    "signature": "()",
    "description": "Returns the learning phase flag."
  },
  "2825": {
    "name": "learning_phase_scope",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.learning_phase_scope",
    "signature": "(value)",
    "description": "Provides a scope within which the learning phase is equal to `value`."
  },
  "2826": {
    "name": "less",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.less",
    "signature": "(x, y)",
    "description": "Element-wise truth value of (x < y)."
  },
  "2827": {
    "name": "less_equal",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.less_equal",
    "signature": "(x, y)",
    "description": "Element-wise truth value of (x <= y)."
  },
  "2828": {
    "name": "local_conv1d",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.local_conv1d",
    "signature": "(inputs, kernel, kernel_size, strides, data_format=None)",
    "description": "Apply 1D conv with un-shared weights."
  },
  "2829": {
    "name": "local_conv2d",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.local_conv2d",
    "signature": "(inputs, kernel, kernel_size, strides, output_shape, data_format=None)",
    "description": "Apply 2D conv with un-shared weights."
  },
  "2830": {
    "name": "log",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.log",
    "signature": "(x)",
    "description": "Element-wise log."
  },
  "2831": {
    "name": "manual_variable_initialization",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.manual_variable_initialization",
    "signature": "(value)",
    "description": "Sets the manual variable initialization flag."
  },
  "2832": {
    "name": "map_fn",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.map_fn",
    "signature": "(fn, elems, name=None, dtype=None)",
    "description": "Map the function fn over the elements elems and return the outputs."
  },
  "2833": {
    "name": "max",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.max",
    "signature": "(x, axis=None, keepdims=False)",
    "description": "Maximum value in a tensor."
  },
  "2834": {
    "name": "maximum",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.maximum",
    "signature": "(x, y)",
    "description": "Element-wise maximum of two tensors."
  },
  "2835": {
    "name": "mean",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.mean",
    "signature": "(x, axis=None, keepdims=False)",
    "description": "Mean of a tensor, alongside the specified axis."
  },
  "2836": {
    "name": "min",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.min",
    "signature": "(x, axis=None, keepdims=False)",
    "description": "Minimum value in a tensor."
  },
  "2837": {
    "name": "minimum",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.minimum",
    "signature": "(x, y)",
    "description": "Element-wise minimum of two tensors."
  },
  "2838": {
    "name": "moving_average_update",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.moving_average_update",
    "signature": "(x, value, momentum)",
    "description": "Compute the exponential moving average of a value."
  },
  "2839": {
    "name": "name_scope",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.name_scope",
    "signature": "(name)",
    "description": "A context manager for use when defining a Python op."
  },
  "2840": {
    "name": "ndim",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.ndim",
    "signature": "(x)",
    "description": "Returns the number of axes in a tensor, as an integer."
  },
  "2841": {
    "name": "normalize_batch_in_training",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.normalize_batch_in_training",
    "signature": "(x, gamma, beta, reduction_axes, epsilon=0.001)",
    "description": "Computes mean and std for batch then apply batch_normalization on batch."
  },
  "2842": {
    "name": "not_equal",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.not_equal",
    "signature": "(x, y)",
    "description": "Element-wise inequality between two tensors."
  },
  "2843": {
    "name": "one_hot",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.one_hot",
    "signature": "(indices, num_classes)",
    "description": "Computes the one-hot representation of an integer tensor."
  },
  "2844": {
    "name": "ones",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.ones",
    "signature": "(shape, dtype=None, name=None)",
    "description": "Instantiates an all-ones variable and returns it."
  },
  "2845": {
    "name": "ones_like",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.ones_like",
    "signature": "(x, dtype=None, name=None)",
    "description": "Instantiates an all-ones variable of the same shape as another tensor."
  },
  "2846": {
    "name": "permute_dimensions",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.permute_dimensions",
    "signature": "(x, pattern)",
    "description": "Permutes axes in a tensor."
  },
  "2847": {
    "name": "placeholder",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.placeholder",
    "signature": "(shape=None, ndim=None, dtype=None, sparse=False, name=None, ragged=False)",
    "description": "Instantiates a placeholder tensor and returns it."
  },
  "2848": {
    "name": "pool2d",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.pool2d",
    "signature": "(x, pool_size, strides=(1, 1), padding='valid', data_format=None, pool_mode='max')",
    "description": "2D Pooling."
  },
  "2849": {
    "name": "pool3d",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.pool3d",
    "signature": "(x, pool_size, strides=(1, 1, 1), padding='valid', data_format=None, pool_mode='max')",
    "description": "3D Pooling."
  },
  "2850": {
    "name": "pow",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.pow",
    "signature": "(x, a)",
    "description": "Element-wise exponentiation."
  },
  "2851": {
    "name": "print_tensor",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.print_tensor",
    "signature": "(x, message='', summarize=3)",
    "description": "Prints `message` and the tensor value when evaluated."
  },
  "2852": {
    "name": "prod",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.prod",
    "signature": "(x, axis=None, keepdims=False)",
    "description": "Multiplies the values in a tensor, alongside the specified axis."
  },
  "2853": {
    "name": "random_bernoulli",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.random_bernoulli",
    "signature": "(shape, p=0.0, dtype=None, seed=None)",
    "description": "Returns a tensor with random bernoulli distribution of values."
  },
  "2854": {
    "name": "random_normal",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.random_normal",
    "signature": "(shape, mean=0.0, stddev=1.0, dtype=None, seed=None)",
    "description": "Returns a tensor with normal distribution of values."
  },
  "2855": {
    "name": "random_normal_variable",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.random_normal_variable",
    "signature": "(shape, mean, scale, dtype=None, name=None, seed=None)",
    "description": "Instantiates a variable with values drawn from a normal distribution."
  },
  "2856": {
    "name": "random_uniform",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.random_uniform",
    "signature": "(shape, minval=0.0, maxval=1.0, dtype=None, seed=None)",
    "description": "Returns a tensor with uniform distribution of values."
  },
  "2857": {
    "name": "random_uniform_variable",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.random_uniform_variable",
    "signature": "(shape, low, high, dtype=None, name=None, seed=None)",
    "description": "Instantiates a variable with values drawn from a uniform distribution."
  },
  "2858": {
    "name": "relu",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.relu",
    "signature": "(x, alpha=0.0, max_value=None, threshold=0.0)",
    "description": "Rectified linear unit."
  },
  "2859": {
    "name": "repeat",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.repeat",
    "signature": "(x, n)",
    "description": "Repeats a 2D tensor."
  },
  "2860": {
    "name": "repeat_elements",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.repeat_elements",
    "signature": "(x, rep, axis)",
    "description": "Repeats the elements of a tensor along an axis, like `np.repeat`."
  },
  "2861": {
    "name": "reset_uids",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.reset_uids",
    "signature": "()",
    "description": "Resets graph identifiers."
  },
  "2862": {
    "name": "reshape",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.reshape",
    "signature": "(x, shape)",
    "description": "Reshapes a tensor to the specified shape."
  },
  "2863": {
    "name": "resize_images",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.resize_images",
    "signature": "(x, height_factor, width_factor, data_format, interpolation='nearest')",
    "description": "Resizes the images contained in a 4D tensor."
  },
  "2864": {
    "name": "resize_volumes",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.resize_volumes",
    "signature": "(x, depth_factor, height_factor, width_factor, data_format)",
    "description": "Resizes the volume contained in a 5D tensor."
  },
  "2865": {
    "name": "reverse",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.reverse",
    "signature": "(x, axes)",
    "description": "Reverse a tensor along the specified axes."
  },
  "2866": {
    "name": "rnn",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.rnn",
    "signature": "(step_function, inputs, initial_states, go_backwards=False, mask=None, constants=None, unroll=False, input_length=None, time_major=False, zero_output_for_mask=False, return_all_outputs=True)",
    "description": "Iterates over the time dimension of a tensor."
  },
  "2867": {
    "name": "round",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.round",
    "signature": "(x)",
    "description": "Element-wise rounding to the closest integer."
  },
  "2868": {
    "name": "separable_conv2d",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.separable_conv2d",
    "signature": "(x, depthwise_kernel, pointwise_kernel, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1))",
    "description": "2D convolution with separable filters."
  },
  "2869": {
    "name": "set_epsilon",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.set_epsilon",
    "signature": "(value)",
    "description": "Sets the value of the fuzz factor used in numeric expressions."
  },
  "2870": {
    "name": "set_floatx",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.set_floatx",
    "signature": "(value)",
    "description": "Sets the default float type."
  },
  "2871": {
    "name": "set_image_data_format",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.set_image_data_format",
    "signature": "(data_format)",
    "description": "Sets the value of the image data format convention."
  },
  "2872": {
    "name": "set_learning_phase",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.set_learning_phase",
    "signature": "(value)",
    "description": "Sets the learning phase to a fixed value."
  },
  "2873": {
    "name": "set_value",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.set_value",
    "signature": "(x, value)",
    "description": "Sets the value of a variable, from a Numpy array."
  },
  "2874": {
    "name": "shape",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.shape",
    "signature": "(x)",
    "description": "Returns the symbolic shape of a tensor or variable."
  },
  "2875": {
    "name": "sigmoid",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.sigmoid",
    "signature": "(x)",
    "description": "Element-wise sigmoid."
  },
  "2876": {
    "name": "sign",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.sign",
    "signature": "(x)",
    "description": "Element-wise sign."
  },
  "2877": {
    "name": "sin",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.sin",
    "signature": "(x)",
    "description": "Computes sin of x element-wise."
  },
  "2878": {
    "name": "softmax",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.softmax",
    "signature": "(x, axis=-1)",
    "description": "Softmax of a tensor."
  },
  "2879": {
    "name": "softplus",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.softplus",
    "signature": "(x)",
    "description": "Softplus of a tensor."
  },
  "2880": {
    "name": "softsign",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.softsign",
    "signature": "(x)",
    "description": "Softsign of a tensor."
  },
  "2881": {
    "name": "sparse_categorical_crossentropy",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.sparse_categorical_crossentropy",
    "signature": "(target, output, from_logits=False, axis=-1, ignore_class=None)",
    "description": "Categorical crossentropy with integer targets."
  },
  "2882": {
    "name": "spatial_2d_padding",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.spatial_2d_padding",
    "signature": "(x, padding=((1, 1), (1, 1)), data_format=None)",
    "description": "Pads the 2nd and 3rd dimensions of a 4D tensor."
  },
  "2883": {
    "name": "spatial_3d_padding",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.spatial_3d_padding",
    "signature": "(x, padding=((1, 1), (1, 1), (1, 1)), data_format=None)",
    "description": "Pads 5D tensor with zeros along the depth, height, width dimensions."
  },
  "2884": {
    "name": "sqrt",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.sqrt",
    "signature": "(x)",
    "description": "Element-wise square root."
  },
  "2885": {
    "name": "square",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.square",
    "signature": "(x)",
    "description": "Element-wise square."
  },
  "2886": {
    "name": "squeeze",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.squeeze",
    "signature": "(x, axis)",
    "description": "Removes a 1-dimension from the tensor at index \"axis\"."
  },
  "2887": {
    "name": "stack",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.stack",
    "signature": "(x, axis=0)",
    "description": "Stacks a list of rank `R` tensors into a rank `R+1` tensor."
  },
  "2888": {
    "name": "std",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.std",
    "signature": "(x, axis=None, keepdims=False)",
    "description": "Standard deviation of a tensor, alongside the specified axis."
  },
  "2889": {
    "name": "stop_gradient",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.stop_gradient",
    "signature": "(variables)",
    "description": "Returns `variables` but with zero gradient w.r.t. every other variable."
  },
  "2890": {
    "name": "sum",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.sum",
    "signature": "(x, axis=None, keepdims=False)",
    "description": "Sum of the values in a tensor, alongside the specified axis."
  },
  "2891": {
    "name": "switch",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.switch",
    "signature": "(condition, then_expression, else_expression)",
    "description": "Switches between two operations depending on a scalar value."
  },
  "2892": {
    "name": "tanh",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.tanh",
    "signature": "(x)",
    "description": "Element-wise tanh."
  },
  "2893": {
    "name": "temporal_padding",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.temporal_padding",
    "signature": "(x, padding=(1, 1))",
    "description": "Pads the middle dimension of a 3D tensor."
  },
  "2894": {
    "name": "tile",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.tile",
    "signature": "(x, n)",
    "description": "Creates a tensor by tiling `x` by `n`."
  },
  "2895": {
    "name": "to_dense",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.to_dense",
    "signature": "(tensor)",
    "description": "Converts a sparse tensor into a dense tensor and returns it."
  },
  "2896": {
    "name": "transpose",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.transpose",
    "signature": "(x)",
    "description": "Transposes a tensor and returns it."
  },
  "2897": {
    "name": "truncated_normal",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.truncated_normal",
    "signature": "(shape, mean=0.0, stddev=1.0, dtype=None, seed=None)",
    "description": "Returns a tensor with truncated random normal distribution of values."
  },
  "2898": {
    "name": "update",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.update",
    "signature": "(x, new_x)",
    "description": "No description available."
  },
  "2899": {
    "name": "update_add",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.update_add",
    "signature": "(x, increment)",
    "description": "Update the value of `x` by adding `increment`."
  },
  "2900": {
    "name": "update_sub",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.update_sub",
    "signature": "(x, decrement)",
    "description": "Update the value of `x` by subtracting `decrement`."
  },
  "2901": {
    "name": "var",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.var",
    "signature": "(x, axis=None, keepdims=False)",
    "description": "Variance of a tensor, alongside the specified axis."
  },
  "2902": {
    "name": "variable",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.variable",
    "signature": "(value, dtype=None, name=None, constraint=None)",
    "description": "Instantiates a variable and returns it."
  },
  "2903": {
    "name": "zeros",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.zeros",
    "signature": "(shape, dtype=None, name=None)",
    "description": "Instantiates an all-zeros variable and returns it."
  },
  "2904": {
    "name": "zeros_like",
    "module": "tf.keras.backend",
    "fullName": "tf.keras.backend.zeros_like",
    "signature": "(x, dtype=None, name=None)",
    "description": "Instantiates an all-zeros variable of the same shape as another tensor."
  },
  "2905": {
    "name": "disable_tf_random_generator",
    "module": "tf.keras.backend.experimental",
    "fullName": "tf.keras.backend.experimental.disable_tf_random_generator",
    "signature": "()",
    "description": "Disable the `tf.random.Generator` as the RNG for Keras."
  },
  "2906": {
    "name": "enable_tf_random_generator",
    "module": "tf.keras.backend.experimental",
    "fullName": "tf.keras.backend.experimental.enable_tf_random_generator",
    "signature": "()",
    "description": "Enable the `tf.random.Generator` as the RNG for Keras."
  },
  "2907": {
    "name": "is_tf_random_generator_enabled",
    "module": "tf.keras.backend.experimental",
    "fullName": "tf.keras.backend.experimental.is_tf_random_generator_enabled",
    "signature": "()",
    "description": "Check whether `tf.random.Generator` is used for RNG in Keras."
  },
  "2908": {
    "name": "ConvNeXtBase",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ConvNeXtBase",
    "signature": "(model_name='convnext_base', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ConvNeXtBase architecture."
  },
  "2909": {
    "name": "ConvNeXtLarge",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ConvNeXtLarge",
    "signature": "(model_name='convnext_large', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ConvNeXtLarge architecture."
  },
  "2910": {
    "name": "ConvNeXtSmall",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ConvNeXtSmall",
    "signature": "(model_name='convnext_small', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ConvNeXtSmall architecture."
  },
  "2911": {
    "name": "ConvNeXtTiny",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ConvNeXtTiny",
    "signature": "(model_name='convnext_tiny', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ConvNeXtTiny architecture."
  },
  "2912": {
    "name": "ConvNeXtXLarge",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ConvNeXtXLarge",
    "signature": "(model_name='convnext_xlarge', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ConvNeXtXLarge architecture."
  },
  "2913": {
    "name": "DenseNet121",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.DenseNet121",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the Densenet121 architecture."
  },
  "2914": {
    "name": "DenseNet169",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.DenseNet169",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the Densenet169 architecture."
  },
  "2915": {
    "name": "DenseNet201",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.DenseNet201",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the Densenet201 architecture."
  },
  "2916": {
    "name": "EfficientNetB0",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetB0",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB0 architecture."
  },
  "2917": {
    "name": "EfficientNetB1",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetB1",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB1 architecture."
  },
  "2918": {
    "name": "EfficientNetB2",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetB2",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB2 architecture."
  },
  "2919": {
    "name": "EfficientNetB3",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetB3",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB3 architecture."
  },
  "2920": {
    "name": "EfficientNetB4",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetB4",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB4 architecture."
  },
  "2921": {
    "name": "EfficientNetB5",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetB5",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB5 architecture."
  },
  "2922": {
    "name": "EfficientNetB6",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetB6",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB6 architecture."
  },
  "2923": {
    "name": "EfficientNetB7",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetB7",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB7 architecture."
  },
  "2924": {
    "name": "EfficientNetV2B0",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetV2B0",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the EfficientNetV2B0 architecture."
  },
  "2925": {
    "name": "EfficientNetV2B1",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetV2B1",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the EfficientNetV2B1 architecture."
  },
  "2926": {
    "name": "EfficientNetV2B2",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetV2B2",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the EfficientNetV2B2 architecture."
  },
  "2927": {
    "name": "EfficientNetV2B3",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetV2B3",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the EfficientNetV2B3 architecture."
  },
  "2928": {
    "name": "EfficientNetV2L",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetV2L",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the EfficientNetV2L architecture."
  },
  "2929": {
    "name": "EfficientNetV2M",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetV2M",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the EfficientNetV2M architecture."
  },
  "2930": {
    "name": "EfficientNetV2S",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.EfficientNetV2S",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the EfficientNetV2S architecture."
  },
  "2931": {
    "name": "InceptionResNetV2",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.InceptionResNetV2",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the Inception-ResNet v2 architecture."
  },
  "2932": {
    "name": "InceptionV3",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.InceptionV3",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the Inception v3 architecture."
  },
  "2933": {
    "name": "MobileNet",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.MobileNet",
    "signature": "(input_shape=None, alpha=1.0, depth_multiplier=1, dropout=0.001, include_top=True, weights='imagenet', input_tensor=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the MobileNet architecture."
  },
  "2934": {
    "name": "MobileNetV2",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.MobileNetV2",
    "signature": "(input_shape=None, alpha=1.0, include_top=True, weights='imagenet', input_tensor=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the MobileNetV2 architecture."
  },
  "2935": {
    "name": "MobileNetV3Large",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.MobileNetV3Large",
    "signature": "(input_shape=None, alpha=1.0, minimalistic=False, include_top=True, weights='imagenet', input_tensor=None, classes=1000, pooling=None, dropout_rate=0.2, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the MobileNetV3Large architecture."
  },
  "2936": {
    "name": "MobileNetV3Small",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.MobileNetV3Small",
    "signature": "(input_shape=None, alpha=1.0, minimalistic=False, include_top=True, weights='imagenet', input_tensor=None, classes=1000, pooling=None, dropout_rate=0.2, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the MobileNetV3Small architecture."
  },
  "2937": {
    "name": "NASNetLarge",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.NASNetLarge",
    "signature": "(input_shape=None, include_top=True, weights='imagenet', input_tensor=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates a NASNet model in ImageNet mode."
  },
  "2938": {
    "name": "NASNetMobile",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.NASNetMobile",
    "signature": "(input_shape=None, include_top=True, weights='imagenet', input_tensor=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates a Mobile NASNet model in ImageNet mode."
  },
  "2939": {
    "name": "RegNetX002",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetX002",
    "signature": "(model_name='regnetx002', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX002 architecture."
  },
  "2940": {
    "name": "RegNetX004",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetX004",
    "signature": "(model_name='regnetx004', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX004 architecture."
  },
  "2941": {
    "name": "RegNetX006",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetX006",
    "signature": "(model_name='regnetx006', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX006 architecture."
  },
  "2942": {
    "name": "RegNetX008",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetX008",
    "signature": "(model_name='regnetx008', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX008 architecture."
  },
  "2943": {
    "name": "RegNetX016",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetX016",
    "signature": "(model_name='regnetx016', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX016 architecture."
  },
  "2944": {
    "name": "RegNetX032",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetX032",
    "signature": "(model_name='regnetx032', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX032 architecture."
  },
  "2945": {
    "name": "RegNetX040",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetX040",
    "signature": "(model_name='regnetx040', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX040 architecture."
  },
  "2946": {
    "name": "RegNetX064",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetX064",
    "signature": "(model_name='regnetx064', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX064 architecture."
  },
  "2947": {
    "name": "RegNetX080",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetX080",
    "signature": "(model_name='regnetx080', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX080 architecture."
  },
  "2948": {
    "name": "RegNetX120",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetX120",
    "signature": "(model_name='regnetx120', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX120 architecture."
  },
  "2949": {
    "name": "RegNetX160",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetX160",
    "signature": "(model_name='regnetx160', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX160 architecture."
  },
  "2950": {
    "name": "RegNetX320",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetX320",
    "signature": "(model_name='regnetx320', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX320 architecture."
  },
  "2951": {
    "name": "RegNetY002",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetY002",
    "signature": "(model_name='regnety002', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY002 architecture."
  },
  "2952": {
    "name": "RegNetY004",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetY004",
    "signature": "(model_name='regnety004', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY004 architecture."
  },
  "2953": {
    "name": "RegNetY006",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetY006",
    "signature": "(model_name='regnety006', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY006 architecture."
  },
  "2954": {
    "name": "RegNetY008",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetY008",
    "signature": "(model_name='regnety008', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY008 architecture."
  },
  "2955": {
    "name": "RegNetY016",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetY016",
    "signature": "(model_name='regnety016', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY016 architecture."
  },
  "2956": {
    "name": "RegNetY032",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetY032",
    "signature": "(model_name='regnety032', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY032 architecture."
  },
  "2957": {
    "name": "RegNetY040",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetY040",
    "signature": "(model_name='regnety040', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY040 architecture."
  },
  "2958": {
    "name": "RegNetY064",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetY064",
    "signature": "(model_name='regnety064', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY064 architecture."
  },
  "2959": {
    "name": "RegNetY080",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetY080",
    "signature": "(model_name='regnety080', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY080 architecture."
  },
  "2960": {
    "name": "RegNetY120",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetY120",
    "signature": "(model_name='regnety120', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY120 architecture."
  },
  "2961": {
    "name": "RegNetY160",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetY160",
    "signature": "(model_name='regnety160', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY160 architecture."
  },
  "2962": {
    "name": "RegNetY320",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.RegNetY320",
    "signature": "(model_name='regnety320', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY320 architecture."
  },
  "2963": {
    "name": "ResNet101",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ResNet101",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, **kwargs)",
    "description": "Instantiates the ResNet101 architecture."
  },
  "2964": {
    "name": "ResNet101V2",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ResNet101V2",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ResNet101V2 architecture."
  },
  "2965": {
    "name": "ResNet152",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ResNet152",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, **kwargs)",
    "description": "Instantiates the ResNet152 architecture."
  },
  "2966": {
    "name": "ResNet152V2",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ResNet152V2",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ResNet152V2 architecture."
  },
  "2967": {
    "name": "ResNet50",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ResNet50",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, **kwargs)",
    "description": "Instantiates the ResNet50 architecture."
  },
  "2968": {
    "name": "ResNet50V2",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ResNet50V2",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ResNet50V2 architecture."
  },
  "2969": {
    "name": "ResNetRS101",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ResNetRS101",
    "signature": "(include_top=True, weights='imagenet', classes=1000, input_shape=None, input_tensor=None, pooling=None, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the ResNetRS101 architecture."
  },
  "2970": {
    "name": "ResNetRS152",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ResNetRS152",
    "signature": "(include_top=True, weights='imagenet', classes=1000, input_shape=None, input_tensor=None, pooling=None, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the ResNetRS152 architecture."
  },
  "2971": {
    "name": "ResNetRS200",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ResNetRS200",
    "signature": "(include_top=True, weights='imagenet', classes=1000, input_shape=None, input_tensor=None, pooling=None, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the ResNetRS200 architecture."
  },
  "2972": {
    "name": "ResNetRS270",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ResNetRS270",
    "signature": "(include_top=True, weights='imagenet', classes=1000, input_shape=None, input_tensor=None, pooling=None, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the ResNetRS270 architecture."
  },
  "2973": {
    "name": "ResNetRS350",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ResNetRS350",
    "signature": "(include_top=True, weights='imagenet', classes=1000, input_shape=None, input_tensor=None, pooling=None, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the ResNetRS350 architecture."
  },
  "2974": {
    "name": "ResNetRS420",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ResNetRS420",
    "signature": "(include_top=True, weights='imagenet', classes=1000, input_shape=None, input_tensor=None, pooling=None, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the ResNetRS420 architecture."
  },
  "2975": {
    "name": "ResNetRS50",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.ResNetRS50",
    "signature": "(include_top=True, weights='imagenet', classes=1000, input_shape=None, input_tensor=None, pooling=None, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the ResNetRS50 architecture."
  },
  "2976": {
    "name": "VGG16",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.VGG16",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the VGG16 model."
  },
  "2977": {
    "name": "VGG19",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.VGG19",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the VGG19 architecture."
  },
  "2978": {
    "name": "Xception",
    "module": "tf.keras.applications",
    "fullName": "tf.keras.applications.Xception",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the Xception architecture."
  },
  "2979": {
    "name": "Xception",
    "module": "tf.keras.applications.xception",
    "fullName": "tf.keras.applications.xception.Xception",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the Xception architecture."
  },
  "2980": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.xception",
    "fullName": "tf.keras.applications.xception.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "2981": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.xception",
    "fullName": "tf.keras.applications.xception.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "Preprocesses a tensor or Numpy array encoding a batch of images."
  },
  "2982": {
    "name": "VGG19",
    "module": "tf.keras.applications.vgg19",
    "fullName": "tf.keras.applications.vgg19.VGG19",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the VGG19 architecture."
  },
  "2983": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.vgg19",
    "fullName": "tf.keras.applications.vgg19.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "2984": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.vgg19",
    "fullName": "tf.keras.applications.vgg19.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "Preprocesses a tensor or Numpy array encoding a batch of images."
  },
  "2985": {
    "name": "VGG16",
    "module": "tf.keras.applications.vgg16",
    "fullName": "tf.keras.applications.vgg16.VGG16",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the VGG16 model."
  },
  "2986": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.vgg16",
    "fullName": "tf.keras.applications.vgg16.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "2987": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.vgg16",
    "fullName": "tf.keras.applications.vgg16.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "Preprocesses a tensor or Numpy array encoding a batch of images."
  },
  "2988": {
    "name": "ResNet101V2",
    "module": "tf.keras.applications.resnet_v2",
    "fullName": "tf.keras.applications.resnet_v2.ResNet101V2",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ResNet101V2 architecture."
  },
  "2989": {
    "name": "ResNet152V2",
    "module": "tf.keras.applications.resnet_v2",
    "fullName": "tf.keras.applications.resnet_v2.ResNet152V2",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ResNet152V2 architecture."
  },
  "2990": {
    "name": "ResNet50V2",
    "module": "tf.keras.applications.resnet_v2",
    "fullName": "tf.keras.applications.resnet_v2.ResNet50V2",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ResNet50V2 architecture."
  },
  "2991": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.resnet_v2",
    "fullName": "tf.keras.applications.resnet_v2.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "2992": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.resnet_v2",
    "fullName": "tf.keras.applications.resnet_v2.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "Preprocesses a tensor or Numpy array encoding a batch of images."
  },
  "2993": {
    "name": "ResNetRS101",
    "module": "tf.keras.applications.resnet_rs",
    "fullName": "tf.keras.applications.resnet_rs.ResNetRS101",
    "signature": "(include_top=True, weights='imagenet', classes=1000, input_shape=None, input_tensor=None, pooling=None, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the ResNetRS101 architecture."
  },
  "2994": {
    "name": "ResNetRS152",
    "module": "tf.keras.applications.resnet_rs",
    "fullName": "tf.keras.applications.resnet_rs.ResNetRS152",
    "signature": "(include_top=True, weights='imagenet', classes=1000, input_shape=None, input_tensor=None, pooling=None, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the ResNetRS152 architecture."
  },
  "2995": {
    "name": "ResNetRS200",
    "module": "tf.keras.applications.resnet_rs",
    "fullName": "tf.keras.applications.resnet_rs.ResNetRS200",
    "signature": "(include_top=True, weights='imagenet', classes=1000, input_shape=None, input_tensor=None, pooling=None, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the ResNetRS200 architecture."
  },
  "2996": {
    "name": "ResNetRS270",
    "module": "tf.keras.applications.resnet_rs",
    "fullName": "tf.keras.applications.resnet_rs.ResNetRS270",
    "signature": "(include_top=True, weights='imagenet', classes=1000, input_shape=None, input_tensor=None, pooling=None, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the ResNetRS270 architecture."
  },
  "2997": {
    "name": "ResNetRS350",
    "module": "tf.keras.applications.resnet_rs",
    "fullName": "tf.keras.applications.resnet_rs.ResNetRS350",
    "signature": "(include_top=True, weights='imagenet', classes=1000, input_shape=None, input_tensor=None, pooling=None, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the ResNetRS350 architecture."
  },
  "2998": {
    "name": "ResNetRS420",
    "module": "tf.keras.applications.resnet_rs",
    "fullName": "tf.keras.applications.resnet_rs.ResNetRS420",
    "signature": "(include_top=True, weights='imagenet', classes=1000, input_shape=None, input_tensor=None, pooling=None, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the ResNetRS420 architecture."
  },
  "2999": {
    "name": "ResNetRS50",
    "module": "tf.keras.applications.resnet_rs",
    "fullName": "tf.keras.applications.resnet_rs.ResNetRS50",
    "signature": "(include_top=True, weights='imagenet', classes=1000, input_shape=None, input_tensor=None, pooling=None, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the ResNetRS50 architecture."
  },
  "3000": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.resnet_rs",
    "fullName": "tf.keras.applications.resnet_rs.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3001": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.resnet_rs",
    "fullName": "tf.keras.applications.resnet_rs.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "A placeholder method for backward compatibility."
  },
  "3002": {
    "name": "ResNet50",
    "module": "tf.keras.applications.resnet50",
    "fullName": "tf.keras.applications.resnet50.ResNet50",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, **kwargs)",
    "description": "Instantiates the ResNet50 architecture."
  },
  "3003": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.resnet50",
    "fullName": "tf.keras.applications.resnet50.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3004": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.resnet50",
    "fullName": "tf.keras.applications.resnet50.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "Preprocesses a tensor or Numpy array encoding a batch of images."
  },
  "3005": {
    "name": "ResNet101",
    "module": "tf.keras.applications.resnet",
    "fullName": "tf.keras.applications.resnet.ResNet101",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, **kwargs)",
    "description": "Instantiates the ResNet101 architecture."
  },
  "3006": {
    "name": "ResNet152",
    "module": "tf.keras.applications.resnet",
    "fullName": "tf.keras.applications.resnet.ResNet152",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, **kwargs)",
    "description": "Instantiates the ResNet152 architecture."
  },
  "3007": {
    "name": "ResNet50",
    "module": "tf.keras.applications.resnet",
    "fullName": "tf.keras.applications.resnet.ResNet50",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, **kwargs)",
    "description": "Instantiates the ResNet50 architecture."
  },
  "3008": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.resnet",
    "fullName": "tf.keras.applications.resnet.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3009": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.resnet",
    "fullName": "tf.keras.applications.resnet.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "Preprocesses a tensor or Numpy array encoding a batch of images."
  },
  "3010": {
    "name": "RegNetX002",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetX002",
    "signature": "(model_name='regnetx002', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX002 architecture."
  },
  "3011": {
    "name": "RegNetX004",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetX004",
    "signature": "(model_name='regnetx004', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX004 architecture."
  },
  "3012": {
    "name": "RegNetX006",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetX006",
    "signature": "(model_name='regnetx006', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX006 architecture."
  },
  "3013": {
    "name": "RegNetX008",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetX008",
    "signature": "(model_name='regnetx008', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX008 architecture."
  },
  "3014": {
    "name": "RegNetX016",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetX016",
    "signature": "(model_name='regnetx016', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX016 architecture."
  },
  "3015": {
    "name": "RegNetX032",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetX032",
    "signature": "(model_name='regnetx032', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX032 architecture."
  },
  "3016": {
    "name": "RegNetX040",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetX040",
    "signature": "(model_name='regnetx040', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX040 architecture."
  },
  "3017": {
    "name": "RegNetX064",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetX064",
    "signature": "(model_name='regnetx064', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX064 architecture."
  },
  "3018": {
    "name": "RegNetX080",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetX080",
    "signature": "(model_name='regnetx080', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX080 architecture."
  },
  "3019": {
    "name": "RegNetX120",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetX120",
    "signature": "(model_name='regnetx120', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX120 architecture."
  },
  "3020": {
    "name": "RegNetX160",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetX160",
    "signature": "(model_name='regnetx160', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX160 architecture."
  },
  "3021": {
    "name": "RegNetX320",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetX320",
    "signature": "(model_name='regnetx320', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetX320 architecture."
  },
  "3022": {
    "name": "RegNetY002",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetY002",
    "signature": "(model_name='regnety002', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY002 architecture."
  },
  "3023": {
    "name": "RegNetY004",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetY004",
    "signature": "(model_name='regnety004', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY004 architecture."
  },
  "3024": {
    "name": "RegNetY006",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetY006",
    "signature": "(model_name='regnety006', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY006 architecture."
  },
  "3025": {
    "name": "RegNetY008",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetY008",
    "signature": "(model_name='regnety008', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY008 architecture."
  },
  "3026": {
    "name": "RegNetY016",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetY016",
    "signature": "(model_name='regnety016', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY016 architecture."
  },
  "3027": {
    "name": "RegNetY032",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetY032",
    "signature": "(model_name='regnety032', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY032 architecture."
  },
  "3028": {
    "name": "RegNetY040",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetY040",
    "signature": "(model_name='regnety040', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY040 architecture."
  },
  "3029": {
    "name": "RegNetY064",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetY064",
    "signature": "(model_name='regnety064', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY064 architecture."
  },
  "3030": {
    "name": "RegNetY080",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetY080",
    "signature": "(model_name='regnety080', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY080 architecture."
  },
  "3031": {
    "name": "RegNetY120",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetY120",
    "signature": "(model_name='regnety120', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY120 architecture."
  },
  "3032": {
    "name": "RegNetY160",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetY160",
    "signature": "(model_name='regnety160', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY160 architecture."
  },
  "3033": {
    "name": "RegNetY320",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.RegNetY320",
    "signature": "(model_name='regnety320', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the RegNetY320 architecture."
  },
  "3034": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3035": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.regnet",
    "fullName": "tf.keras.applications.regnet.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "A placeholder method for backward compatibility."
  },
  "3036": {
    "name": "NASNetLarge",
    "module": "tf.keras.applications.nasnet",
    "fullName": "tf.keras.applications.nasnet.NASNetLarge",
    "signature": "(input_shape=None, include_top=True, weights='imagenet', input_tensor=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates a NASNet model in ImageNet mode."
  },
  "3037": {
    "name": "NASNetMobile",
    "module": "tf.keras.applications.nasnet",
    "fullName": "tf.keras.applications.nasnet.NASNetMobile",
    "signature": "(input_shape=None, include_top=True, weights='imagenet', input_tensor=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates a Mobile NASNet model in ImageNet mode."
  },
  "3038": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.nasnet",
    "fullName": "tf.keras.applications.nasnet.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3039": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.nasnet",
    "fullName": "tf.keras.applications.nasnet.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "Preprocesses a tensor or Numpy array encoding a batch of images."
  },
  "3040": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.mobilenet_v3",
    "fullName": "tf.keras.applications.mobilenet_v3.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3041": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.mobilenet_v3",
    "fullName": "tf.keras.applications.mobilenet_v3.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "A placeholder method for backward compatibility."
  },
  "3042": {
    "name": "MobileNetV2",
    "module": "tf.keras.applications.mobilenet_v2",
    "fullName": "tf.keras.applications.mobilenet_v2.MobileNetV2",
    "signature": "(input_shape=None, alpha=1.0, include_top=True, weights='imagenet', input_tensor=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the MobileNetV2 architecture."
  },
  "3043": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.mobilenet_v2",
    "fullName": "tf.keras.applications.mobilenet_v2.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3044": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.mobilenet_v2",
    "fullName": "tf.keras.applications.mobilenet_v2.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "Preprocesses a tensor or Numpy array encoding a batch of images."
  },
  "3045": {
    "name": "MobileNet",
    "module": "tf.keras.applications.mobilenet",
    "fullName": "tf.keras.applications.mobilenet.MobileNet",
    "signature": "(input_shape=None, alpha=1.0, depth_multiplier=1, dropout=0.001, include_top=True, weights='imagenet', input_tensor=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the MobileNet architecture."
  },
  "3046": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.mobilenet",
    "fullName": "tf.keras.applications.mobilenet.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3047": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.mobilenet",
    "fullName": "tf.keras.applications.mobilenet.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "Preprocesses a tensor or Numpy array encoding a batch of images."
  },
  "3048": {
    "name": "InceptionV3",
    "module": "tf.keras.applications.inception_v3",
    "fullName": "tf.keras.applications.inception_v3.InceptionV3",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the Inception v3 architecture."
  },
  "3049": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.inception_v3",
    "fullName": "tf.keras.applications.inception_v3.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3050": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.inception_v3",
    "fullName": "tf.keras.applications.inception_v3.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "Preprocesses a tensor or Numpy array encoding a batch of images."
  },
  "3051": {
    "name": "InceptionResNetV2",
    "module": "tf.keras.applications.inception_resnet_v2",
    "fullName": "tf.keras.applications.inception_resnet_v2.InceptionResNetV2",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the Inception-ResNet v2 architecture."
  },
  "3052": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.inception_resnet_v2",
    "fullName": "tf.keras.applications.inception_resnet_v2.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3053": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.inception_resnet_v2",
    "fullName": "tf.keras.applications.inception_resnet_v2.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "Preprocesses a tensor or Numpy array encoding a batch of images."
  },
  "3054": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.imagenet_utils",
    "fullName": "tf.keras.applications.imagenet_utils.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3055": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.imagenet_utils",
    "fullName": "tf.keras.applications.imagenet_utils.preprocess_input",
    "signature": "(x, data_format=None, mode='caffe')",
    "description": "Preprocesses a tensor or Numpy array encoding a batch of images."
  },
  "3056": {
    "name": "EfficientNetV2B0",
    "module": "tf.keras.applications.efficientnet_v2",
    "fullName": "tf.keras.applications.efficientnet_v2.EfficientNetV2B0",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the EfficientNetV2B0 architecture."
  },
  "3057": {
    "name": "EfficientNetV2B1",
    "module": "tf.keras.applications.efficientnet_v2",
    "fullName": "tf.keras.applications.efficientnet_v2.EfficientNetV2B1",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the EfficientNetV2B1 architecture."
  },
  "3058": {
    "name": "EfficientNetV2B2",
    "module": "tf.keras.applications.efficientnet_v2",
    "fullName": "tf.keras.applications.efficientnet_v2.EfficientNetV2B2",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the EfficientNetV2B2 architecture."
  },
  "3059": {
    "name": "EfficientNetV2B3",
    "module": "tf.keras.applications.efficientnet_v2",
    "fullName": "tf.keras.applications.efficientnet_v2.EfficientNetV2B3",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the EfficientNetV2B3 architecture."
  },
  "3060": {
    "name": "EfficientNetV2L",
    "module": "tf.keras.applications.efficientnet_v2",
    "fullName": "tf.keras.applications.efficientnet_v2.EfficientNetV2L",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the EfficientNetV2L architecture."
  },
  "3061": {
    "name": "EfficientNetV2M",
    "module": "tf.keras.applications.efficientnet_v2",
    "fullName": "tf.keras.applications.efficientnet_v2.EfficientNetV2M",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the EfficientNetV2M architecture."
  },
  "3062": {
    "name": "EfficientNetV2S",
    "module": "tf.keras.applications.efficientnet_v2",
    "fullName": "tf.keras.applications.efficientnet_v2.EfficientNetV2S",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', include_preprocessing=True)",
    "description": "Instantiates the EfficientNetV2S architecture."
  },
  "3063": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.efficientnet_v2",
    "fullName": "tf.keras.applications.efficientnet_v2.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3064": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.efficientnet_v2",
    "fullName": "tf.keras.applications.efficientnet_v2.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "A placeholder method for backward compatibility."
  },
  "3065": {
    "name": "EfficientNetB0",
    "module": "tf.keras.applications.efficientnet",
    "fullName": "tf.keras.applications.efficientnet.EfficientNetB0",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB0 architecture."
  },
  "3066": {
    "name": "EfficientNetB1",
    "module": "tf.keras.applications.efficientnet",
    "fullName": "tf.keras.applications.efficientnet.EfficientNetB1",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB1 architecture."
  },
  "3067": {
    "name": "EfficientNetB2",
    "module": "tf.keras.applications.efficientnet",
    "fullName": "tf.keras.applications.efficientnet.EfficientNetB2",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB2 architecture."
  },
  "3068": {
    "name": "EfficientNetB3",
    "module": "tf.keras.applications.efficientnet",
    "fullName": "tf.keras.applications.efficientnet.EfficientNetB3",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB3 architecture."
  },
  "3069": {
    "name": "EfficientNetB4",
    "module": "tf.keras.applications.efficientnet",
    "fullName": "tf.keras.applications.efficientnet.EfficientNetB4",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB4 architecture."
  },
  "3070": {
    "name": "EfficientNetB5",
    "module": "tf.keras.applications.efficientnet",
    "fullName": "tf.keras.applications.efficientnet.EfficientNetB5",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB5 architecture."
  },
  "3071": {
    "name": "EfficientNetB6",
    "module": "tf.keras.applications.efficientnet",
    "fullName": "tf.keras.applications.efficientnet.EfficientNetB6",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB6 architecture."
  },
  "3072": {
    "name": "EfficientNetB7",
    "module": "tf.keras.applications.efficientnet",
    "fullName": "tf.keras.applications.efficientnet.EfficientNetB7",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax', **kwargs)",
    "description": "Instantiates the EfficientNetB7 architecture."
  },
  "3073": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.efficientnet",
    "fullName": "tf.keras.applications.efficientnet.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3074": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.efficientnet",
    "fullName": "tf.keras.applications.efficientnet.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "A placeholder method for backward compatibility."
  },
  "3075": {
    "name": "DenseNet121",
    "module": "tf.keras.applications.densenet",
    "fullName": "tf.keras.applications.densenet.DenseNet121",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the Densenet121 architecture."
  },
  "3076": {
    "name": "DenseNet169",
    "module": "tf.keras.applications.densenet",
    "fullName": "tf.keras.applications.densenet.DenseNet169",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the Densenet169 architecture."
  },
  "3077": {
    "name": "DenseNet201",
    "module": "tf.keras.applications.densenet",
    "fullName": "tf.keras.applications.densenet.DenseNet201",
    "signature": "(include_top=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the Densenet201 architecture."
  },
  "3078": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.densenet",
    "fullName": "tf.keras.applications.densenet.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3079": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.densenet",
    "fullName": "tf.keras.applications.densenet.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "Preprocesses a tensor or Numpy array encoding a batch of images."
  },
  "3080": {
    "name": "ConvNeXtBase",
    "module": "tf.keras.applications.convnext",
    "fullName": "tf.keras.applications.convnext.ConvNeXtBase",
    "signature": "(model_name='convnext_base', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ConvNeXtBase architecture."
  },
  "3081": {
    "name": "ConvNeXtLarge",
    "module": "tf.keras.applications.convnext",
    "fullName": "tf.keras.applications.convnext.ConvNeXtLarge",
    "signature": "(model_name='convnext_large', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ConvNeXtLarge architecture."
  },
  "3082": {
    "name": "ConvNeXtSmall",
    "module": "tf.keras.applications.convnext",
    "fullName": "tf.keras.applications.convnext.ConvNeXtSmall",
    "signature": "(model_name='convnext_small', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ConvNeXtSmall architecture."
  },
  "3083": {
    "name": "ConvNeXtTiny",
    "module": "tf.keras.applications.convnext",
    "fullName": "tf.keras.applications.convnext.ConvNeXtTiny",
    "signature": "(model_name='convnext_tiny', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ConvNeXtTiny architecture."
  },
  "3084": {
    "name": "ConvNeXtXLarge",
    "module": "tf.keras.applications.convnext",
    "fullName": "tf.keras.applications.convnext.ConvNeXtXLarge",
    "signature": "(model_name='convnext_xlarge', include_top=True, include_preprocessing=True, weights='imagenet', input_tensor=None, input_shape=None, pooling=None, classes=1000, classifier_activation='softmax')",
    "description": "Instantiates the ConvNeXtXLarge architecture."
  },
  "3085": {
    "name": "decode_predictions",
    "module": "tf.keras.applications.convnext",
    "fullName": "tf.keras.applications.convnext.decode_predictions",
    "signature": "(preds, top=5)",
    "description": "Decodes the prediction of an ImageNet model."
  },
  "3086": {
    "name": "preprocess_input",
    "module": "tf.keras.applications.convnext",
    "fullName": "tf.keras.applications.convnext.preprocess_input",
    "signature": "(x, data_format=None)",
    "description": "A placeholder method for backward compatibility."
  },
  "3087": {
    "name": "deserialize",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.deserialize",
    "signature": "(name, custom_objects=None)",
    "description": "Returns activation function given a string identifier."
  },
  "3088": {
    "name": "elu",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.elu",
    "signature": "(x, alpha=1.0)",
    "description": "Exponential Linear Unit."
  },
  "3089": {
    "name": "exponential",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.exponential",
    "signature": "(x)",
    "description": "Exponential activation function."
  },
  "3090": {
    "name": "gelu",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.gelu",
    "signature": "(x, approximate=False)",
    "description": "Applies the Gaussian error linear unit (GELU) activation function."
  },
  "3091": {
    "name": "get",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.get",
    "signature": "(identifier)",
    "description": "Returns function."
  },
  "3092": {
    "name": "hard_sigmoid",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.hard_sigmoid",
    "signature": "(x)",
    "description": "Hard sigmoid activation function."
  },
  "3093": {
    "name": "linear",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.linear",
    "signature": "(x)",
    "description": "Linear activation function (pass-through)."
  },
  "3094": {
    "name": "relu",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.relu",
    "signature": "(x, alpha=0.0, max_value=None, threshold=0.0)",
    "description": "Applies the rectified linear unit activation function."
  },
  "3095": {
    "name": "selu",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.selu",
    "signature": "(x)",
    "description": "Scaled Exponential Linear Unit (SELU)."
  },
  "3096": {
    "name": "serialize",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.serialize",
    "signature": "(activation)",
    "description": "Returns the string identifier of an activation function."
  },
  "3097": {
    "name": "sigmoid",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.sigmoid",
    "signature": "(x)",
    "description": "Sigmoid activation function, `sigmoid(x) = 1 / (1 + exp(-x))`."
  },
  "3098": {
    "name": "softmax",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.softmax",
    "signature": "(x, axis=-1)",
    "description": "Softmax converts a vector of values to a probability distribution."
  },
  "3099": {
    "name": "softplus",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.softplus",
    "signature": "(x)",
    "description": "Softplus activation function, `softplus(x) = log(exp(x) + 1)`."
  },
  "3100": {
    "name": "softsign",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.softsign",
    "signature": "(x)",
    "description": "Softsign activation function, `softsign(x) = x / (abs(x) + 1)`."
  },
  "3101": {
    "name": "swish",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.swish",
    "signature": "(x)",
    "description": "Swish activation function, `swish(x) = x * sigmoid(x)`."
  },
  "3102": {
    "name": "tanh",
    "module": "tf.keras.activations",
    "fullName": "tf.keras.activations.tanh",
    "signature": "(x)",
    "description": "Hyperbolic tangent activation function."
  },
  "3103": {
    "name": "FixedLenFeature",
    "module": "tf.io",
    "fullName": "tf.io.FixedLenFeature",
    "signature": "(shape, dtype, default_value=None)",
    "description": "Configuration for parsing a fixed-length input feature."
  },
  "3104": {
    "name": "FixedLenSequenceFeature",
    "module": "tf.io",
    "fullName": "tf.io.FixedLenSequenceFeature",
    "signature": "(shape, dtype, allow_missing=False, default_value=None)",
    "description": "Configuration for parsing a variable-length input feature into a `Tensor`."
  },
  "3105": {
    "name": "RaggedFeature",
    "module": "tf.io",
    "fullName": "tf.io.RaggedFeature",
    "signature": "(dtype, value_key=None, partitions=(), row_splits_dtype=tf.int32, validate=False)",
    "description": "Configuration for passing a RaggedTensor input feature."
  },
  "3106": {
    "name": "SparseFeature",
    "module": "tf.io",
    "fullName": "tf.io.SparseFeature",
    "signature": "(index_key, value_key, dtype, size, already_sorted=False)",
    "description": "Configuration for parsing a sparse input feature from an `Example`."
  },
  "3107": {
    "name": "TFRecordOptions",
    "module": "tf.io",
    "fullName": "tf.io.TFRecordOptions",
    "signature": "(compression_type=None, flush_mode=None, input_buffer_size=None, output_buffer_size=None, window_bits=None, compression_level=None, compression_method=None, mem_level=None, compression_strategy=None)",
    "description": "Options used for manipulating TFRecord files."
  },
  "3108": {
    "name": "TFRecordWriter",
    "module": "tf.io",
    "fullName": "tf.io.TFRecordWriter",
    "signature": "(path, options=None)",
    "description": "A class to write records to a TFRecords file."
  },
  "3109": {
    "name": "VarLenFeature",
    "module": "tf.io",
    "fullName": "tf.io.VarLenFeature",
    "signature": "(dtype)",
    "description": "Configuration for parsing a variable-length input feature."
  },
  "3110": {
    "name": "decode_and_crop_jpeg",
    "module": "tf.io",
    "fullName": "tf.io.decode_and_crop_jpeg",
    "signature": "(contents, crop_window, channels=0, ratio=1, fancy_upscaling=True, try_recover_truncated=False, acceptable_fraction=1, dct_method='', name=None)",
    "description": "Decode and Crop a JPEG-encoded image to a uint8 tensor."
  },
  "3111": {
    "name": "decode_base64",
    "module": "tf.io",
    "fullName": "tf.io.decode_base64",
    "signature": "(input, name=None)",
    "description": "Decode web-safe base64-encoded strings."
  },
  "3112": {
    "name": "decode_bmp",
    "module": "tf.io",
    "fullName": "tf.io.decode_bmp",
    "signature": "(contents, channels=0, name=None)",
    "description": "Decode the first frame of a BMP-encoded image to a uint8 tensor."
  },
  "3113": {
    "name": "decode_compressed",
    "module": "tf.io",
    "fullName": "tf.io.decode_compressed",
    "signature": "(bytes, compression_type='', name=None)",
    "description": "Decompress strings."
  },
  "3114": {
    "name": "decode_csv",
    "module": "tf.io",
    "fullName": "tf.io.decode_csv",
    "signature": "(records, record_defaults, field_delim=',', use_quote_delim=True, na_value='', select_cols=None, name=None)",
    "description": "Convert CSV records to tensors. Each column maps to one tensor."
  },
  "3115": {
    "name": "decode_gif",
    "module": "tf.io",
    "fullName": "tf.io.decode_gif",
    "signature": "(contents, name=None)",
    "description": "Decode the frame(s) of a GIF-encoded image to a uint8 tensor."
  },
  "3116": {
    "name": "decode_image",
    "module": "tf.io",
    "fullName": "tf.io.decode_image",
    "signature": "(contents, channels=None, dtype=tf.uint8, name=None, expand_animations=True)",
    "description": "Function for `decode_bmp`, `decode_gif`, `decode_jpeg`, and `decode_png`."
  },
  "3117": {
    "name": "decode_jpeg",
    "module": "tf.io",
    "fullName": "tf.io.decode_jpeg",
    "signature": "(contents, channels=0, ratio=1, fancy_upscaling=True, try_recover_truncated=False, acceptable_fraction=1, dct_method='', name=None)",
    "description": "Decode a JPEG-encoded image to a uint8 tensor."
  },
  "3118": {
    "name": "decode_json_example",
    "module": "tf.io",
    "fullName": "tf.io.decode_json_example",
    "signature": "(json_examples, name=None)",
    "description": "Convert JSON-encoded Example records to binary protocol buffer strings."
  },
  "3119": {
    "name": "decode_png",
    "module": "tf.io",
    "fullName": "tf.io.decode_png",
    "signature": "(contents, channels=0, dtype=tf.uint8, name=None)",
    "description": "Decode a PNG-encoded image to a uint8 or uint16 tensor."
  },
  "3120": {
    "name": "decode_proto",
    "module": "tf.io",
    "fullName": "tf.io.decode_proto",
    "signature": "(bytes, message_type, field_names, output_types, descriptor_source='local://', message_format='binary', sanitize=False, name=None)",
    "description": "The op extracts fields from a serialized protocol buffers message into tensors."
  },
  "3121": {
    "name": "decode_raw",
    "module": "tf.io",
    "fullName": "tf.io.decode_raw",
    "signature": "(input_bytes, out_type, little_endian=True, fixed_length=None, name=None)",
    "description": "Convert raw bytes from input tensor into numeric tensors."
  },
  "3122": {
    "name": "deserialize_many_sparse",
    "module": "tf.io",
    "fullName": "tf.io.deserialize_many_sparse",
    "signature": "(serialized_sparse, dtype, rank=None, name=None)",
    "description": "Deserialize and concatenate `SparseTensors` from a serialized minibatch."
  },
  "3123": {
    "name": "encode_base64",
    "module": "tf.io",
    "fullName": "tf.io.encode_base64",
    "signature": "(input, pad=False, name=None)",
    "description": "Encode strings into web-safe base64 format."
  },
  "3124": {
    "name": "encode_jpeg",
    "module": "tf.io",
    "fullName": "tf.io.encode_jpeg",
    "signature": "(image, format='', quality=95, progressive=False, optimize_size=False, chroma_downsampling=True, density_unit='in', x_density=300, y_density=300, xmp_metadata='', name=None)",
    "description": "JPEG-encode an image."
  },
  "3125": {
    "name": "encode_png",
    "module": "tf.io",
    "fullName": "tf.io.encode_png",
    "signature": "(image, compression=-1, name=None)",
    "description": "PNG-encode an image."
  },
  "3126": {
    "name": "encode_proto",
    "module": "tf.io",
    "fullName": "tf.io.encode_proto",
    "signature": "(sizes, values, field_names, message_type, descriptor_source='local://', name=None)",
    "description": "The op serializes protobuf messages provided in the input tensors."
  },
  "3127": {
    "name": "extract_jpeg_shape",
    "module": "tf.io",
    "fullName": "tf.io.extract_jpeg_shape",
    "signature": "(contents, output_type=tf.int32, name=None)",
    "description": "Extract the shape information of a JPEG-encoded image."
  },
  "3128": {
    "name": "is_jpeg",
    "module": "tf.io",
    "fullName": "tf.io.is_jpeg",
    "signature": "(contents, name=None)",
    "description": "Convenience function to check if the 'contents' encodes a JPEG image."
  },
  "3129": {
    "name": "match_filenames_once",
    "module": "tf.io",
    "fullName": "tf.io.match_filenames_once",
    "signature": "(pattern, name=None)",
    "description": "Save the list of files matching pattern, so it is only computed once."
  },
  "3130": {
    "name": "matching_files",
    "module": "tf.io",
    "fullName": "tf.io.matching_files",
    "signature": "(pattern, name=None)",
    "description": "Returns the set of files matching one or more glob patterns."
  },
  "3131": {
    "name": "parse_example",
    "module": "tf.io",
    "fullName": "tf.io.parse_example",
    "signature": "(serialized, features, example_names=None, name=None)",
    "description": "Parses `Example` protos into a `dict` of tensors."
  },
  "3132": {
    "name": "parse_sequence_example",
    "module": "tf.io",
    "fullName": "tf.io.parse_sequence_example",
    "signature": "(serialized, context_features=None, sequence_features=None, example_names=None, name=None)",
    "description": "Parses a batch of `SequenceExample` protos."
  },
  "3133": {
    "name": "parse_single_example",
    "module": "tf.io",
    "fullName": "tf.io.parse_single_example",
    "signature": "(serialized, features, example_names=None, name=None)",
    "description": "Parses a single `Example` proto."
  },
  "3134": {
    "name": "parse_single_sequence_example",
    "module": "tf.io",
    "fullName": "tf.io.parse_single_sequence_example",
    "signature": "(serialized, context_features=None, sequence_features=None, example_name=None, name=None)",
    "description": "Parses a single `SequenceExample` proto."
  },
  "3135": {
    "name": "parse_tensor",
    "module": "tf.io",
    "fullName": "tf.io.parse_tensor",
    "signature": "(serialized, out_type, name=None)",
    "description": "Transforms a serialized tensorflow.TensorProto proto into a Tensor."
  },
  "3136": {
    "name": "read_file",
    "module": "tf.io",
    "fullName": "tf.io.read_file",
    "signature": "(filename, name=None)",
    "description": "Reads the contents of file."
  },
  "3137": {
    "name": "serialize_many_sparse",
    "module": "tf.io",
    "fullName": "tf.io.serialize_many_sparse",
    "signature": "(sp_input, out_type=tf.string, name=None)",
    "description": "Serialize `N`-minibatch `SparseTensor` into an `[N, 3]` `Tensor`."
  },
  "3138": {
    "name": "serialize_sparse",
    "module": "tf.io",
    "fullName": "tf.io.serialize_sparse",
    "signature": "(sp_input, out_type=tf.string, name=None)",
    "description": "Serialize a `SparseTensor` into a 3-vector (1-D `Tensor`) object."
  },
  "3139": {
    "name": "serialize_tensor",
    "module": "tf.io",
    "fullName": "tf.io.serialize_tensor",
    "signature": "(tensor, name=None)",
    "description": "Transforms a Tensor into a serialized TensorProto proto."
  },
  "3140": {
    "name": "write_file",
    "module": "tf.io",
    "fullName": "tf.io.write_file",
    "signature": "(filename, contents, name=None)",
    "description": "Writes `contents` to the file at input `filename`."
  },
  "3141": {
    "name": "write_graph",
    "module": "tf.io",
    "fullName": "tf.io.write_graph",
    "signature": "(graph_or_graph_def, logdir, name, as_text=True)",
    "description": "Writes a graph proto to a file."
  },
  "3142": {
    "name": "GFile",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.GFile",
    "signature": "(name, mode='r')",
    "description": "File I/O wrappers without thread locking."
  },
  "3143": {
    "name": "copy",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.copy",
    "signature": "(src, dst, overwrite=False)",
    "description": "Copies data from `src` to `dst`."
  },
  "3144": {
    "name": "exists",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.exists",
    "signature": "(path)",
    "description": "Determines whether a path exists or not."
  },
  "3145": {
    "name": "get_registered_schemes",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.get_registered_schemes",
    "signature": "()",
    "description": "Returns the currently registered filesystem schemes."
  },
  "3146": {
    "name": "glob",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.glob",
    "signature": "(pattern)",
    "description": "Returns a list of files that match the given pattern(s)."
  },
  "3147": {
    "name": "isdir",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.isdir",
    "signature": "(path)",
    "description": "Returns whether the path is a directory or not."
  },
  "3148": {
    "name": "join",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.join",
    "signature": "(path, *paths)",
    "description": "Join one or more path components intelligently."
  },
  "3149": {
    "name": "listdir",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.listdir",
    "signature": "(path)",
    "description": "Returns a list of entries contained within a directory."
  },
  "3150": {
    "name": "makedirs",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.makedirs",
    "signature": "(path)",
    "description": "Creates a directory and all parent/intermediate directories."
  },
  "3151": {
    "name": "mkdir",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.mkdir",
    "signature": "(path)",
    "description": "Creates a directory with the name given by `path`."
  },
  "3152": {
    "name": "remove",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.remove",
    "signature": "(path)",
    "description": "Deletes the path located at 'path'."
  },
  "3153": {
    "name": "rename",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.rename",
    "signature": "(src, dst, overwrite=False)",
    "description": "Rename or move a file / directory."
  },
  "3154": {
    "name": "rmtree",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.rmtree",
    "signature": "(path)",
    "description": "Deletes everything under path recursively."
  },
  "3155": {
    "name": "stat",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.stat",
    "signature": "(path)",
    "description": "Returns file statistics for a given path."
  },
  "3156": {
    "name": "walk",
    "module": "tf.io.gfile",
    "fullName": "tf.io.gfile.walk",
    "signature": "(top, topdown=True, onerror=None)",
    "description": "Recursive directory tree generator for directories."
  },
  "3157": {
    "name": "Constant",
    "module": "tf.initializers",
    "fullName": "tf.initializers.Constant",
    "signature": "(value=0)",
    "description": "Initializer that generates tensors with constant values."
  },
  "3158": {
    "name": "GlorotNormal",
    "module": "tf.initializers",
    "fullName": "tf.initializers.GlorotNormal",
    "signature": "(seed=None)",
    "description": "The Glorot normal initializer, also called Xavier normal initializer."
  },
  "3159": {
    "name": "GlorotUniform",
    "module": "tf.initializers",
    "fullName": "tf.initializers.GlorotUniform",
    "signature": "(seed=None)",
    "description": "The Glorot uniform initializer, also called Xavier uniform initializer."
  },
  "3160": {
    "name": "HeNormal",
    "module": "tf.initializers",
    "fullName": "tf.initializers.HeNormal",
    "signature": "(seed=None)",
    "description": "He normal initializer."
  },
  "3161": {
    "name": "HeUniform",
    "module": "tf.initializers",
    "fullName": "tf.initializers.HeUniform",
    "signature": "(seed=None)",
    "description": "He uniform variance scaling initializer."
  },
  "3162": {
    "name": "Identity",
    "module": "tf.initializers",
    "fullName": "tf.initializers.Identity",
    "signature": "(gain=1.0)",
    "description": "Initializer that generates the identity matrix."
  },
  "3163": {
    "name": "Initializer",
    "module": "tf.initializers",
    "fullName": "tf.initializers.Initializer",
    "signature": "()",
    "description": "Initializer base class: all Keras initializers inherit from this class."
  },
  "3164": {
    "name": "LecunNormal",
    "module": "tf.initializers",
    "fullName": "tf.initializers.LecunNormal",
    "signature": "(seed=None)",
    "description": "Lecun normal initializer."
  },
  "3165": {
    "name": "LecunUniform",
    "module": "tf.initializers",
    "fullName": "tf.initializers.LecunUniform",
    "signature": "(seed=None)",
    "description": "Lecun uniform initializer."
  },
  "3166": {
    "name": "Ones",
    "module": "tf.initializers",
    "fullName": "tf.initializers.Ones",
    "signature": "()",
    "description": "Initializer that generates tensors initialized to 1."
  },
  "3167": {
    "name": "Orthogonal",
    "module": "tf.initializers",
    "fullName": "tf.initializers.Orthogonal",
    "signature": "(gain=1.0, seed=None)",
    "description": "Initializer that generates an orthogonal matrix."
  },
  "3168": {
    "name": "RandomNormal",
    "module": "tf.initializers",
    "fullName": "tf.initializers.RandomNormal",
    "signature": "(mean=0.0, stddev=0.05, seed=None)",
    "description": "Initializer that generates tensors with a normal distribution."
  },
  "3169": {
    "name": "RandomUniform",
    "module": "tf.initializers",
    "fullName": "tf.initializers.RandomUniform",
    "signature": "(minval=-0.05, maxval=0.05, seed=None)",
    "description": "Initializer that generates tensors with a uniform distribution."
  },
  "3170": {
    "name": "TruncatedNormal",
    "module": "tf.initializers",
    "fullName": "tf.initializers.TruncatedNormal",
    "signature": "(mean=0.0, stddev=0.05, seed=None)",
    "description": "Initializer that generates a truncated normal distribution."
  },
  "3171": {
    "name": "VarianceScaling",
    "module": "tf.initializers",
    "fullName": "tf.initializers.VarianceScaling",
    "signature": "(scale=1.0, mode='fan_in', distribution='truncated_normal', seed=None)",
    "description": "Initializer capable of adapting its scale to the shape of weights tensors."
  },
  "3172": {
    "name": "Zeros",
    "module": "tf.initializers",
    "fullName": "tf.initializers.Zeros",
    "signature": "()",
    "description": "Initializer that generates tensors initialized to 0."
  },
  "3173": {
    "name": "constant",
    "module": "tf.initializers",
    "fullName": "tf.initializers.constant",
    "signature": "(value=0)",
    "description": "Initializer that generates tensors with constant values."
  },
  "3174": {
    "name": "deserialize",
    "module": "tf.initializers",
    "fullName": "tf.initializers.deserialize",
    "signature": "(config, custom_objects=None)",
    "description": "Return an `Initializer` object from its config."
  },
  "3175": {
    "name": "get",
    "module": "tf.initializers",
    "fullName": "tf.initializers.get",
    "signature": "(identifier)",
    "description": "Retrieve a Keras initializer by the identifier."
  },
  "3176": {
    "name": "glorot_normal",
    "module": "tf.initializers",
    "fullName": "tf.initializers.glorot_normal",
    "signature": "(seed=None)",
    "description": "The Glorot normal initializer, also called Xavier normal initializer."
  },
  "3177": {
    "name": "glorot_uniform",
    "module": "tf.initializers",
    "fullName": "tf.initializers.glorot_uniform",
    "signature": "(seed=None)",
    "description": "The Glorot uniform initializer, also called Xavier uniform initializer."
  },
  "3178": {
    "name": "he_normal",
    "module": "tf.initializers",
    "fullName": "tf.initializers.he_normal",
    "signature": "(seed=None)",
    "description": "He normal initializer."
  },
  "3179": {
    "name": "he_uniform",
    "module": "tf.initializers",
    "fullName": "tf.initializers.he_uniform",
    "signature": "(seed=None)",
    "description": "He uniform variance scaling initializer."
  },
  "3180": {
    "name": "identity",
    "module": "tf.initializers",
    "fullName": "tf.initializers.identity",
    "signature": "(gain=1.0)",
    "description": "Initializer that generates the identity matrix."
  },
  "3181": {
    "name": "lecun_normal",
    "module": "tf.initializers",
    "fullName": "tf.initializers.lecun_normal",
    "signature": "(seed=None)",
    "description": "Lecun normal initializer."
  },
  "3182": {
    "name": "lecun_uniform",
    "module": "tf.initializers",
    "fullName": "tf.initializers.lecun_uniform",
    "signature": "(seed=None)",
    "description": "Lecun uniform initializer."
  },
  "3183": {
    "name": "ones",
    "module": "tf.initializers",
    "fullName": "tf.initializers.ones",
    "signature": "()",
    "description": "Initializer that generates tensors initialized to 1."
  },
  "3184": {
    "name": "orthogonal",
    "module": "tf.initializers",
    "fullName": "tf.initializers.orthogonal",
    "signature": "(gain=1.0, seed=None)",
    "description": "Initializer that generates an orthogonal matrix."
  },
  "3185": {
    "name": "random_normal",
    "module": "tf.initializers",
    "fullName": "tf.initializers.random_normal",
    "signature": "(mean=0.0, stddev=0.05, seed=None)",
    "description": "Initializer that generates tensors with a normal distribution."
  },
  "3186": {
    "name": "random_uniform",
    "module": "tf.initializers",
    "fullName": "tf.initializers.random_uniform",
    "signature": "(minval=-0.05, maxval=0.05, seed=None)",
    "description": "Initializer that generates tensors with a uniform distribution."
  },
  "3187": {
    "name": "serialize",
    "module": "tf.initializers",
    "fullName": "tf.initializers.serialize",
    "signature": "(initializer)",
    "description": "No description available."
  },
  "3188": {
    "name": "truncated_normal",
    "module": "tf.initializers",
    "fullName": "tf.initializers.truncated_normal",
    "signature": "(mean=0.0, stddev=0.05, seed=None)",
    "description": "Initializer that generates a truncated normal distribution."
  },
  "3189": {
    "name": "variance_scaling",
    "module": "tf.initializers",
    "fullName": "tf.initializers.variance_scaling",
    "signature": "(scale=1.0, mode='fan_in', distribution='truncated_normal', seed=None)",
    "description": "Initializer capable of adapting its scale to the shape of weights tensors."
  },
  "3190": {
    "name": "zeros",
    "module": "tf.initializers",
    "fullName": "tf.initializers.zeros",
    "signature": "()",
    "description": "Initializer that generates tensors initialized to 0."
  },
  "3191": {
    "name": "ResizeMethod",
    "module": "tf.image",
    "fullName": "tf.image.ResizeMethod",
    "signature": "()",
    "description": "See `tf.image.resize` for details."
  },
  "3192": {
    "name": "adjust_brightness",
    "module": "tf.image",
    "fullName": "tf.image.adjust_brightness",
    "signature": "(image, delta)",
    "description": "Adjust the brightness of RGB or Grayscale images."
  },
  "3193": {
    "name": "adjust_contrast",
    "module": "tf.image",
    "fullName": "tf.image.adjust_contrast",
    "signature": "(images, contrast_factor)",
    "description": "Adjust contrast of RGB or grayscale images."
  },
  "3194": {
    "name": "adjust_gamma",
    "module": "tf.image",
    "fullName": "tf.image.adjust_gamma",
    "signature": "(image, gamma=1, gain=1)",
    "description": "Performs [Gamma Correction](http://en.wikipedia.org/wiki/Gamma_correction)."
  },
  "3195": {
    "name": "adjust_hue",
    "module": "tf.image",
    "fullName": "tf.image.adjust_hue",
    "signature": "(image, delta, name=None)",
    "description": "Adjust hue of RGB images."
  },
  "3196": {
    "name": "adjust_jpeg_quality",
    "module": "tf.image",
    "fullName": "tf.image.adjust_jpeg_quality",
    "signature": "(image, jpeg_quality, name=None)",
    "description": "Adjust jpeg encoding quality of an image."
  },
  "3197": {
    "name": "adjust_saturation",
    "module": "tf.image",
    "fullName": "tf.image.adjust_saturation",
    "signature": "(image, saturation_factor, name=None)",
    "description": "Adjust saturation of RGB images."
  },
  "3198": {
    "name": "central_crop",
    "module": "tf.image",
    "fullName": "tf.image.central_crop",
    "signature": "(image, central_fraction)",
    "description": "Crop the central region of the image(s)."
  },
  "3199": {
    "name": "combined_non_max_suppression",
    "module": "tf.image",
    "fullName": "tf.image.combined_non_max_suppression",
    "signature": "(boxes, scores, max_output_size_per_class, max_total_size, iou_threshold=0.5, score_threshold=-inf, pad_per_class=False, clip_boxes=True, name=None)",
    "description": "Greedily selects a subset of bounding boxes in descending order of score."
  },
  "3200": {
    "name": "convert_image_dtype",
    "module": "tf.image",
    "fullName": "tf.image.convert_image_dtype",
    "signature": "(image, dtype, saturate=False, name=None)",
    "description": "Convert `image` to `dtype`, scaling its values if needed."
  },
  "3201": {
    "name": "crop_and_resize",
    "module": "tf.image",
    "fullName": "tf.image.crop_and_resize",
    "signature": "(image, boxes, box_indices, crop_size, method='bilinear', extrapolation_value=0.0, name=None)",
    "description": "Extracts crops from the input image tensor and resizes them."
  },
  "3202": {
    "name": "crop_to_bounding_box",
    "module": "tf.image",
    "fullName": "tf.image.crop_to_bounding_box",
    "signature": "(image, offset_height, offset_width, target_height, target_width)",
    "description": "Crops an `image` to a specified bounding box."
  },
  "3203": {
    "name": "decode_and_crop_jpeg",
    "module": "tf.image",
    "fullName": "tf.image.decode_and_crop_jpeg",
    "signature": "(contents, crop_window, channels=0, ratio=1, fancy_upscaling=True, try_recover_truncated=False, acceptable_fraction=1, dct_method='', name=None)",
    "description": "Decode and Crop a JPEG-encoded image to a uint8 tensor."
  },
  "3204": {
    "name": "decode_bmp",
    "module": "tf.image",
    "fullName": "tf.image.decode_bmp",
    "signature": "(contents, channels=0, name=None)",
    "description": "Decode the first frame of a BMP-encoded image to a uint8 tensor."
  },
  "3205": {
    "name": "decode_gif",
    "module": "tf.image",
    "fullName": "tf.image.decode_gif",
    "signature": "(contents, name=None)",
    "description": "Decode the frame(s) of a GIF-encoded image to a uint8 tensor."
  },
  "3206": {
    "name": "decode_image",
    "module": "tf.image",
    "fullName": "tf.image.decode_image",
    "signature": "(contents, channels=None, dtype=tf.uint8, name=None, expand_animations=True)",
    "description": "Function for `decode_bmp`, `decode_gif`, `decode_jpeg`, and `decode_png`."
  },
  "3207": {
    "name": "decode_jpeg",
    "module": "tf.image",
    "fullName": "tf.image.decode_jpeg",
    "signature": "(contents, channels=0, ratio=1, fancy_upscaling=True, try_recover_truncated=False, acceptable_fraction=1, dct_method='', name=None)",
    "description": "Decode a JPEG-encoded image to a uint8 tensor."
  },
  "3208": {
    "name": "decode_png",
    "module": "tf.image",
    "fullName": "tf.image.decode_png",
    "signature": "(contents, channels=0, dtype=tf.uint8, name=None)",
    "description": "Decode a PNG-encoded image to a uint8 or uint16 tensor."
  },
  "3209": {
    "name": "draw_bounding_boxes",
    "module": "tf.image",
    "fullName": "tf.image.draw_bounding_boxes",
    "signature": "(images, boxes, colors, name=None)",
    "description": "Draw bounding boxes on a batch of images."
  },
  "3210": {
    "name": "encode_jpeg",
    "module": "tf.image",
    "fullName": "tf.image.encode_jpeg",
    "signature": "(image, format='', quality=95, progressive=False, optimize_size=False, chroma_downsampling=True, density_unit='in', x_density=300, y_density=300, xmp_metadata='', name=None)",
    "description": "JPEG-encode an image."
  },
  "3211": {
    "name": "encode_png",
    "module": "tf.image",
    "fullName": "tf.image.encode_png",
    "signature": "(image, compression=-1, name=None)",
    "description": "PNG-encode an image."
  },
  "3212": {
    "name": "extract_glimpse",
    "module": "tf.image",
    "fullName": "tf.image.extract_glimpse",
    "signature": "(input, size, offsets, centered=True, normalized=True, noise='uniform', name=None)",
    "description": "Extracts a glimpse from the input tensor."
  },
  "3213": {
    "name": "extract_jpeg_shape",
    "module": "tf.image",
    "fullName": "tf.image.extract_jpeg_shape",
    "signature": "(contents, output_type=tf.int32, name=None)",
    "description": "Extract the shape information of a JPEG-encoded image."
  },
  "3214": {
    "name": "extract_patches",
    "module": "tf.image",
    "fullName": "tf.image.extract_patches",
    "signature": "(images, sizes, strides, rates, padding, name=None)",
    "description": "Extract `patches` from `images`."
  },
  "3215": {
    "name": "flip_left_right",
    "module": "tf.image",
    "fullName": "tf.image.flip_left_right",
    "signature": "(image)",
    "description": "Flip an image horizontally (left to right)."
  },
  "3216": {
    "name": "flip_up_down",
    "module": "tf.image",
    "fullName": "tf.image.flip_up_down",
    "signature": "(image)",
    "description": "Flip an image vertically (upside down)."
  },
  "3217": {
    "name": "generate_bounding_box_proposals",
    "module": "tf.image",
    "fullName": "tf.image.generate_bounding_box_proposals",
    "signature": "(scores, bbox_deltas, image_info, anchors, nms_threshold=0.7, pre_nms_topn=6000, min_size=16, post_nms_topn=300, name=None)",
    "description": "Generate bounding box proposals from encoded bounding boxes."
  },
  "3218": {
    "name": "grayscale_to_rgb",
    "module": "tf.image",
    "fullName": "tf.image.grayscale_to_rgb",
    "signature": "(images, name=None)",
    "description": "Converts one or more images from Grayscale to RGB."
  },
  "3219": {
    "name": "hsv_to_rgb",
    "module": "tf.image",
    "fullName": "tf.image.hsv_to_rgb",
    "signature": "(images, name=None)",
    "description": "Convert one or more images from HSV to RGB."
  },
  "3220": {
    "name": "image_gradients",
    "module": "tf.image",
    "fullName": "tf.image.image_gradients",
    "signature": "(image)",
    "description": "Returns image gradients (dy, dx) for each color channel."
  },
  "3221": {
    "name": "is_jpeg",
    "module": "tf.image",
    "fullName": "tf.image.is_jpeg",
    "signature": "(contents, name=None)",
    "description": "Convenience function to check if the 'contents' encodes a JPEG image."
  },
  "3222": {
    "name": "non_max_suppression",
    "module": "tf.image",
    "fullName": "tf.image.non_max_suppression",
    "signature": "(boxes, scores, max_output_size, iou_threshold=0.5, score_threshold=-inf, name=None)",
    "description": "Greedily selects a subset of bounding boxes in descending order of score."
  },
  "3223": {
    "name": "non_max_suppression_overlaps",
    "module": "tf.image",
    "fullName": "tf.image.non_max_suppression_overlaps",
    "signature": "(overlaps, scores, max_output_size, overlap_threshold=0.5, score_threshold=-inf, name=None)",
    "description": "Greedily selects a subset of bounding boxes in descending order of score."
  },
  "3224": {
    "name": "non_max_suppression_padded",
    "module": "tf.image",
    "fullName": "tf.image.non_max_suppression_padded",
    "signature": "(boxes, scores, max_output_size, iou_threshold=0.5, score_threshold=-inf, pad_to_max_output_size=False, name=None, sorted_input=False, canonicalized_coordinates=False, tile_size=512)",
    "description": "Greedily selects a subset of bounding boxes in descending order of score."
  },
  "3225": {
    "name": "non_max_suppression_with_scores",
    "module": "tf.image",
    "fullName": "tf.image.non_max_suppression_with_scores",
    "signature": "(boxes, scores, max_output_size, iou_threshold=0.5, score_threshold=-inf, soft_nms_sigma=0.0, name=None)",
    "description": "Greedily selects a subset of bounding boxes in descending order of score."
  },
  "3226": {
    "name": "pad_to_bounding_box",
    "module": "tf.image",
    "fullName": "tf.image.pad_to_bounding_box",
    "signature": "(image, offset_height, offset_width, target_height, target_width)",
    "description": "Pad `image` with zeros to the specified `height` and `width`."
  },
  "3227": {
    "name": "per_image_standardization",
    "module": "tf.image",
    "fullName": "tf.image.per_image_standardization",
    "signature": "(image)",
    "description": "Linearly scales each image in `image` to have mean 0 and variance 1."
  },
  "3228": {
    "name": "psnr",
    "module": "tf.image",
    "fullName": "tf.image.psnr",
    "signature": "(a, b, max_val, name=None)",
    "description": "Returns the Peak Signal-to-Noise Ratio between a and b."
  },
  "3229": {
    "name": "random_brightness",
    "module": "tf.image",
    "fullName": "tf.image.random_brightness",
    "signature": "(image, max_delta, seed=None)",
    "description": "Adjust the brightness of images by a random factor."
  },
  "3230": {
    "name": "random_contrast",
    "module": "tf.image",
    "fullName": "tf.image.random_contrast",
    "signature": "(image, lower, upper, seed=None)",
    "description": "Adjust the contrast of an image or images by a random factor."
  },
  "3231": {
    "name": "random_crop",
    "module": "tf.image",
    "fullName": "tf.image.random_crop",
    "signature": "(value, size, seed=None, name=None)",
    "description": "Randomly crops a tensor to a given size."
  },
  "3232": {
    "name": "random_flip_left_right",
    "module": "tf.image",
    "fullName": "tf.image.random_flip_left_right",
    "signature": "(image, seed=None)",
    "description": "Randomly flip an image horizontally (left to right)."
  },
  "3233": {
    "name": "random_flip_up_down",
    "module": "tf.image",
    "fullName": "tf.image.random_flip_up_down",
    "signature": "(image, seed=None)",
    "description": "Randomly flips an image vertically (upside down)."
  },
  "3234": {
    "name": "random_hue",
    "module": "tf.image",
    "fullName": "tf.image.random_hue",
    "signature": "(image, max_delta, seed=None)",
    "description": "Adjust the hue of RGB images by a random factor."
  },
  "3235": {
    "name": "random_jpeg_quality",
    "module": "tf.image",
    "fullName": "tf.image.random_jpeg_quality",
    "signature": "(image, min_jpeg_quality, max_jpeg_quality, seed=None)",
    "description": "Randomly changes jpeg encoding quality for inducing jpeg noise."
  },
  "3236": {
    "name": "random_saturation",
    "module": "tf.image",
    "fullName": "tf.image.random_saturation",
    "signature": "(image, lower, upper, seed=None)",
    "description": "Adjust the saturation of RGB images by a random factor."
  },
  "3237": {
    "name": "resize",
    "module": "tf.image",
    "fullName": "tf.image.resize",
    "signature": "(images, size, method='bilinear', preserve_aspect_ratio=False, antialias=False, name=None)",
    "description": "Resize `images` to `size` using the specified `method`."
  },
  "3238": {
    "name": "resize_with_crop_or_pad",
    "module": "tf.image",
    "fullName": "tf.image.resize_with_crop_or_pad",
    "signature": "(image, target_height, target_width)",
    "description": "Crops and/or pads an image to a target width and height."
  },
  "3239": {
    "name": "resize_with_pad",
    "module": "tf.image",
    "fullName": "tf.image.resize_with_pad",
    "signature": "(image, target_height, target_width, method='bilinear', antialias=False)",
    "description": "Resizes and pads an image to a target width and height."
  },
  "3240": {
    "name": "rgb_to_grayscale",
    "module": "tf.image",
    "fullName": "tf.image.rgb_to_grayscale",
    "signature": "(images, name=None)",
    "description": "Converts one or more images from RGB to Grayscale."
  },
  "3241": {
    "name": "rgb_to_hsv",
    "module": "tf.image",
    "fullName": "tf.image.rgb_to_hsv",
    "signature": "(images, name=None)",
    "description": "Converts one or more images from RGB to HSV."
  },
  "3242": {
    "name": "rgb_to_yiq",
    "module": "tf.image",
    "fullName": "tf.image.rgb_to_yiq",
    "signature": "(images)",
    "description": "Converts one or more images from RGB to YIQ."
  },
  "3243": {
    "name": "rgb_to_yuv",
    "module": "tf.image",
    "fullName": "tf.image.rgb_to_yuv",
    "signature": "(images)",
    "description": "Converts one or more images from RGB to YUV."
  },
  "3244": {
    "name": "rot90",
    "module": "tf.image",
    "fullName": "tf.image.rot90",
    "signature": "(image, k=1, name=None)",
    "description": "Rotate image(s) counter-clockwise by 90 degrees."
  },
  "3245": {
    "name": "sample_distorted_bounding_box",
    "module": "tf.image",
    "fullName": "tf.image.sample_distorted_bounding_box",
    "signature": "(image_size, bounding_boxes, seed=0, min_object_covered=0.1, aspect_ratio_range=None, area_range=None, max_attempts=None, use_image_if_no_bounding_boxes=None, name=None)",
    "description": "Generate a single randomly distorted bounding box for an image."
  },
  "3246": {
    "name": "sobel_edges",
    "module": "tf.image",
    "fullName": "tf.image.sobel_edges",
    "signature": "(image)",
    "description": "Returns a tensor holding Sobel edge maps."
  },
  "3247": {
    "name": "ssim",
    "module": "tf.image",
    "fullName": "tf.image.ssim",
    "signature": "(img1, img2, max_val, filter_size=11, filter_sigma=1.5, k1=0.01, k2=0.03)",
    "description": "Computes SSIM index between img1 and img2."
  },
  "3248": {
    "name": "ssim_multiscale",
    "module": "tf.image",
    "fullName": "tf.image.ssim_multiscale",
    "signature": "(img1, img2, max_val, power_factors=(0.0448, 0.2856, 0.3001, 0.2363, 0.1333), filter_size=11, filter_sigma=1.5, k1=0.01, k2=0.03)",
    "description": "Computes the MS-SSIM between img1 and img2."
  },
  "3249": {
    "name": "stateless_random_brightness",
    "module": "tf.image",
    "fullName": "tf.image.stateless_random_brightness",
    "signature": "(image, max_delta, seed)",
    "description": "Adjust the brightness of images by a random factor deterministically."
  },
  "3250": {
    "name": "stateless_random_contrast",
    "module": "tf.image",
    "fullName": "tf.image.stateless_random_contrast",
    "signature": "(image, lower, upper, seed)",
    "description": "Adjust the contrast of images by a random factor deterministically."
  },
  "3251": {
    "name": "stateless_random_crop",
    "module": "tf.image",
    "fullName": "tf.image.stateless_random_crop",
    "signature": "(value, size, seed, name=None)",
    "description": "Randomly crops a tensor to a given size in a deterministic manner."
  },
  "3252": {
    "name": "stateless_random_flip_left_right",
    "module": "tf.image",
    "fullName": "tf.image.stateless_random_flip_left_right",
    "signature": "(image, seed)",
    "description": "Randomly flip an image horizontally (left to right) deterministically."
  },
  "3253": {
    "name": "stateless_random_flip_up_down",
    "module": "tf.image",
    "fullName": "tf.image.stateless_random_flip_up_down",
    "signature": "(image, seed)",
    "description": "Randomly flip an image vertically (upside down) deterministically."
  },
  "3254": {
    "name": "stateless_random_hue",
    "module": "tf.image",
    "fullName": "tf.image.stateless_random_hue",
    "signature": "(image, max_delta, seed)",
    "description": "Adjust the hue of RGB images by a random factor deterministically."
  },
  "3255": {
    "name": "stateless_random_jpeg_quality",
    "module": "tf.image",
    "fullName": "tf.image.stateless_random_jpeg_quality",
    "signature": "(image, min_jpeg_quality, max_jpeg_quality, seed)",
    "description": "Deterministically radomize jpeg encoding quality for inducing jpeg noise."
  },
  "3256": {
    "name": "stateless_random_saturation",
    "module": "tf.image",
    "fullName": "tf.image.stateless_random_saturation",
    "signature": "(image, lower, upper, seed=None)",
    "description": "Adjust the saturation of RGB images by a random factor deterministically."
  },
  "3257": {
    "name": "stateless_sample_distorted_bounding_box",
    "module": "tf.image",
    "fullName": "tf.image.stateless_sample_distorted_bounding_box",
    "signature": "(image_size, bounding_boxes, seed, min_object_covered=0.1, aspect_ratio_range=None, area_range=None, max_attempts=None, use_image_if_no_bounding_boxes=None, name=None)",
    "description": "Generate a randomly distorted bounding box for an image deterministically."
  },
  "3258": {
    "name": "total_variation",
    "module": "tf.image",
    "fullName": "tf.image.total_variation",
    "signature": "(images, name=None)",
    "description": "Calculate and return the total variation for one or more images."
  },
  "3259": {
    "name": "transpose",
    "module": "tf.image",
    "fullName": "tf.image.transpose",
    "signature": "(image, name=None)",
    "description": "Transpose image(s) by swapping the height and width dimension."
  },
  "3260": {
    "name": "yiq_to_rgb",
    "module": "tf.image",
    "fullName": "tf.image.yiq_to_rgb",
    "signature": "(images)",
    "description": "Converts one or more images from YIQ to RGB."
  },
  "3261": {
    "name": "yuv_to_rgb",
    "module": "tf.image",
    "fullName": "tf.image.yuv_to_rgb",
    "signature": "(images)",
    "description": "Converts one or more images from YUV to RGB."
  },
  "3262": {
    "name": "bucketized_column",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.bucketized_column",
    "signature": "(source_column, boundaries)",
    "description": "Represents discretized dense input bucketed by `boundaries`."
  },
  "3263": {
    "name": "categorical_column_with_hash_bucket",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.categorical_column_with_hash_bucket",
    "signature": "(key, hash_bucket_size, dtype=tf.string)",
    "description": "Represents sparse feature where ids are set by hashing."
  },
  "3264": {
    "name": "categorical_column_with_identity",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.categorical_column_with_identity",
    "signature": "(key, num_buckets, default_value=None)",
    "description": "A `CategoricalColumn` that returns identity values."
  },
  "3265": {
    "name": "categorical_column_with_vocabulary_file",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.categorical_column_with_vocabulary_file",
    "signature": "(key, vocabulary_file, vocabulary_size=None, dtype=tf.string, default_value=None, num_oov_buckets=0, file_format=None)",
    "description": "A `CategoricalColumn` with a vocabulary file."
  },
  "3266": {
    "name": "categorical_column_with_vocabulary_list",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.categorical_column_with_vocabulary_list",
    "signature": "(key, vocabulary_list, dtype=None, default_value=-1, num_oov_buckets=0)",
    "description": "A `CategoricalColumn` with in-memory vocabulary."
  },
  "3267": {
    "name": "crossed_column",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.crossed_column",
    "signature": "(keys, hash_bucket_size, hash_key=None)",
    "description": "Returns a column for performing crosses of categorical features."
  },
  "3268": {
    "name": "embedding_column",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.embedding_column",
    "signature": "(categorical_column, dimension, combiner='mean', initializer=None, ckpt_to_load_from=None, tensor_name_in_ckpt=None, max_norm=None, trainable=True, use_safe_embedding_lookup=True)",
    "description": "`DenseColumn` that converts from sparse, categorical input."
  },
  "3269": {
    "name": "indicator_column",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.indicator_column",
    "signature": "(categorical_column)",
    "description": "Represents multi-hot representation of given categorical column."
  },
  "3270": {
    "name": "make_parse_example_spec",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.make_parse_example_spec",
    "signature": "(feature_columns)",
    "description": "Creates parsing spec dictionary from input feature_columns."
  },
  "3271": {
    "name": "numeric_column",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.numeric_column",
    "signature": "(key, shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None)",
    "description": "Represents real valued or numerical features."
  },
  "3272": {
    "name": "sequence_categorical_column_with_hash_bucket",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.sequence_categorical_column_with_hash_bucket",
    "signature": "(key, hash_bucket_size, dtype=tf.string)",
    "description": "A sequence of categorical terms where ids are set by hashing."
  },
  "3273": {
    "name": "sequence_categorical_column_with_identity",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.sequence_categorical_column_with_identity",
    "signature": "(key, num_buckets, default_value=None)",
    "description": "Returns a feature column that represents sequences of integers."
  },
  "3274": {
    "name": "sequence_categorical_column_with_vocabulary_file",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.sequence_categorical_column_with_vocabulary_file",
    "signature": "(key, vocabulary_file, vocabulary_size=None, num_oov_buckets=0, default_value=None, dtype=tf.string)",
    "description": "A sequence of categorical terms where ids use a vocabulary file."
  },
  "3275": {
    "name": "sequence_categorical_column_with_vocabulary_list",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.sequence_categorical_column_with_vocabulary_list",
    "signature": "(key, vocabulary_list, dtype=None, default_value=-1, num_oov_buckets=0)",
    "description": "A sequence of categorical terms where ids use an in-memory list."
  },
  "3276": {
    "name": "sequence_numeric_column",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.sequence_numeric_column",
    "signature": "(key, shape=(1,), default_value=0.0, dtype=tf.float32, normalizer_fn=None)",
    "description": "Returns a feature column that represents sequences of numeric data."
  },
  "3277": {
    "name": "shared_embeddings",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.shared_embeddings",
    "signature": "(categorical_columns, dimension, combiner='mean', initializer=None, shared_embedding_collection_name=None, ckpt_to_load_from=None, tensor_name_in_ckpt=None, max_norm=None, trainable=True, use_safe_embedding_lookup=True)",
    "description": "List of dense columns that convert from sparse, categorical input."
  },
  "3278": {
    "name": "weighted_categorical_column",
    "module": "tf.feature_column",
    "fullName": "tf.feature_column.weighted_categorical_column",
    "signature": "(categorical_column, weight_feature_key, dtype=tf.float32)",
    "description": "Applies weight values to a `CategoricalColumn`."
  },
  "3279": {
    "name": "BatchableExtensionType",
    "module": "tf.experimental",
    "fullName": "tf.experimental.BatchableExtensionType",
    "signature": "(*args, **kwargs)",
    "description": "An ExtensionType that can be batched and unbatched."
  },
  "3280": {
    "name": "DynamicRaggedShape",
    "module": "tf.experimental",
    "fullName": "tf.experimental.DynamicRaggedShape",
    "signature": "(row_partitions: Sequence[tensorflow.python.ops.ragged.row_partition.RowPartition], inner_shape: Union[tensorflow.python.types.core.Tensor, tensorflow.python.types.core.TensorProtocol, int, float, bool, str, bytes, complex, tuple, list, numpy.ndarray, numpy.generic], dtype: Optional[tensorflow.python.framework.dtypes.DType] = None, validate: bool = False, static_inner_shape: Ellipsis = None)",
    "description": "The shape of a ragged or dense tensor."
  },
  "3281": {
    "name": "ExtensionType",
    "module": "tf.experimental",
    "fullName": "tf.experimental.ExtensionType",
    "signature": "(*args, **kwargs)",
    "description": "Base class for TensorFlow `ExtensionType` classes."
  },
  "3282": {
    "name": "ExtensionTypeBatchEncoder",
    "module": "tf.experimental",
    "fullName": "tf.experimental.ExtensionTypeBatchEncoder",
    "signature": "()",
    "description": "Class used to encode and decode extension type values for batching."
  },
  "3283": {
    "name": "Optional",
    "module": "tf.experimental",
    "fullName": "tf.experimental.Optional",
    "signature": "()",
    "description": "Represents a value that may or may not be present."
  },
  "3284": {
    "name": "RowPartition",
    "module": "tf.experimental",
    "fullName": "tf.experimental.RowPartition",
    "signature": "(row_splits, row_lengths=None, value_rowids=None, nrows=None, uniform_row_length=None, nvals=None, internal=False)",
    "description": "Partitioning of a sequence of values into contiguous subsequences (\"rows\")."
  },
  "3285": {
    "name": "async_clear_error",
    "module": "tf.experimental",
    "fullName": "tf.experimental.async_clear_error",
    "signature": "()",
    "description": "Clear pending operations and error statuses in async execution."
  },
  "3286": {
    "name": "async_scope",
    "module": "tf.experimental",
    "fullName": "tf.experimental.async_scope",
    "signature": "()",
    "description": "Context manager for grouping async operations."
  },
  "3287": {
    "name": "dispatch_for_api",
    "module": "tf.experimental",
    "fullName": "tf.experimental.dispatch_for_api",
    "signature": "(api, *signatures)",
    "description": "Decorator that overrides the default implementation for a TensorFlow API."
  },
  "3288": {
    "name": "dispatch_for_binary_elementwise_apis",
    "module": "tf.experimental",
    "fullName": "tf.experimental.dispatch_for_binary_elementwise_apis",
    "signature": "(x_type, y_type)",
    "description": "Decorator to override default implementation for binary elementwise APIs."
  },
  "3289": {
    "name": "dispatch_for_binary_elementwise_assert_apis",
    "module": "tf.experimental",
    "fullName": "tf.experimental.dispatch_for_binary_elementwise_assert_apis",
    "signature": "(x_type, y_type)",
    "description": "Decorator to override default implementation for binary elementwise assert APIs."
  },
  "3290": {
    "name": "dispatch_for_unary_elementwise_apis",
    "module": "tf.experimental",
    "fullName": "tf.experimental.dispatch_for_unary_elementwise_apis",
    "signature": "(x_type)",
    "description": "Decorator to override default implementation for unary elementwise APIs."
  },
  "3291": {
    "name": "function_executor_type",
    "module": "tf.experimental",
    "fullName": "tf.experimental.function_executor_type",
    "signature": "(executor_type)",
    "description": "Context manager for setting the executor of eager defined functions."
  },
  "3292": {
    "name": "register_filesystem_plugin",
    "module": "tf.experimental",
    "fullName": "tf.experimental.register_filesystem_plugin",
    "signature": "(plugin_location)",
    "description": "Loads a TensorFlow FileSystem plugin."
  },
  "3293": {
    "name": "unregister_dispatch_for",
    "module": "tf.experimental",
    "fullName": "tf.experimental.unregister_dispatch_for",
    "signature": "(dispatch_target)",
    "description": "Unregisters a function that was registered with `@dispatch_for_*`."
  },
  "3294": {
    "name": "ConversionParams",
    "module": "tf.experimental.tensorrt",
    "fullName": "tf.experimental.tensorrt.ConversionParams",
    "signature": "(max_workspace_size_bytes=1073741824, precision_mode='FP32', minimum_segment_size=3, maximum_cached_engines=1, use_calibration=True, allow_build_at_runtime=True)",
    "description": "Parameters that are used for TF-TRT conversion."
  },
  "3295": {
    "name": "Converter",
    "module": "tf.experimental.tensorrt",
    "fullName": "tf.experimental.tensorrt.Converter",
    "signature": "(input_saved_model_dir=None, input_saved_model_tags=None, input_saved_model_signature_key=None, use_dynamic_shape=None, dynamic_shape_profile_strategy=None, max_workspace_size_bytes=1073741824, precision_mode='FP32', minimum_segment_size=3, maximum_cached_engines=1, use_calibration=True, allow_build_at_runtime=True, conversion_params=None)",
    "description": "An offline converter for TF-TRT transformation for TF 2.0 SavedModels."
  },
  "3296": {
    "name": "abs",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.abs",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `abs`."
  },
  "3297": {
    "name": "absolute",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.absolute",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `absolute`."
  },
  "3298": {
    "name": "add",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.add",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `add`."
  },
  "3299": {
    "name": "all",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.all",
    "signature": "(a, axis=None, keepdims=None)",
    "description": "TensorFlow variant of NumPy's `all`."
  },
  "3300": {
    "name": "allclose",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.allclose",
    "signature": "(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)",
    "description": "TensorFlow variant of NumPy's `allclose`."
  },
  "3301": {
    "name": "amax",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.amax",
    "signature": "(a, axis=None, out=None, keepdims=None)",
    "description": "TensorFlow variant of NumPy's `amax`."
  },
  "3302": {
    "name": "amin",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.amin",
    "signature": "(a, axis=None, out=None, keepdims=None)",
    "description": "TensorFlow variant of NumPy's `amin`."
  },
  "3303": {
    "name": "angle",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.angle",
    "signature": "(z, deg=False)",
    "description": "TensorFlow variant of NumPy's `angle`."
  },
  "3304": {
    "name": "any",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.any",
    "signature": "(a, axis=None, keepdims=None)",
    "description": "TensorFlow variant of NumPy's `any`."
  },
  "3305": {
    "name": "append",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.append",
    "signature": "(arr, values, axis=None)",
    "description": "TensorFlow variant of NumPy's `append`."
  },
  "3306": {
    "name": "arange",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.arange",
    "signature": "(start, stop=None, step=1, dtype=None)",
    "description": "TensorFlow variant of NumPy's `arange`."
  },
  "3307": {
    "name": "arccos",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.arccos",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `arccos`."
  },
  "3308": {
    "name": "arccosh",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.arccosh",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `arccosh`."
  },
  "3309": {
    "name": "arcsin",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.arcsin",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `arcsin`."
  },
  "3310": {
    "name": "arcsinh",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.arcsinh",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `arcsinh`."
  },
  "3311": {
    "name": "arctan",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.arctan",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `arctan`."
  },
  "3312": {
    "name": "arctan2",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.arctan2",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `arctan2`."
  },
  "3313": {
    "name": "arctanh",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.arctanh",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `arctanh`."
  },
  "3314": {
    "name": "argmax",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.argmax",
    "signature": "(a, axis=None)",
    "description": "TensorFlow variant of NumPy's `argmax`."
  },
  "3315": {
    "name": "argmin",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.argmin",
    "signature": "(a, axis=None)",
    "description": "TensorFlow variant of NumPy's `argmin`."
  },
  "3316": {
    "name": "argsort",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.argsort",
    "signature": "(a, axis=-1, kind='quicksort', order=None)",
    "description": "TensorFlow variant of NumPy's `argsort`."
  },
  "3317": {
    "name": "around",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.around",
    "signature": "(a, decimals=0)",
    "description": "TensorFlow variant of NumPy's `around`."
  },
  "3318": {
    "name": "array",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.array",
    "signature": "(val, dtype=None, copy=True, ndmin=0)",
    "description": "TensorFlow variant of NumPy's `array`."
  },
  "3319": {
    "name": "array_equal",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.array_equal",
    "signature": "(a1, a2)",
    "description": "TensorFlow variant of NumPy's `array_equal`."
  },
  "3320": {
    "name": "asanyarray",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.asanyarray",
    "signature": "(a, dtype=None)",
    "description": "TensorFlow variant of NumPy's `asanyarray`."
  },
  "3321": {
    "name": "asarray",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.asarray",
    "signature": "(a, dtype=None)",
    "description": "TensorFlow variant of NumPy's `asarray`."
  },
  "3322": {
    "name": "ascontiguousarray",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.ascontiguousarray",
    "signature": "(a, dtype=None)",
    "description": "TensorFlow variant of NumPy's `ascontiguousarray`."
  },
  "3323": {
    "name": "atleast_1d",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.atleast_1d",
    "signature": "(*arys)",
    "description": "TensorFlow variant of NumPy's `atleast_1d`."
  },
  "3324": {
    "name": "atleast_2d",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.atleast_2d",
    "signature": "(*arys)",
    "description": "TensorFlow variant of NumPy's `atleast_2d`."
  },
  "3325": {
    "name": "atleast_3d",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.atleast_3d",
    "signature": "(*arys)",
    "description": "TensorFlow variant of NumPy's `atleast_3d`."
  },
  "3326": {
    "name": "average",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.average",
    "signature": "(a, axis=None, weights=None, returned=False)",
    "description": "TensorFlow variant of NumPy's `average`."
  },
  "3327": {
    "name": "bitwise_and",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.bitwise_and",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `bitwise_and`."
  },
  "3328": {
    "name": "bitwise_not",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.bitwise_not",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `bitwise_not`."
  },
  "3329": {
    "name": "bitwise_or",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.bitwise_or",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `bitwise_or`."
  },
  "3330": {
    "name": "bitwise_xor",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.bitwise_xor",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `bitwise_xor`."
  },
  "3331": {
    "name": "bool_",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.bool_",
    "signature": "N/A",
    "description": "Boolean type (True or False), stored as a byte."
  },
  "3332": {
    "name": "broadcast_arrays",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.broadcast_arrays",
    "signature": "(*args, **kwargs)",
    "description": "TensorFlow variant of NumPy's `broadcast_arrays`."
  },
  "3333": {
    "name": "broadcast_to",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.broadcast_to",
    "signature": "(array, shape)",
    "description": "TensorFlow variant of NumPy's `broadcast_to`."
  },
  "3334": {
    "name": "cbrt",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.cbrt",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `cbrt`."
  },
  "3335": {
    "name": "ceil",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.ceil",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `ceil`."
  },
  "3336": {
    "name": "clip",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.clip",
    "signature": "(a, a_min, a_max)",
    "description": "TensorFlow variant of NumPy's `clip`."
  },
  "3337": {
    "name": "complex128",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.complex128",
    "signature": "(real=0, imag=0)",
    "description": "Complex number type composed of two double-precision floating-point"
  },
  "3338": {
    "name": "complex64",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.complex64",
    "signature": "N/A",
    "description": "Complex number type composed of two single-precision floating-point"
  },
  "3339": {
    "name": "complex_",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.complex_",
    "signature": "(real=0, imag=0)",
    "description": "Complex number type composed of two double-precision floating-point"
  },
  "3340": {
    "name": "compress",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.compress",
    "signature": "(condition, a, axis=None)",
    "description": "TensorFlow variant of NumPy's `compress`."
  },
  "3341": {
    "name": "concatenate",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.concatenate",
    "signature": "(arys, axis=0)",
    "description": "TensorFlow variant of NumPy's `concatenate`."
  },
  "3342": {
    "name": "conj",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.conj",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `conj`."
  },
  "3343": {
    "name": "conjugate",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.conjugate",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `conjugate`."
  },
  "3344": {
    "name": "copy",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.copy",
    "signature": "(a)",
    "description": "TensorFlow variant of NumPy's `copy`."
  },
  "3345": {
    "name": "cos",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.cos",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `cos`."
  },
  "3346": {
    "name": "cosh",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.cosh",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `cosh`."
  },
  "3347": {
    "name": "count_nonzero",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.count_nonzero",
    "signature": "(a, axis=None)",
    "description": "TensorFlow variant of NumPy's `count_nonzero`."
  },
  "3348": {
    "name": "cross",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.cross",
    "signature": "(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None)",
    "description": "TensorFlow variant of NumPy's `cross`."
  },
  "3349": {
    "name": "cumprod",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.cumprod",
    "signature": "(a, axis=None, dtype=None)",
    "description": "TensorFlow variant of NumPy's `cumprod`."
  },
  "3350": {
    "name": "cumsum",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.cumsum",
    "signature": "(a, axis=None, dtype=None)",
    "description": "TensorFlow variant of NumPy's `cumsum`."
  },
  "3351": {
    "name": "deg2rad",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.deg2rad",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `deg2rad`."
  },
  "3352": {
    "name": "diag",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.diag",
    "signature": "(v, k=0)",
    "description": "TensorFlow variant of NumPy's `diag`."
  },
  "3353": {
    "name": "diag_indices",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.diag_indices",
    "signature": "(n, ndim=2)",
    "description": "TensorFlow variant of NumPy's `diag_indices`."
  },
  "3354": {
    "name": "diagflat",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.diagflat",
    "signature": "(v, k=0)",
    "description": "TensorFlow variant of NumPy's `diagflat`."
  },
  "3355": {
    "name": "diagonal",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.diagonal",
    "signature": "(a, offset=0, axis1=0, axis2=1)",
    "description": "TensorFlow variant of NumPy's `diagonal`."
  },
  "3356": {
    "name": "diff",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.diff",
    "signature": "(a, n=1, axis=-1)",
    "description": "TensorFlow variant of NumPy's `diff`."
  },
  "3357": {
    "name": "divide",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.divide",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `divide`."
  },
  "3358": {
    "name": "divmod",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.divmod",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `divmod`."
  },
  "3359": {
    "name": "dot",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.dot",
    "signature": "(a, b)",
    "description": "TensorFlow variant of NumPy's `dot`."
  },
  "3360": {
    "name": "dsplit",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.dsplit",
    "signature": "(ary, indices_or_sections)",
    "description": "TensorFlow variant of NumPy's `dsplit`."
  },
  "3361": {
    "name": "dstack",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.dstack",
    "signature": "(tup)",
    "description": "TensorFlow variant of NumPy's `dstack`."
  },
  "3362": {
    "name": "einsum",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.einsum",
    "signature": "(subscripts, *operands, **kwargs)",
    "description": "TensorFlow variant of NumPy's `einsum`."
  },
  "3363": {
    "name": "empty",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.empty",
    "signature": "(shape, dtype=<class 'float'>)",
    "description": "TensorFlow variant of NumPy's `empty`."
  },
  "3364": {
    "name": "empty_like",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.empty_like",
    "signature": "(a, dtype=None)",
    "description": "TensorFlow variant of NumPy's `empty_like`."
  },
  "3365": {
    "name": "equal",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.equal",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `equal`."
  },
  "3366": {
    "name": "exp",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.exp",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `exp`."
  },
  "3367": {
    "name": "exp2",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.exp2",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `exp2`."
  },
  "3368": {
    "name": "expand_dims",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.expand_dims",
    "signature": "(a, axis)",
    "description": "TensorFlow variant of NumPy's `expand_dims`."
  },
  "3369": {
    "name": "experimental_enable_numpy_behavior",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.experimental_enable_numpy_behavior",
    "signature": "(prefer_float32=False)",
    "description": "Enable NumPy behavior on Tensors."
  },
  "3370": {
    "name": "expm1",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.expm1",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `expm1`."
  },
  "3371": {
    "name": "eye",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.eye",
    "signature": "(N, M=None, k=0, dtype=<class 'float'>)",
    "description": "TensorFlow variant of NumPy's `eye`."
  },
  "3372": {
    "name": "fabs",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.fabs",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `fabs`."
  },
  "3373": {
    "name": "finfo",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.finfo",
    "signature": "(dtype)",
    "description": "TensorFlow variant of NumPy's `finfo`."
  },
  "3374": {
    "name": "fix",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.fix",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `fix`."
  },
  "3375": {
    "name": "flip",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.flip",
    "signature": "(m, axis=None)",
    "description": "TensorFlow variant of NumPy's `flip`."
  },
  "3376": {
    "name": "fliplr",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.fliplr",
    "signature": "(m)",
    "description": "TensorFlow variant of NumPy's `fliplr`."
  },
  "3377": {
    "name": "flipud",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.flipud",
    "signature": "(m)",
    "description": "TensorFlow variant of NumPy's `flipud`."
  },
  "3378": {
    "name": "float16",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.float16",
    "signature": "N/A",
    "description": "Half-precision floating-point number type."
  },
  "3379": {
    "name": "float32",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.float32",
    "signature": "N/A",
    "description": "Single-precision floating-point number type, compatible with C ``float``."
  },
  "3380": {
    "name": "float64",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.float64",
    "signature": "(x=0, /)",
    "description": "Double-precision floating-point number type, compatible with Python `float`"
  },
  "3381": {
    "name": "float_",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.float_",
    "signature": "(x=0, /)",
    "description": "Double-precision floating-point number type, compatible with Python `float`"
  },
  "3382": {
    "name": "float_power",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.float_power",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `float_power`."
  },
  "3383": {
    "name": "floor",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.floor",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `floor`."
  },
  "3384": {
    "name": "floor_divide",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.floor_divide",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `floor_divide`."
  },
  "3385": {
    "name": "full",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.full",
    "signature": "(shape, fill_value, dtype=None)",
    "description": "TensorFlow variant of NumPy's `full`."
  },
  "3386": {
    "name": "full_like",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.full_like",
    "signature": "(a, fill_value, dtype=None, order='K', subok=True, shape=None)",
    "description": "TensorFlow variant of NumPy's `full_like`."
  },
  "3387": {
    "name": "gcd",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.gcd",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `gcd`."
  },
  "3388": {
    "name": "geomspace",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.geomspace",
    "signature": "(start, stop, num=50, endpoint=True, dtype=None, axis=0)",
    "description": "TensorFlow variant of NumPy's `geomspace`."
  },
  "3389": {
    "name": "greater",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.greater",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `greater`."
  },
  "3390": {
    "name": "greater_equal",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.greater_equal",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `greater_equal`."
  },
  "3391": {
    "name": "heaviside",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.heaviside",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `heaviside`."
  },
  "3392": {
    "name": "hsplit",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.hsplit",
    "signature": "(ary, indices_or_sections)",
    "description": "TensorFlow variant of NumPy's `hsplit`."
  },
  "3393": {
    "name": "hstack",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.hstack",
    "signature": "(tup)",
    "description": "TensorFlow variant of NumPy's `hstack`."
  },
  "3394": {
    "name": "hypot",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.hypot",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `hypot`."
  },
  "3395": {
    "name": "identity",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.identity",
    "signature": "(n, dtype=<class 'float'>)",
    "description": "TensorFlow variant of NumPy's `identity`."
  },
  "3396": {
    "name": "iinfo",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.iinfo",
    "signature": "(int_type)",
    "description": "iinfo(type)"
  },
  "3397": {
    "name": "imag",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.imag",
    "signature": "(val)",
    "description": "TensorFlow variant of NumPy's `imag`."
  },
  "3398": {
    "name": "inexact",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.inexact",
    "signature": "()",
    "description": "Abstract base class of all numeric scalar types with a (potentially)"
  },
  "3399": {
    "name": "inner",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.inner",
    "signature": "(a, b)",
    "description": "TensorFlow variant of NumPy's `inner`."
  },
  "3400": {
    "name": "int16",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.int16",
    "signature": "N/A",
    "description": "Signed integer type, compatible with C ``short``."
  },
  "3401": {
    "name": "int32",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.int32",
    "signature": "N/A",
    "description": "Signed integer type, compatible with C ``int``."
  },
  "3402": {
    "name": "int64",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.int64",
    "signature": "N/A",
    "description": "Signed integer type, compatible with Python `int` and C ``long``."
  },
  "3403": {
    "name": "int8",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.int8",
    "signature": "N/A",
    "description": "Signed integer type, compatible with C ``char``."
  },
  "3404": {
    "name": "int_",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.int_",
    "signature": "N/A",
    "description": "Signed integer type, compatible with Python `int` and C ``long``."
  },
  "3405": {
    "name": "isclose",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.isclose",
    "signature": "(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)",
    "description": "TensorFlow variant of NumPy's `isclose`."
  },
  "3406": {
    "name": "iscomplex",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.iscomplex",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `iscomplex`."
  },
  "3407": {
    "name": "iscomplexobj",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.iscomplexobj",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `iscomplexobj`."
  },
  "3408": {
    "name": "isfinite",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.isfinite",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `isfinite`."
  },
  "3409": {
    "name": "isinf",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.isinf",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `isinf`."
  },
  "3410": {
    "name": "isnan",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.isnan",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `isnan`."
  },
  "3411": {
    "name": "isneginf",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.isneginf",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `isneginf`."
  },
  "3412": {
    "name": "isposinf",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.isposinf",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `isposinf`."
  },
  "3413": {
    "name": "isreal",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.isreal",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `isreal`."
  },
  "3414": {
    "name": "isrealobj",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.isrealobj",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `isrealobj`."
  },
  "3415": {
    "name": "isscalar",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.isscalar",
    "signature": "(num)",
    "description": "TensorFlow variant of NumPy's `isscalar`."
  },
  "3416": {
    "name": "issubdtype",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.issubdtype",
    "signature": "(arg1, arg2)",
    "description": "Returns True if first argument is a typecode lower/equal in type hierarchy."
  },
  "3417": {
    "name": "ix_",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.ix_",
    "signature": "(*args)",
    "description": "TensorFlow variant of NumPy's `ix_`."
  },
  "3418": {
    "name": "kron",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.kron",
    "signature": "(a, b)",
    "description": "TensorFlow variant of NumPy's `kron`."
  },
  "3419": {
    "name": "lcm",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.lcm",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `lcm`."
  },
  "3420": {
    "name": "less",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.less",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `less`."
  },
  "3421": {
    "name": "less_equal",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.less_equal",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `less_equal`."
  },
  "3422": {
    "name": "linspace",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.linspace",
    "signature": "(start, stop, num=50, endpoint=True, retstep=False, dtype=<class 'float'>, axis=0)",
    "description": "TensorFlow variant of NumPy's `linspace`."
  },
  "3423": {
    "name": "log",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.log",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `log`."
  },
  "3424": {
    "name": "log10",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.log10",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `log10`."
  },
  "3425": {
    "name": "log1p",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.log1p",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `log1p`."
  },
  "3426": {
    "name": "log2",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.log2",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `log2`."
  },
  "3427": {
    "name": "logaddexp",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.logaddexp",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `logaddexp`."
  },
  "3428": {
    "name": "logaddexp2",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.logaddexp2",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `logaddexp2`."
  },
  "3429": {
    "name": "logical_and",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.logical_and",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `logical_and`."
  },
  "3430": {
    "name": "logical_not",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.logical_not",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `logical_not`."
  },
  "3431": {
    "name": "logical_or",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.logical_or",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `logical_or`."
  },
  "3432": {
    "name": "logical_xor",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.logical_xor",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `logical_xor`."
  },
  "3433": {
    "name": "logspace",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.logspace",
    "signature": "(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0)",
    "description": "TensorFlow variant of NumPy's `logspace`."
  },
  "3434": {
    "name": "matmul",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.matmul",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `matmul`."
  },
  "3435": {
    "name": "max",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.max",
    "signature": "(a, axis=None, keepdims=None)",
    "description": "TensorFlow variant of NumPy's `max`."
  },
  "3436": {
    "name": "maximum",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.maximum",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `maximum`."
  },
  "3437": {
    "name": "mean",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.mean",
    "signature": "(a, axis=None, dtype=None, out=None, keepdims=None)",
    "description": "TensorFlow variant of NumPy's `mean`."
  },
  "3438": {
    "name": "meshgrid",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.meshgrid",
    "signature": "(*xi, **kwargs)",
    "description": "TensorFlow variant of NumPy's `meshgrid`."
  },
  "3439": {
    "name": "min",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.min",
    "signature": "(a, axis=None, keepdims=None)",
    "description": "TensorFlow variant of NumPy's `min`."
  },
  "3440": {
    "name": "minimum",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.minimum",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `minimum`."
  },
  "3441": {
    "name": "mod",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.mod",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `mod`."
  },
  "3442": {
    "name": "moveaxis",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.moveaxis",
    "signature": "(a, source, destination)",
    "description": "TensorFlow variant of NumPy's `moveaxis`."
  },
  "3443": {
    "name": "multiply",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.multiply",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `multiply`."
  },
  "3444": {
    "name": "nanmean",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.nanmean",
    "signature": "(a, axis=None, dtype=None, keepdims=None)",
    "description": "TensorFlow variant of NumPy's `nanmean`."
  },
  "3445": {
    "name": "nanprod",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.nanprod",
    "signature": "(a, axis=None, dtype=None, keepdims=False)",
    "description": "TensorFlow variant of NumPy's `nanprod`."
  },
  "3446": {
    "name": "nansum",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.nansum",
    "signature": "(a, axis=None, dtype=None, keepdims=False)",
    "description": "TensorFlow variant of NumPy's `nansum`."
  },
  "3447": {
    "name": "ndarray",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.ndarray",
    "signature": "(op, value_index, dtype)",
    "description": "A `tf.Tensor` represents a multidimensional array of elements."
  },
  "3448": {
    "name": "ndim",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.ndim",
    "signature": "(a)",
    "description": "TensorFlow variant of NumPy's `ndim`."
  },
  "3449": {
    "name": "negative",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.negative",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `negative`."
  },
  "3450": {
    "name": "nextafter",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.nextafter",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `nextafter`."
  },
  "3451": {
    "name": "nonzero",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.nonzero",
    "signature": "(a)",
    "description": "TensorFlow variant of NumPy's `nonzero`."
  },
  "3452": {
    "name": "not_equal",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.not_equal",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `not_equal`."
  },
  "3453": {
    "name": "object_",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.object_",
    "signature": "N/A",
    "description": "Any Python object."
  },
  "3454": {
    "name": "ones",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.ones",
    "signature": "(shape, dtype=<class 'float'>)",
    "description": "TensorFlow variant of NumPy's `ones`."
  },
  "3455": {
    "name": "ones_like",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.ones_like",
    "signature": "(a, dtype=None)",
    "description": "TensorFlow variant of NumPy's `ones_like`."
  },
  "3456": {
    "name": "outer",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.outer",
    "signature": "(a, b)",
    "description": "TensorFlow variant of NumPy's `outer`."
  },
  "3457": {
    "name": "pad",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.pad",
    "signature": "(array, pad_width, mode, **kwargs)",
    "description": "TensorFlow variant of NumPy's `pad`."
  },
  "3458": {
    "name": "polyval",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.polyval",
    "signature": "(p, x)",
    "description": "TensorFlow variant of NumPy's `polyval`."
  },
  "3459": {
    "name": "positive",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.positive",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `positive`."
  },
  "3460": {
    "name": "power",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.power",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `power`."
  },
  "3461": {
    "name": "prod",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.prod",
    "signature": "(a, axis=None, dtype=None, keepdims=None)",
    "description": "TensorFlow variant of NumPy's `prod`."
  },
  "3462": {
    "name": "promote_types",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.promote_types",
    "signature": "(type1, type2)",
    "description": "TensorFlow variant of NumPy's `promote_types`."
  },
  "3463": {
    "name": "ptp",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.ptp",
    "signature": "(a, axis=None, keepdims=None)",
    "description": "TensorFlow variant of NumPy's `ptp`."
  },
  "3464": {
    "name": "rad2deg",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.rad2deg",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `rad2deg`."
  },
  "3465": {
    "name": "ravel",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.ravel",
    "signature": "(a)",
    "description": "TensorFlow variant of NumPy's `ravel`."
  },
  "3466": {
    "name": "real",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.real",
    "signature": "(val)",
    "description": "TensorFlow variant of NumPy's `real`."
  },
  "3467": {
    "name": "reciprocal",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.reciprocal",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `reciprocal`."
  },
  "3468": {
    "name": "remainder",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.remainder",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `remainder`."
  },
  "3469": {
    "name": "repeat",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.repeat",
    "signature": "(a, repeats, axis=None)",
    "description": "TensorFlow variant of NumPy's `repeat`."
  },
  "3470": {
    "name": "reshape",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.reshape",
    "signature": "(a, newshape, order='C')",
    "description": "TensorFlow variant of NumPy's `reshape`."
  },
  "3471": {
    "name": "result_type",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.result_type",
    "signature": "(*arrays_and_dtypes)",
    "description": "TensorFlow variant of NumPy's `result_type`."
  },
  "3472": {
    "name": "roll",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.roll",
    "signature": "(a, shift, axis=None)",
    "description": "TensorFlow variant of NumPy's `roll`."
  },
  "3473": {
    "name": "rot90",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.rot90",
    "signature": "(m, k=1, axes=(0, 1))",
    "description": "TensorFlow variant of NumPy's `rot90`."
  },
  "3474": {
    "name": "round",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.round",
    "signature": "(a, decimals=0)",
    "description": "TensorFlow variant of NumPy's `round`."
  },
  "3475": {
    "name": "select",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.select",
    "signature": "(condlist, choicelist, default=0)",
    "description": "TensorFlow variant of NumPy's `select`."
  },
  "3476": {
    "name": "shape",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.shape",
    "signature": "(a)",
    "description": "TensorFlow variant of NumPy's `shape`."
  },
  "3477": {
    "name": "sign",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.sign",
    "signature": "(x, out=None, where=None, **kwargs)",
    "description": "TensorFlow variant of NumPy's `sign`."
  },
  "3478": {
    "name": "signbit",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.signbit",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `signbit`."
  },
  "3479": {
    "name": "sin",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.sin",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `sin`."
  },
  "3480": {
    "name": "sinc",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.sinc",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `sinc`."
  },
  "3481": {
    "name": "sinh",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.sinh",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `sinh`."
  },
  "3482": {
    "name": "size",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.size",
    "signature": "(x, axis=None)",
    "description": "TensorFlow variant of NumPy's `size`."
  },
  "3483": {
    "name": "sort",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.sort",
    "signature": "(a, axis=-1, kind='quicksort', order=None)",
    "description": "TensorFlow variant of NumPy's `sort`."
  },
  "3484": {
    "name": "split",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.split",
    "signature": "(ary, indices_or_sections, axis=0)",
    "description": "TensorFlow variant of NumPy's `split`."
  },
  "3485": {
    "name": "sqrt",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.sqrt",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `sqrt`."
  },
  "3486": {
    "name": "square",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.square",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `square`."
  },
  "3487": {
    "name": "squeeze",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.squeeze",
    "signature": "(a, axis=None)",
    "description": "TensorFlow variant of NumPy's `squeeze`."
  },
  "3488": {
    "name": "stack",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.stack",
    "signature": "(arrays, axis=0)",
    "description": "TensorFlow variant of NumPy's `stack`."
  },
  "3489": {
    "name": "std",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.std",
    "signature": "(a, axis=None, keepdims=None)",
    "description": "TensorFlow variant of NumPy's `std`."
  },
  "3490": {
    "name": "string_",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.string_",
    "signature": "N/A",
    "description": "A byte string."
  },
  "3491": {
    "name": "subtract",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.subtract",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `subtract`."
  },
  "3492": {
    "name": "sum",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.sum",
    "signature": "(a, axis=None, dtype=None, keepdims=None)",
    "description": "TensorFlow variant of NumPy's `sum`."
  },
  "3493": {
    "name": "swapaxes",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.swapaxes",
    "signature": "(a, axis1, axis2)",
    "description": "TensorFlow variant of NumPy's `swapaxes`."
  },
  "3494": {
    "name": "take",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.take",
    "signature": "(a, indices, axis=None, out=None, mode='clip')",
    "description": "TensorFlow variant of NumPy's `take`."
  },
  "3495": {
    "name": "take_along_axis",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.take_along_axis",
    "signature": "(arr, indices, axis)",
    "description": "TensorFlow variant of NumPy's `take_along_axis`."
  },
  "3496": {
    "name": "tan",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.tan",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `tan`."
  },
  "3497": {
    "name": "tanh",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.tanh",
    "signature": "(x)",
    "description": "TensorFlow variant of NumPy's `tanh`."
  },
  "3498": {
    "name": "tensordot",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.tensordot",
    "signature": "(a, b, axes=2)",
    "description": "TensorFlow variant of NumPy's `tensordot`."
  },
  "3499": {
    "name": "tile",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.tile",
    "signature": "(a, reps)",
    "description": "TensorFlow variant of NumPy's `tile`."
  },
  "3500": {
    "name": "trace",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.trace",
    "signature": "(a, offset=0, axis1=0, axis2=1, dtype=None)",
    "description": "TensorFlow variant of NumPy's `trace`."
  },
  "3501": {
    "name": "transpose",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.transpose",
    "signature": "(a, axes=None)",
    "description": "TensorFlow variant of NumPy's `transpose`."
  },
  "3502": {
    "name": "tri",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.tri",
    "signature": "(N, M=None, k=0, dtype=None)",
    "description": "TensorFlow variant of NumPy's `tri`."
  },
  "3503": {
    "name": "tril",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.tril",
    "signature": "(m, k=0)",
    "description": "TensorFlow variant of NumPy's `tril`."
  },
  "3504": {
    "name": "triu",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.triu",
    "signature": "(m, k=0)",
    "description": "TensorFlow variant of NumPy's `triu`."
  },
  "3505": {
    "name": "true_divide",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.true_divide",
    "signature": "(x1, x2)",
    "description": "TensorFlow variant of NumPy's `true_divide`."
  },
  "3506": {
    "name": "uint16",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.uint16",
    "signature": "N/A",
    "description": "Unsigned integer type, compatible with C ``unsigned short``."
  },
  "3507": {
    "name": "uint32",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.uint32",
    "signature": "N/A",
    "description": "Unsigned integer type, compatible with C ``unsigned int``."
  },
  "3508": {
    "name": "uint64",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.uint64",
    "signature": "N/A",
    "description": "Unsigned integer type, compatible with C ``unsigned long``."
  },
  "3509": {
    "name": "uint8",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.uint8",
    "signature": "N/A",
    "description": "Unsigned integer type, compatible with C ``unsigned char``."
  },
  "3510": {
    "name": "unicode_",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.unicode_",
    "signature": "N/A",
    "description": "A unicode string."
  },
  "3511": {
    "name": "vander",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.vander",
    "signature": "(x, N=None, increasing=False)",
    "description": "TensorFlow variant of NumPy's `vander`."
  },
  "3512": {
    "name": "var",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.var",
    "signature": "(a, axis=None, dtype=None, out=None, ddof=0, keepdims=None)",
    "description": "TensorFlow variant of NumPy's `var`."
  },
  "3513": {
    "name": "vdot",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.vdot",
    "signature": "(a, b)",
    "description": "TensorFlow variant of NumPy's `vdot`."
  },
  "3514": {
    "name": "vsplit",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.vsplit",
    "signature": "(ary, indices_or_sections)",
    "description": "TensorFlow variant of NumPy's `vsplit`."
  },
  "3515": {
    "name": "vstack",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.vstack",
    "signature": "(tup)",
    "description": "TensorFlow variant of NumPy's `vstack`."
  },
  "3516": {
    "name": "where",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.where",
    "signature": "(condition, x=None, y=None)",
    "description": "TensorFlow variant of NumPy's `where`."
  },
  "3517": {
    "name": "zeros",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.zeros",
    "signature": "(shape, dtype=<class 'float'>)",
    "description": "TensorFlow variant of NumPy's `zeros`."
  },
  "3518": {
    "name": "zeros_like",
    "module": "tf.experimental.numpy",
    "fullName": "tf.experimental.numpy.zeros_like",
    "signature": "(a, dtype=None)",
    "description": "TensorFlow variant of NumPy's `zeros_like`."
  },
  "3519": {
    "name": "poisson",
    "module": "tf.experimental.numpy.random",
    "fullName": "tf.experimental.numpy.random.poisson",
    "signature": "(lam=1.0, size=None)",
    "description": "TensorFlow variant of NumPy's `random.poisson`."
  },
  "3520": {
    "name": "rand",
    "module": "tf.experimental.numpy.random",
    "fullName": "tf.experimental.numpy.random.rand",
    "signature": "(*size)",
    "description": "TensorFlow variant of NumPy's `random.rand`."
  },
  "3521": {
    "name": "randint",
    "module": "tf.experimental.numpy.random",
    "fullName": "tf.experimental.numpy.random.randint",
    "signature": "(low, high=None, size=None, dtype=<class 'numpy.int64'>)",
    "description": "TensorFlow variant of NumPy's `random.randint`."
  },
  "3522": {
    "name": "randn",
    "module": "tf.experimental.numpy.random",
    "fullName": "tf.experimental.numpy.random.randn",
    "signature": "(*args)",
    "description": "TensorFlow variant of NumPy's `random.randn`."
  },
  "3523": {
    "name": "random",
    "module": "tf.experimental.numpy.random",
    "fullName": "tf.experimental.numpy.random.random",
    "signature": "(size=None)",
    "description": "TensorFlow variant of NumPy's `random.random`."
  },
  "3524": {
    "name": "seed",
    "module": "tf.experimental.numpy.random",
    "fullName": "tf.experimental.numpy.random.seed",
    "signature": "(s)",
    "description": "TensorFlow variant of NumPy's `random.seed`."
  },
  "3525": {
    "name": "standard_normal",
    "module": "tf.experimental.numpy.random",
    "fullName": "tf.experimental.numpy.random.standard_normal",
    "signature": "(size=None)",
    "description": "TensorFlow variant of NumPy's `random.standard_normal`."
  },
  "3526": {
    "name": "uniform",
    "module": "tf.experimental.numpy.random",
    "fullName": "tf.experimental.numpy.random.uniform",
    "signature": "(low=0.0, high=1.0, size=None)",
    "description": "TensorFlow variant of NumPy's `random.uniform`."
  },
  "3527": {
    "name": "from_dlpack",
    "module": "tf.experimental.dlpack",
    "fullName": "tf.experimental.dlpack.from_dlpack",
    "signature": "(dlcapsule)",
    "description": "Returns the Tensorflow eager tensor."
  },
  "3528": {
    "name": "to_dlpack",
    "module": "tf.experimental.dlpack",
    "fullName": "tf.experimental.dlpack.to_dlpack",
    "signature": "(tf_tensor)",
    "description": "Returns the dlpack capsule representing the tensor."
  },
  "3529": {
    "name": "BaselineClassifier",
    "module": "tf.estimator",
    "fullName": "tf.estimator.BaselineClassifier",
    "signature": "(model_dir=None, n_classes=2, weight_column=None, label_vocabulary=None, optimizer='Ftrl', config=None, loss_reduction='sum_over_batch_size')",
    "description": "A classifier that can establish a simple baseline."
  },
  "3530": {
    "name": "BaselineEstimator",
    "module": "tf.estimator",
    "fullName": "tf.estimator.BaselineEstimator",
    "signature": "(head, model_dir=None, optimizer='Ftrl', config=None)",
    "description": "An estimator that can establish a simple baseline."
  },
  "3531": {
    "name": "BaselineRegressor",
    "module": "tf.estimator",
    "fullName": "tf.estimator.BaselineRegressor",
    "signature": "(model_dir=None, label_dimension=1, weight_column=None, optimizer='Ftrl', config=None, loss_reduction='sum_over_batch_size')",
    "description": "A regressor that can establish a simple baseline."
  },
  "3532": {
    "name": "BestExporter",
    "module": "tf.estimator",
    "fullName": "tf.estimator.BestExporter",
    "signature": "(name='best_exporter', serving_input_receiver_fn=None, event_file_pattern='eval/*.tfevents.*', compare_fn=<function _loss_smaller at 0x7ff533dc45e0>, assets_extra=None, as_text=False, exports_to_keep=5)",
    "description": "This class exports the serving graph and checkpoints of the best models."
  },
  "3533": {
    "name": "BinaryClassHead",
    "module": "tf.estimator",
    "fullName": "tf.estimator.BinaryClassHead",
    "signature": "(weight_column=None, thresholds=None, label_vocabulary=None, loss_reduction='sum_over_batch_size', loss_fn=None, name=None)",
    "description": "Creates a `Head` for single label binary classification."
  },
  "3534": {
    "name": "CheckpointSaverHook",
    "module": "tf.estimator",
    "fullName": "tf.estimator.CheckpointSaverHook",
    "signature": "(checkpoint_dir, save_secs=None, save_steps=None, saver=None, checkpoint_basename='model.ckpt', scaffold=None, listeners=None, save_graph_def=True)",
    "description": "Saves checkpoints every N steps or seconds."
  },
  "3535": {
    "name": "CheckpointSaverListener",
    "module": "tf.estimator",
    "fullName": "tf.estimator.CheckpointSaverListener",
    "signature": "()",
    "description": "Interface for listeners that take action before or after checkpoint save."
  },
  "3536": {
    "name": "DNNClassifier",
    "module": "tf.estimator",
    "fullName": "tf.estimator.DNNClassifier",
    "signature": "(hidden_units, feature_columns, model_dir=None, n_classes=2, weight_column=None, label_vocabulary=None, optimizer='Adagrad', activation_fn=<function relu at 0x7ff56ec47af0>, dropout=None, config=None, warm_start_from=None, loss_reduction='sum_over_batch_size', batch_norm=False)",
    "description": "A classifier for TensorFlow DNN models."
  },
  "3537": {
    "name": "DNNEstimator",
    "module": "tf.estimator",
    "fullName": "tf.estimator.DNNEstimator",
    "signature": "(head, hidden_units, feature_columns, model_dir=None, optimizer='Adagrad', activation_fn=<function relu at 0x7ff56ec47af0>, dropout=None, config=None, warm_start_from=None, batch_norm=False)",
    "description": "An estimator for TensorFlow DNN models with user-specified head."
  },
  "3538": {
    "name": "DNNLinearCombinedClassifier",
    "module": "tf.estimator",
    "fullName": "tf.estimator.DNNLinearCombinedClassifier",
    "signature": "(model_dir=None, linear_feature_columns=None, linear_optimizer='Ftrl', dnn_feature_columns=None, dnn_optimizer='Adagrad', dnn_hidden_units=None, dnn_activation_fn=<function relu at 0x7ff56ec47af0>, dnn_dropout=None, n_classes=2, weight_column=None, label_vocabulary=None, config=None, warm_start_from=None, loss_reduction='sum_over_batch_size', batch_norm=False, linear_sparse_combiner='sum')",
    "description": "An estimator for TensorFlow Linear and DNN joined classification models."
  },
  "3539": {
    "name": "DNNLinearCombinedEstimator",
    "module": "tf.estimator",
    "fullName": "tf.estimator.DNNLinearCombinedEstimator",
    "signature": "(head, model_dir=None, linear_feature_columns=None, linear_optimizer='Ftrl', dnn_feature_columns=None, dnn_optimizer='Adagrad', dnn_hidden_units=None, dnn_activation_fn=<function relu at 0x7ff56ec47af0>, dnn_dropout=None, config=None, batch_norm=False, linear_sparse_combiner='sum')",
    "description": "An estimator for TensorFlow Linear and DNN joined models with custom head."
  },
  "3540": {
    "name": "DNNLinearCombinedRegressor",
    "module": "tf.estimator",
    "fullName": "tf.estimator.DNNLinearCombinedRegressor",
    "signature": "(model_dir=None, linear_feature_columns=None, linear_optimizer='Ftrl', dnn_feature_columns=None, dnn_optimizer='Adagrad', dnn_hidden_units=None, dnn_activation_fn=<function relu at 0x7ff56ec47af0>, dnn_dropout=None, label_dimension=1, weight_column=None, config=None, warm_start_from=None, loss_reduction='sum_over_batch_size', batch_norm=False, linear_sparse_combiner='sum')",
    "description": "An estimator for TensorFlow Linear and DNN joined models for regression."
  },
  "3541": {
    "name": "DNNRegressor",
    "module": "tf.estimator",
    "fullName": "tf.estimator.DNNRegressor",
    "signature": "(hidden_units, feature_columns, model_dir=None, label_dimension=1, weight_column=None, optimizer='Adagrad', activation_fn=<function relu at 0x7ff56ec47af0>, dropout=None, config=None, warm_start_from=None, loss_reduction='sum_over_batch_size', batch_norm=False)",
    "description": "A regressor for TensorFlow DNN models."
  },
  "3542": {
    "name": "Estimator",
    "module": "tf.estimator",
    "fullName": "tf.estimator.Estimator",
    "signature": "(model_fn, model_dir=None, config=None, params=None, warm_start_from=None)",
    "description": "Estimator class to train and evaluate TensorFlow models."
  },
  "3543": {
    "name": "EstimatorSpec",
    "module": "tf.estimator",
    "fullName": "tf.estimator.EstimatorSpec",
    "signature": "(mode, predictions=None, loss=None, train_op=None, eval_metric_ops=None, export_outputs=None, training_chief_hooks=None, training_hooks=None, scaffold=None, evaluation_hooks=None, prediction_hooks=None)",
    "description": "Ops and objects returned from a `model_fn` and passed to an `Estimator`."
  },
  "3544": {
    "name": "EvalSpec",
    "module": "tf.estimator",
    "fullName": "tf.estimator.EvalSpec",
    "signature": "(input_fn, steps=100, name=None, hooks=None, exporters=None, start_delay_secs=120, throttle_secs=600)",
    "description": "Configuration for the \"eval\" part for the `train_and_evaluate` call."
  },
  "3545": {
    "name": "Exporter",
    "module": "tf.estimator",
    "fullName": "tf.estimator.Exporter",
    "signature": "()",
    "description": "A class representing a type of model export."
  },
  "3546": {
    "name": "FeedFnHook",
    "module": "tf.estimator",
    "fullName": "tf.estimator.FeedFnHook",
    "signature": "(feed_fn)",
    "description": "Runs `feed_fn` and sets the `feed_dict` accordingly."
  },
  "3547": {
    "name": "FinalExporter",
    "module": "tf.estimator",
    "fullName": "tf.estimator.FinalExporter",
    "signature": "(name, serving_input_receiver_fn, assets_extra=None, as_text=False)",
    "description": "This class exports the serving graph and checkpoints at the end."
  },
  "3548": {
    "name": "FinalOpsHook",
    "module": "tf.estimator",
    "fullName": "tf.estimator.FinalOpsHook",
    "signature": "(final_ops, final_ops_feed_dict=None)",
    "description": "A hook which evaluates `Tensors` at the end of a session."
  },
  "3549": {
    "name": "GlobalStepWaiterHook",
    "module": "tf.estimator",
    "fullName": "tf.estimator.GlobalStepWaiterHook",
    "signature": "(wait_until_step)",
    "description": "Delays execution until global step reaches `wait_until_step`."
  },
  "3550": {
    "name": "Head",
    "module": "tf.estimator",
    "fullName": "tf.estimator.Head",
    "signature": "()",
    "description": "Interface for the head/top of a model."
  },
  "3551": {
    "name": "LatestExporter",
    "module": "tf.estimator",
    "fullName": "tf.estimator.LatestExporter",
    "signature": "(name, serving_input_receiver_fn, assets_extra=None, as_text=False, exports_to_keep=5)",
    "description": "This class regularly exports the serving graph and checkpoints."
  },
  "3552": {
    "name": "LinearClassifier",
    "module": "tf.estimator",
    "fullName": "tf.estimator.LinearClassifier",
    "signature": "(feature_columns, model_dir=None, n_classes=2, weight_column=None, label_vocabulary=None, optimizer='Ftrl', config=None, warm_start_from=None, loss_reduction='sum_over_batch_size', sparse_combiner='sum')",
    "description": "Linear classifier model."
  },
  "3553": {
    "name": "LinearEstimator",
    "module": "tf.estimator",
    "fullName": "tf.estimator.LinearEstimator",
    "signature": "(head, feature_columns, model_dir=None, optimizer='Ftrl', config=None, sparse_combiner='sum', warm_start_from=None)",
    "description": "An estimator for TensorFlow linear models with user-specified head."
  },
  "3554": {
    "name": "LinearRegressor",
    "module": "tf.estimator",
    "fullName": "tf.estimator.LinearRegressor",
    "signature": "(feature_columns, model_dir=None, label_dimension=1, weight_column=None, optimizer='Ftrl', config=None, warm_start_from=None, loss_reduction='sum_over_batch_size', sparse_combiner='sum')",
    "description": "An estimator for TensorFlow Linear regression problems."
  },
  "3555": {
    "name": "LoggingTensorHook",
    "module": "tf.estimator",
    "fullName": "tf.estimator.LoggingTensorHook",
    "signature": "(tensors, every_n_iter=None, every_n_secs=None, at_end=False, formatter=None)",
    "description": "Prints the given tensors every N local steps, every N seconds, or at end."
  },
  "3556": {
    "name": "LogisticRegressionHead",
    "module": "tf.estimator",
    "fullName": "tf.estimator.LogisticRegressionHead",
    "signature": "(weight_column=None, loss_reduction='sum_over_batch_size', name=None)",
    "description": "Creates a `Head` for logistic regression."
  },
  "3557": {
    "name": "ModeKeys",
    "module": "tf.estimator",
    "fullName": "tf.estimator.ModeKeys",
    "signature": "()",
    "description": "Standard names for Estimator model modes."
  },
  "3558": {
    "name": "MultiClassHead",
    "module": "tf.estimator",
    "fullName": "tf.estimator.MultiClassHead",
    "signature": "(n_classes, weight_column=None, label_vocabulary=None, loss_reduction='sum_over_batch_size', loss_fn=None, name=None)",
    "description": "Creates a `Head` for multi class classification."
  },
  "3559": {
    "name": "MultiHead",
    "module": "tf.estimator",
    "fullName": "tf.estimator.MultiHead",
    "signature": "(heads, head_weights=None)",
    "description": "Creates a `Head` for multi-objective learning."
  },
  "3560": {
    "name": "MultiLabelHead",
    "module": "tf.estimator",
    "fullName": "tf.estimator.MultiLabelHead",
    "signature": "(n_classes, weight_column=None, thresholds=None, label_vocabulary=None, loss_reduction='sum_over_batch_size', loss_fn=None, classes_for_class_based_metrics=None, name=None)",
    "description": "Creates a `Head` for multi-label classification."
  },
  "3561": {
    "name": "NanLossDuringTrainingError",
    "module": "tf.estimator",
    "fullName": "tf.estimator.NanLossDuringTrainingError",
    "signature": "N/A",
    "description": "Unspecified run-time error."
  },
  "3562": {
    "name": "NanTensorHook",
    "module": "tf.estimator",
    "fullName": "tf.estimator.NanTensorHook",
    "signature": "(loss_tensor, fail_on_nan_loss=True)",
    "description": "Monitors the loss tensor and stops training if loss is NaN."
  },
  "3563": {
    "name": "PoissonRegressionHead",
    "module": "tf.estimator",
    "fullName": "tf.estimator.PoissonRegressionHead",
    "signature": "(label_dimension=1, weight_column=None, loss_reduction='sum_over_batch_size', compute_full_loss=True, name=None)",
    "description": "Creates a `Head` for poisson regression using `tf.nn.log_poisson_loss`."
  },
  "3564": {
    "name": "ProfilerHook",
    "module": "tf.estimator",
    "fullName": "tf.estimator.ProfilerHook",
    "signature": "(save_steps=None, save_secs=None, output_dir='', show_dataflow=True, show_memory=False)",
    "description": "Captures CPU/GPU profiling information every N steps or seconds."
  },
  "3565": {
    "name": "RegressionHead",
    "module": "tf.estimator",
    "fullName": "tf.estimator.RegressionHead",
    "signature": "(label_dimension=1, weight_column=None, loss_reduction='sum_over_batch_size', loss_fn=None, inverse_link_fn=None, name=None)",
    "description": "Creates a `Head` for regression using the `mean_squared_error` loss."
  },
  "3566": {
    "name": "RunConfig",
    "module": "tf.estimator",
    "fullName": "tf.estimator.RunConfig",
    "signature": "(model_dir=None, tf_random_seed=None, save_summary_steps=100, save_checkpoints_steps=<object object at 0x7ff5348a8e10>, save_checkpoints_secs=<object object at 0x7ff5348a8e10>, session_config=None, keep_checkpoint_max=5, keep_checkpoint_every_n_hours=10000, log_step_count_steps=100, train_distribute=None, device_fn=None, protocol=None, eval_distribute=None, experimental_distribute=None, experimental_max_worker_delay_secs=None, session_creation_timeout_secs=7200, checkpoint_save_graph_def=True)",
    "description": "This class specifies the configurations for an `Estimator` run."
  },
  "3567": {
    "name": "SecondOrStepTimer",
    "module": "tf.estimator",
    "fullName": "tf.estimator.SecondOrStepTimer",
    "signature": "(every_secs=None, every_steps=None)",
    "description": "Timer that triggers at most once every N seconds or once every N steps."
  },
  "3568": {
    "name": "SessionRunArgs",
    "module": "tf.estimator",
    "fullName": "tf.estimator.SessionRunArgs",
    "signature": "(fetches, feed_dict=None, options=None)",
    "description": "Represents arguments to be added to a `Session.run()` call."
  },
  "3569": {
    "name": "SessionRunContext",
    "module": "tf.estimator",
    "fullName": "tf.estimator.SessionRunContext",
    "signature": "(original_args, session)",
    "description": "Provides information about the `session.run()` call being made."
  },
  "3570": {
    "name": "SessionRunHook",
    "module": "tf.estimator",
    "fullName": "tf.estimator.SessionRunHook",
    "signature": "()",
    "description": "Hook to extend calls to MonitoredSession.run()."
  },
  "3571": {
    "name": "SessionRunValues",
    "module": "tf.estimator",
    "fullName": "tf.estimator.SessionRunValues",
    "signature": "(results, options, run_metadata)",
    "description": "Contains the results of `Session.run()`."
  },
  "3572": {
    "name": "StepCounterHook",
    "module": "tf.estimator",
    "fullName": "tf.estimator.StepCounterHook",
    "signature": "(every_n_steps=100, every_n_secs=None, output_dir=None, summary_writer=None)",
    "description": "Hook that counts steps per second."
  },
  "3573": {
    "name": "StopAtStepHook",
    "module": "tf.estimator",
    "fullName": "tf.estimator.StopAtStepHook",
    "signature": "(num_steps=None, last_step=None)",
    "description": "Hook that requests stop at a specified step."
  },
  "3574": {
    "name": "SummarySaverHook",
    "module": "tf.estimator",
    "fullName": "tf.estimator.SummarySaverHook",
    "signature": "(save_steps=None, save_secs=None, output_dir=None, summary_writer=None, scaffold=None, summary_op=None)",
    "description": "Saves summaries every N steps."
  },
  "3575": {
    "name": "TrainSpec",
    "module": "tf.estimator",
    "fullName": "tf.estimator.TrainSpec",
    "signature": "(input_fn, max_steps=None, hooks=None, saving_listeners=None)",
    "description": "Configuration for the \"train\" part for the `train_and_evaluate` call."
  },
  "3576": {
    "name": "VocabInfo",
    "module": "tf.estimator",
    "fullName": "tf.estimator.VocabInfo",
    "signature": "(new_vocab, new_vocab_size, num_oov_buckets, old_vocab, old_vocab_size=-1, backup_initializer=None, axis=0)",
    "description": "Vocabulary information for warm-starting."
  },
  "3577": {
    "name": "WarmStartSettings",
    "module": "tf.estimator",
    "fullName": "tf.estimator.WarmStartSettings",
    "signature": "(ckpt_to_initialize_from, vars_to_warm_start='.*', var_name_to_vocab_info=None, var_name_to_prev_var_name=None)",
    "description": "Settings for warm-starting in `tf.estimator.Estimators`."
  },
  "3578": {
    "name": "add_metrics",
    "module": "tf.estimator",
    "fullName": "tf.estimator.add_metrics",
    "signature": "(estimator, metric_fn)",
    "description": "Creates a new `tf.estimator.Estimator` which has given metrics."
  },
  "3579": {
    "name": "classifier_parse_example_spec",
    "module": "tf.estimator",
    "fullName": "tf.estimator.classifier_parse_example_spec",
    "signature": "(feature_columns, label_key, label_dtype=tf.int64, label_default=None, weight_column=None)",
    "description": "Generates parsing spec for tf.parse_example to be used with classifiers."
  },
  "3580": {
    "name": "regressor_parse_example_spec",
    "module": "tf.estimator",
    "fullName": "tf.estimator.regressor_parse_example_spec",
    "signature": "(feature_columns, label_key, label_dtype=tf.float32, label_default=None, label_dimension=1, weight_column=None)",
    "description": "Generates parsing spec for tf.parse_example to be used with regressors."
  },
  "3581": {
    "name": "train_and_evaluate",
    "module": "tf.estimator",
    "fullName": "tf.estimator.train_and_evaluate",
    "signature": "(estimator, train_spec, eval_spec)",
    "description": "Train and evaluate the `estimator`."
  },
  "3582": {
    "name": "ClassificationOutput",
    "module": "tf.estimator.export",
    "fullName": "tf.estimator.export.ClassificationOutput",
    "signature": "(scores=None, classes=None)",
    "description": "Represents the output of a classification head."
  },
  "3583": {
    "name": "EvalOutput",
    "module": "tf.estimator.export",
    "fullName": "tf.estimator.export.EvalOutput",
    "signature": "(loss=None, predictions=None, metrics=None)",
    "description": "Represents the output of a supervised eval process."
  },
  "3584": {
    "name": "ExportOutput",
    "module": "tf.estimator.export",
    "fullName": "tf.estimator.export.ExportOutput",
    "signature": "()",
    "description": "Represents an output of a model that can be served."
  },
  "3585": {
    "name": "PredictOutput",
    "module": "tf.estimator.export",
    "fullName": "tf.estimator.export.PredictOutput",
    "signature": "(outputs)",
    "description": "Represents the output of a generic prediction head."
  },
  "3586": {
    "name": "RegressionOutput",
    "module": "tf.estimator.export",
    "fullName": "tf.estimator.export.RegressionOutput",
    "signature": "(value)",
    "description": "Represents the output of a regression head."
  },
  "3587": {
    "name": "ServingInputReceiver",
    "module": "tf.estimator.export",
    "fullName": "tf.estimator.export.ServingInputReceiver",
    "signature": "(features, receiver_tensors, receiver_tensors_alternatives=None)",
    "description": "A return type for a serving_input_receiver_fn."
  },
  "3588": {
    "name": "TensorServingInputReceiver",
    "module": "tf.estimator.export",
    "fullName": "tf.estimator.export.TensorServingInputReceiver",
    "signature": "(features, receiver_tensors, receiver_tensors_alternatives=None)",
    "description": "A return type for a serving_input_receiver_fn."
  },
  "3589": {
    "name": "build_parsing_serving_input_receiver_fn",
    "module": "tf.estimator.export",
    "fullName": "tf.estimator.export.build_parsing_serving_input_receiver_fn",
    "signature": "(feature_spec, default_batch_size=None)",
    "description": "Build a serving_input_receiver_fn expecting fed tf.Examples."
  },
  "3590": {
    "name": "build_raw_serving_input_receiver_fn",
    "module": "tf.estimator.export",
    "fullName": "tf.estimator.export.build_raw_serving_input_receiver_fn",
    "signature": "(features, default_batch_size=None)",
    "description": "Build a serving_input_receiver_fn expecting feature Tensors."
  },
  "3591": {
    "name": "InMemoryEvaluatorHook",
    "module": "tf.estimator.experimental",
    "fullName": "tf.estimator.experimental.InMemoryEvaluatorHook",
    "signature": "(estimator, input_fn, steps=None, hooks=None, name=None, every_n_iter=100)",
    "description": "Hook to run evaluation in training without a checkpoint."
  },
  "3592": {
    "name": "LinearSDCA",
    "module": "tf.estimator.experimental",
    "fullName": "tf.estimator.experimental.LinearSDCA",
    "signature": "(example_id_column, num_loss_partitions=1, num_table_shards=None, symmetric_l1_regularization=0.0, symmetric_l2_regularization=1.0, adaptive=False)",
    "description": "Stochastic Dual Coordinate Ascent helper for linear estimators."
  },
  "3593": {
    "name": "RNNClassifier",
    "module": "tf.estimator.experimental",
    "fullName": "tf.estimator.experimental.RNNClassifier",
    "signature": "(sequence_feature_columns, context_feature_columns=None, units=None, cell_type=<object object at 0x7ff533ebe4a0>, rnn_cell_fn=None, return_sequences=False, model_dir=None, n_classes=2, weight_column=None, label_vocabulary=None, optimizer='Adagrad', loss_reduction='sum_over_batch_size', sequence_mask='sequence_mask', config=None)",
    "description": "A classifier for TensorFlow RNN models."
  },
  "3594": {
    "name": "RNNEstimator",
    "module": "tf.estimator.experimental",
    "fullName": "tf.estimator.experimental.RNNEstimator",
    "signature": "(head, sequence_feature_columns, context_feature_columns=None, units=None, cell_type=<object object at 0x7ff533ebe4a0>, rnn_cell_fn=None, return_sequences=False, model_dir=None, optimizer='Adagrad', config=None)",
    "description": "An Estimator for TensorFlow RNN models with user-specified head."
  },
  "3595": {
    "name": "build_raw_supervised_input_receiver_fn",
    "module": "tf.estimator.experimental",
    "fullName": "tf.estimator.experimental.build_raw_supervised_input_receiver_fn",
    "signature": "(features, labels, default_batch_size=None)",
    "description": "Build a supervised_input_receiver_fn for raw features and labels."
  },
  "3596": {
    "name": "call_logit_fn",
    "module": "tf.estimator.experimental",
    "fullName": "tf.estimator.experimental.call_logit_fn",
    "signature": "(logit_fn, features, mode, params, config)",
    "description": "Calls logit_fn (experimental)."
  },
  "3597": {
    "name": "make_early_stopping_hook",
    "module": "tf.estimator.experimental",
    "fullName": "tf.estimator.experimental.make_early_stopping_hook",
    "signature": "(estimator, should_stop_fn, run_every_secs=60, run_every_steps=None)",
    "description": "Creates early-stopping hook."
  },
  "3598": {
    "name": "make_stop_at_checkpoint_step_hook",
    "module": "tf.estimator.experimental",
    "fullName": "tf.estimator.experimental.make_stop_at_checkpoint_step_hook",
    "signature": "(estimator, last_step, wait_after_file_check_secs=30)",
    "description": "Creates a proper StopAtCheckpointStepHook based on chief status."
  },
  "3599": {
    "name": "stop_if_higher_hook",
    "module": "tf.estimator.experimental",
    "fullName": "tf.estimator.experimental.stop_if_higher_hook",
    "signature": "(estimator, metric_name, threshold, eval_dir=None, min_steps=0, run_every_secs=60, run_every_steps=None)",
    "description": "Creates hook to stop if the given metric is higher than the threshold."
  },
  "3600": {
    "name": "stop_if_lower_hook",
    "module": "tf.estimator.experimental",
    "fullName": "tf.estimator.experimental.stop_if_lower_hook",
    "signature": "(estimator, metric_name, threshold, eval_dir=None, min_steps=0, run_every_secs=60, run_every_steps=None)",
    "description": "Creates hook to stop if the given metric is lower than the threshold."
  },
  "3601": {
    "name": "stop_if_no_decrease_hook",
    "module": "tf.estimator.experimental",
    "fullName": "tf.estimator.experimental.stop_if_no_decrease_hook",
    "signature": "(estimator, metric_name, max_steps_without_decrease, eval_dir=None, min_steps=0, run_every_secs=60, run_every_steps=None)",
    "description": "Creates hook to stop if metric does not decrease within given max steps."
  },
  "3602": {
    "name": "stop_if_no_increase_hook",
    "module": "tf.estimator.experimental",
    "fullName": "tf.estimator.experimental.stop_if_no_increase_hook",
    "signature": "(estimator, metric_name, max_steps_without_increase, eval_dir=None, min_steps=0, run_every_secs=60, run_every_steps=None)",
    "description": "Creates hook to stop if metric does not increase within given max steps."
  },
  "3603": {
    "name": "AbortedError",
    "module": "tf.errors",
    "fullName": "tf.errors.AbortedError",
    "signature": "(node_def, op, message, *args)",
    "description": "The operation was aborted, typically due to a concurrent action."
  },
  "3604": {
    "name": "AlreadyExistsError",
    "module": "tf.errors",
    "fullName": "tf.errors.AlreadyExistsError",
    "signature": "(node_def, op, message, *args)",
    "description": "Raised when an entity that we attempted to create already exists."
  },
  "3605": {
    "name": "CancelledError",
    "module": "tf.errors",
    "fullName": "tf.errors.CancelledError",
    "signature": "(node_def, op, message, *args)",
    "description": "Raised when an operation or step is cancelled."
  },
  "3606": {
    "name": "DataLossError",
    "module": "tf.errors",
    "fullName": "tf.errors.DataLossError",
    "signature": "(node_def, op, message, *args)",
    "description": "Raised when unrecoverable data loss or corruption is encountered."
  },
  "3607": {
    "name": "DeadlineExceededError",
    "module": "tf.errors",
    "fullName": "tf.errors.DeadlineExceededError",
    "signature": "(node_def, op, message, *args)",
    "description": "Raised when a deadline expires before an operation could complete."
  },
  "3608": {
    "name": "FailedPreconditionError",
    "module": "tf.errors",
    "fullName": "tf.errors.FailedPreconditionError",
    "signature": "(node_def, op, message, *args)",
    "description": "Operation was rejected because the system is not in a state to execute it."
  },
  "3609": {
    "name": "InternalError",
    "module": "tf.errors",
    "fullName": "tf.errors.InternalError",
    "signature": "(node_def, op, message, *args)",
    "description": "Raised when the system experiences an internal error."
  },
  "3610": {
    "name": "InvalidArgumentError",
    "module": "tf.errors",
    "fullName": "tf.errors.InvalidArgumentError",
    "signature": "(node_def, op, message, *args)",
    "description": "Raised when an operation receives an invalid argument."
  },
  "3611": {
    "name": "NotFoundError",
    "module": "tf.errors",
    "fullName": "tf.errors.NotFoundError",
    "signature": "(node_def, op, message, *args)",
    "description": "Raised when a requested entity (e.g., a file or directory) was not found."
  },
  "3612": {
    "name": "OpError",
    "module": "tf.errors",
    "fullName": "tf.errors.OpError",
    "signature": "(node_def, op, message, error_code, *args)",
    "description": "The base class for TensorFlow exceptions."
  },
  "3613": {
    "name": "OperatorNotAllowedInGraphError",
    "module": "tf.errors",
    "fullName": "tf.errors.OperatorNotAllowedInGraphError",
    "signature": "N/A",
    "description": "An error is raised for unsupported operator in Graph execution."
  },
  "3614": {
    "name": "OutOfRangeError",
    "module": "tf.errors",
    "fullName": "tf.errors.OutOfRangeError",
    "signature": "(node_def, op, message, *args)",
    "description": "Raised when an operation iterates past the valid input range."
  },
  "3615": {
    "name": "PermissionDeniedError",
    "module": "tf.errors",
    "fullName": "tf.errors.PermissionDeniedError",
    "signature": "(node_def, op, message, *args)",
    "description": "Raised when the caller does not have permission to run an operation."
  },
  "3616": {
    "name": "ResourceExhaustedError",
    "module": "tf.errors",
    "fullName": "tf.errors.ResourceExhaustedError",
    "signature": "(node_def, op, message, *args)",
    "description": "Some resource has been exhausted."
  },
  "3617": {
    "name": "UnauthenticatedError",
    "module": "tf.errors",
    "fullName": "tf.errors.UnauthenticatedError",
    "signature": "(node_def, op, message, *args)",
    "description": "The request does not have valid authentication credentials."
  },
  "3618": {
    "name": "UnavailableError",
    "module": "tf.errors",
    "fullName": "tf.errors.UnavailableError",
    "signature": "(node_def, op, message, *args)",
    "description": "Raised when the runtime is currently unavailable."
  },
  "3619": {
    "name": "UnimplementedError",
    "module": "tf.errors",
    "fullName": "tf.errors.UnimplementedError",
    "signature": "(node_def, op, message, *args)",
    "description": "Raised when an operation has not been implemented."
  },
  "3620": {
    "name": "UnknownError",
    "module": "tf.errors",
    "fullName": "tf.errors.UnknownError",
    "signature": "(node_def, op, message, *args)",
    "description": "Unknown error."
  },
  "3621": {
    "name": "DType",
    "module": "tf.dtypes",
    "fullName": "tf.dtypes.DType",
    "signature": "N/A",
    "description": "Represents the type of the elements in a `Tensor`."
  },
  "3622": {
    "name": "as_dtype",
    "module": "tf.dtypes",
    "fullName": "tf.dtypes.as_dtype",
    "signature": "(type_value)",
    "description": "Converts the given `type_value` to a `DType`."
  },
  "3623": {
    "name": "cast",
    "module": "tf.dtypes",
    "fullName": "tf.dtypes.cast",
    "signature": "(x, dtype, name=None)",
    "description": "Casts a tensor to a new type."
  },
  "3624": {
    "name": "complex",
    "module": "tf.dtypes",
    "fullName": "tf.dtypes.complex",
    "signature": "(real, imag, name=None)",
    "description": "Converts two real numbers to a complex number."
  },
  "3625": {
    "name": "saturate_cast",
    "module": "tf.dtypes",
    "fullName": "tf.dtypes.saturate_cast",
    "signature": "(value, dtype, name=None)",
    "description": "Performs a safe saturating cast of `value` to `dtype`."
  },
  "3626": {
    "name": "CrossDeviceOps",
    "module": "tf.distribute",
    "fullName": "tf.distribute.CrossDeviceOps",
    "signature": "()",
    "description": "Base class for cross-device reduction and broadcasting algorithms."
  },
  "3627": {
    "name": "DistributedDataset",
    "module": "tf.distribute",
    "fullName": "tf.distribute.DistributedDataset",
    "signature": "()",
    "description": "Represents a dataset distributed among devices and machines."
  },
  "3628": {
    "name": "DistributedIterator",
    "module": "tf.distribute",
    "fullName": "tf.distribute.DistributedIterator",
    "signature": "()",
    "description": "An iterator over `tf.distribute.DistributedDataset`."
  },
  "3629": {
    "name": "DistributedValues",
    "module": "tf.distribute",
    "fullName": "tf.distribute.DistributedValues",
    "signature": "()",
    "description": "Base class for representing distributed values."
  },
  "3630": {
    "name": "HierarchicalCopyAllReduce",
    "module": "tf.distribute",
    "fullName": "tf.distribute.HierarchicalCopyAllReduce",
    "signature": "(num_packs=1)",
    "description": "Hierarchical copy all-reduce implementation of CrossDeviceOps."
  },
  "3631": {
    "name": "InputContext",
    "module": "tf.distribute",
    "fullName": "tf.distribute.InputContext",
    "signature": "(num_input_pipelines=1, input_pipeline_id=0, num_replicas_in_sync=1)",
    "description": "A class wrapping information needed by an input function."
  },
  "3632": {
    "name": "InputOptions",
    "module": "tf.distribute",
    "fullName": "tf.distribute.InputOptions",
    "signature": "(experimental_fetch_to_device=None, experimental_replication_mode=<InputReplicationMode.PER_WORKER: 'PER_WORKER'>, experimental_place_dataset_on_device=False, experimental_per_replica_buffer_size=1)",
    "description": "Run options for `experimental_distribute_dataset(s_from_function)`."
  },
  "3633": {
    "name": "InputReplicationMode",
    "module": "tf.distribute",
    "fullName": "tf.distribute.InputReplicationMode",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "Replication mode for input function."
  },
  "3634": {
    "name": "MirroredStrategy",
    "module": "tf.distribute",
    "fullName": "tf.distribute.MirroredStrategy",
    "signature": "(devices=None, cross_device_ops=None)",
    "description": "Synchronous training across multiple replicas on one machine."
  },
  "3635": {
    "name": "MultiWorkerMirroredStrategy",
    "module": "tf.distribute",
    "fullName": "tf.distribute.MultiWorkerMirroredStrategy",
    "signature": "(cluster_resolver=None, communication_options=None)",
    "description": "A distribution strategy for synchronous training on multiple workers."
  },
  "3636": {
    "name": "NcclAllReduce",
    "module": "tf.distribute",
    "fullName": "tf.distribute.NcclAllReduce",
    "signature": "(num_packs=1)",
    "description": "NCCL all-reduce implementation of CrossDeviceOps."
  },
  "3637": {
    "name": "OneDeviceStrategy",
    "module": "tf.distribute",
    "fullName": "tf.distribute.OneDeviceStrategy",
    "signature": "(device)",
    "description": "A distribution strategy for running on a single device."
  },
  "3638": {
    "name": "ParameterServerStrategy",
    "module": "tf.distribute",
    "fullName": "tf.distribute.ParameterServerStrategy",
    "signature": "(cluster_resolver, variable_partitioner=None)",
    "description": "An multi-worker tf.distribute strategy with parameter servers."
  },
  "3639": {
    "name": "ReduceOp",
    "module": "tf.distribute",
    "fullName": "tf.distribute.ReduceOp",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "Indicates how a set of values should be reduced."
  },
  "3640": {
    "name": "ReductionToOneDevice",
    "module": "tf.distribute",
    "fullName": "tf.distribute.ReductionToOneDevice",
    "signature": "(reduce_to_device=None, accumulation_fn=None)",
    "description": "A CrossDeviceOps implementation that copies values to one device to reduce."
  },
  "3641": {
    "name": "ReplicaContext",
    "module": "tf.distribute",
    "fullName": "tf.distribute.ReplicaContext",
    "signature": "(strategy, replica_id_in_sync_group)",
    "description": "A class with a collection of APIs that can be called in a replica context."
  },
  "3642": {
    "name": "RunOptions",
    "module": "tf.distribute",
    "fullName": "tf.distribute.RunOptions",
    "signature": "(experimental_enable_dynamic_batch_size=True, experimental_bucketizing_dynamic_shape=False, experimental_xla_options=None)",
    "description": "Run options for `strategy.run`."
  },
  "3643": {
    "name": "Server",
    "module": "tf.distribute",
    "fullName": "tf.distribute.Server",
    "signature": "(server_or_cluster_def, job_name=None, task_index=None, protocol=None, config=None, start=True)",
    "description": "An in-process TensorFlow server, for use in distributed training."
  },
  "3644": {
    "name": "Strategy",
    "module": "tf.distribute",
    "fullName": "tf.distribute.Strategy",
    "signature": "(extended)",
    "description": "A state & compute distribution policy on a list of devices."
  },
  "3645": {
    "name": "StrategyExtended",
    "module": "tf.distribute",
    "fullName": "tf.distribute.StrategyExtended",
    "signature": "(container_strategy)",
    "description": "Additional APIs for algorithms that need to be distribution-aware."
  },
  "3646": {
    "name": "TPUStrategy",
    "module": "tf.distribute",
    "fullName": "tf.distribute.TPUStrategy",
    "signature": "(tpu_cluster_resolver=None, experimental_device_assignment=None, experimental_spmd_xla_partitioning=False)",
    "description": "Synchronous training on TPUs and TPU Pods."
  },
  "3647": {
    "name": "experimental_set_strategy",
    "module": "tf.distribute",
    "fullName": "tf.distribute.experimental_set_strategy",
    "signature": "(strategy)",
    "description": "Set a `tf.distribute.Strategy` as current without `with strategy.scope()`."
  },
  "3648": {
    "name": "get_replica_context",
    "module": "tf.distribute",
    "fullName": "tf.distribute.get_replica_context",
    "signature": "()",
    "description": "Returns the current `tf.distribute.ReplicaContext` or `None`."
  },
  "3649": {
    "name": "get_strategy",
    "module": "tf.distribute",
    "fullName": "tf.distribute.get_strategy",
    "signature": "()",
    "description": "Returns the current `tf.distribute.Strategy` object."
  },
  "3650": {
    "name": "has_strategy",
    "module": "tf.distribute",
    "fullName": "tf.distribute.has_strategy",
    "signature": "()",
    "description": "Return if there is a current non-default `tf.distribute.Strategy`."
  },
  "3651": {
    "name": "in_cross_replica_context",
    "module": "tf.distribute",
    "fullName": "tf.distribute.in_cross_replica_context",
    "signature": "()",
    "description": "Returns `True` if in a cross-replica context."
  },
  "3652": {
    "name": "CentralStorageStrategy",
    "module": "tf.distribute.experimental",
    "fullName": "tf.distribute.experimental.CentralStorageStrategy",
    "signature": "(compute_devices=None, parameter_device=None)",
    "description": "A one-machine strategy that puts all variables on a single device."
  },
  "3653": {
    "name": "CollectiveHints",
    "module": "tf.distribute.experimental",
    "fullName": "tf.distribute.experimental.CollectiveHints",
    "signature": "(bytes_per_pack=0, timeout_seconds=None)",
    "description": "Hints for collective operations like AllReduce."
  },
  "3654": {
    "name": "CommunicationOptions",
    "module": "tf.distribute.experimental",
    "fullName": "tf.distribute.experimental.CommunicationOptions",
    "signature": "(*args, **kwargs)",
    "description": "Options for cross device communications like All-reduce."
  },
  "3655": {
    "name": "MultiWorkerMirroredStrategy",
    "module": "tf.distribute.experimental",
    "fullName": "tf.distribute.experimental.MultiWorkerMirroredStrategy",
    "signature": "(communication=<CommunicationImplementation.AUTO: 'AUTO'>, cluster_resolver=None)",
    "description": "A distribution strategy for synchronous training on multiple workers."
  },
  "3656": {
    "name": "ParameterServerStrategy",
    "module": "tf.distribute.experimental",
    "fullName": "tf.distribute.experimental.ParameterServerStrategy",
    "signature": "(cluster_resolver, variable_partitioner=None)",
    "description": "An multi-worker tf.distribute strategy with parameter servers."
  },
  "3657": {
    "name": "PreemptionCheckpointHandler",
    "module": "tf.distribute.experimental",
    "fullName": "tf.distribute.experimental.PreemptionCheckpointHandler",
    "signature": "(cluster_resolver, checkpoint_or_checkpoint_manager, checkpoint_dir=None, termination_config=None)",
    "description": "Preemption and error handler for synchronous training."
  },
  "3658": {
    "name": "TPUStrategy",
    "module": "tf.distribute.experimental",
    "fullName": "tf.distribute.experimental.TPUStrategy",
    "signature": "(tpu_cluster_resolver=None, device_assignment=None)",
    "description": "Synchronous training on TPUs and TPU Pods."
  },
  "3659": {
    "name": "TerminationConfig",
    "module": "tf.distribute.experimental",
    "fullName": "tf.distribute.experimental.TerminationConfig",
    "signature": "(termination_watcher_fn=None, exit_fn=None, grace_period=None)",
    "description": "Customization of `PreemptionCheckpointHandler` for various platforms."
  },
  "3660": {
    "name": "ValueContext",
    "module": "tf.distribute.experimental",
    "fullName": "tf.distribute.experimental.ValueContext",
    "signature": "(replica_id_in_sync_group=0, num_replicas_in_sync=1)",
    "description": "A class wrapping information needed by a distribute function."
  },
  "3661": {
    "name": "Client",
    "module": "tf.distribute.experimental.rpc",
    "fullName": "tf.distribute.experimental.rpc.Client",
    "signature": "()",
    "description": "Client class for invoking RPCs to the server."
  },
  "3662": {
    "name": "Server",
    "module": "tf.distribute.experimental.rpc",
    "fullName": "tf.distribute.experimental.rpc.Server",
    "signature": "()",
    "description": "A Server base class for accepting RPCs for registered tf.functions."
  },
  "3663": {
    "name": "FixedShardsPartitioner",
    "module": "tf.distribute.experimental.partitioners",
    "fullName": "tf.distribute.experimental.partitioners.FixedShardsPartitioner",
    "signature": "(num_shards)",
    "description": "Partitioner that allocates a fixed number of shards."
  },
  "3664": {
    "name": "MaxSizePartitioner",
    "module": "tf.distribute.experimental.partitioners",
    "fullName": "tf.distribute.experimental.partitioners.MaxSizePartitioner",
    "signature": "(max_shard_bytes, max_shards=None, bytes_per_string=16)",
    "description": "Partitioner that keeps shards below `max_shard_bytes`."
  },
  "3665": {
    "name": "MinSizePartitioner",
    "module": "tf.distribute.experimental.partitioners",
    "fullName": "tf.distribute.experimental.partitioners.MinSizePartitioner",
    "signature": "(min_shard_bytes=262144, max_shards=1, bytes_per_string=16)",
    "description": "Partitioner that allocates a minimum size per shard."
  },
  "3666": {
    "name": "Partitioner",
    "module": "tf.distribute.experimental.partitioners",
    "fullName": "tf.distribute.experimental.partitioners.Partitioner",
    "signature": "()",
    "description": "Partitioner base class: all partitiners inherit from this class."
  },
  "3667": {
    "name": "ClusterCoordinator",
    "module": "tf.distribute.experimental.coordinator",
    "fullName": "tf.distribute.experimental.coordinator.ClusterCoordinator",
    "signature": "(strategy)",
    "description": "An object to schedule and coordinate remote function execution."
  },
  "3668": {
    "name": "PerWorkerValues",
    "module": "tf.distribute.experimental.coordinator",
    "fullName": "tf.distribute.experimental.coordinator.PerWorkerValues",
    "signature": "(values)",
    "description": "A container that holds a list of values, one value per worker."
  },
  "3669": {
    "name": "RemoteValue",
    "module": "tf.distribute.experimental.coordinator",
    "fullName": "tf.distribute.experimental.coordinator.RemoteValue",
    "signature": "()",
    "description": "An asynchronously available value of a scheduled function."
  },
  "3670": {
    "name": "ClusterCoordinator",
    "module": "tf.distribute.coordinator",
    "fullName": "tf.distribute.coordinator.ClusterCoordinator",
    "signature": "(strategy)",
    "description": "An object to schedule and coordinate remote function execution."
  },
  "3671": {
    "name": "PerWorkerValue",
    "module": "tf.distribute.coordinator",
    "fullName": "tf.distribute.coordinator.PerWorkerValue",
    "signature": "(values)",
    "description": "A container that holds a list of values, one value per worker."
  },
  "3672": {
    "name": "RemoteValue",
    "module": "tf.distribute.coordinator",
    "fullName": "tf.distribute.coordinator.RemoteValue",
    "signature": "()",
    "description": "An asynchronously available value of a scheduled function."
  },
  "3673": {
    "name": "ClusterResolver",
    "module": "tf.distribute.cluster_resolver",
    "fullName": "tf.distribute.cluster_resolver.ClusterResolver",
    "signature": "()",
    "description": "Abstract class for all implementations of ClusterResolvers."
  },
  "3674": {
    "name": "GCEClusterResolver",
    "module": "tf.distribute.cluster_resolver",
    "fullName": "tf.distribute.cluster_resolver.GCEClusterResolver",
    "signature": "(project, zone, instance_group, port, task_type='worker', task_id=0, rpc_layer='grpc', credentials='default', service=None)",
    "description": "ClusterResolver for Google Compute Engine."
  },
  "3675": {
    "name": "KubernetesClusterResolver",
    "module": "tf.distribute.cluster_resolver",
    "fullName": "tf.distribute.cluster_resolver.KubernetesClusterResolver",
    "signature": "(job_to_label_mapping=None, tf_server_port=8470, rpc_layer='grpc', override_client=None)",
    "description": "ClusterResolver for Kubernetes."
  },
  "3676": {
    "name": "SimpleClusterResolver",
    "module": "tf.distribute.cluster_resolver",
    "fullName": "tf.distribute.cluster_resolver.SimpleClusterResolver",
    "signature": "(cluster_spec, master='', task_type=None, task_id=None, environment='', num_accelerators=None, rpc_layer=None)",
    "description": "Simple implementation of ClusterResolver that accepts all attributes."
  },
  "3677": {
    "name": "SlurmClusterResolver",
    "module": "tf.distribute.cluster_resolver",
    "fullName": "tf.distribute.cluster_resolver.SlurmClusterResolver",
    "signature": "(jobs=None, port_base=8888, gpus_per_node=None, gpus_per_task=None, tasks_per_node=None, auto_set_gpu=True, rpc_layer='grpc')",
    "description": "ClusterResolver for system with Slurm workload manager."
  },
  "3678": {
    "name": "TFConfigClusterResolver",
    "module": "tf.distribute.cluster_resolver",
    "fullName": "tf.distribute.cluster_resolver.TFConfigClusterResolver",
    "signature": "(task_type=None, task_id=None, rpc_layer=None, environment=None)",
    "description": "Implementation of a ClusterResolver which reads the TF_CONFIG EnvVar."
  },
  "3679": {
    "name": "TPUClusterResolver",
    "module": "tf.distribute.cluster_resolver",
    "fullName": "tf.distribute.cluster_resolver.TPUClusterResolver",
    "signature": "(tpu=None, zone=None, project=None, job_name='worker', coordinator_name=None, coordinator_address=None, credentials='default', service=None, discovery_url=None)",
    "description": "Cluster Resolver for Google Cloud TPUs."
  },
  "3680": {
    "name": "UnionResolver",
    "module": "tf.distribute.cluster_resolver",
    "fullName": "tf.distribute.cluster_resolver.UnionResolver",
    "signature": "(*args, **kwargs)",
    "description": "Performs a union on underlying ClusterResolvers."
  },
  "3681": {
    "name": "Assert",
    "module": "tf.debugging",
    "fullName": "tf.debugging.Assert",
    "signature": "(condition, data, summarize=None, name=None)",
    "description": "Asserts that the given condition is true."
  },
  "3682": {
    "name": "assert_all_finite",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_all_finite",
    "signature": "(x, message, name=None)",
    "description": "Assert that the tensor does not contain any NaN's or Inf's."
  },
  "3683": {
    "name": "assert_equal",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_equal",
    "signature": "(x, y, message=None, summarize=None, name=None)",
    "description": "Assert the condition `x == y` holds element-wise."
  },
  "3684": {
    "name": "assert_greater",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_greater",
    "signature": "(x, y, message=None, summarize=None, name=None)",
    "description": "Assert the condition `x > y` holds element-wise."
  },
  "3685": {
    "name": "assert_greater_equal",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_greater_equal",
    "signature": "(x, y, message=None, summarize=None, name=None)",
    "description": "Assert the condition `x >= y` holds element-wise."
  },
  "3686": {
    "name": "assert_integer",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_integer",
    "signature": "(x, message=None, name=None)",
    "description": "Assert that `x` is of integer dtype."
  },
  "3687": {
    "name": "assert_less",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_less",
    "signature": "(x, y, message=None, summarize=None, name=None)",
    "description": "Assert the condition `x < y` holds element-wise."
  },
  "3688": {
    "name": "assert_less_equal",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_less_equal",
    "signature": "(x, y, message=None, summarize=None, name=None)",
    "description": "Assert the condition `x <= y` holds element-wise."
  },
  "3689": {
    "name": "assert_near",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_near",
    "signature": "(x, y, rtol=None, atol=None, message=None, summarize=None, name=None)",
    "description": "Assert the condition `x` and `y` are close element-wise."
  },
  "3690": {
    "name": "assert_negative",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_negative",
    "signature": "(x, message=None, summarize=None, name=None)",
    "description": "Assert the condition `x < 0` holds element-wise."
  },
  "3691": {
    "name": "assert_non_negative",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_non_negative",
    "signature": "(x, message=None, summarize=None, name=None)",
    "description": "Assert the condition `x >= 0` holds element-wise."
  },
  "3692": {
    "name": "assert_non_positive",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_non_positive",
    "signature": "(x, message=None, summarize=None, name=None)",
    "description": "Assert the condition `x <= 0` holds element-wise."
  },
  "3693": {
    "name": "assert_none_equal",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_none_equal",
    "signature": "(x, y, summarize=None, message=None, name=None)",
    "description": "Assert the condition `x != y` holds for all elements."
  },
  "3694": {
    "name": "assert_positive",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_positive",
    "signature": "(x, message=None, summarize=None, name=None)",
    "description": "Assert the condition `x > 0` holds element-wise."
  },
  "3695": {
    "name": "assert_proper_iterable",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_proper_iterable",
    "signature": "(values)",
    "description": "Static assert that values is a \"proper\" iterable."
  },
  "3696": {
    "name": "assert_rank",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_rank",
    "signature": "(x, rank, message=None, name=None)",
    "description": "Assert that `x` has rank equal to `rank`."
  },
  "3697": {
    "name": "assert_rank_at_least",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_rank_at_least",
    "signature": "(x, rank, message=None, name=None)",
    "description": "Assert that `x` has rank of at least `rank`."
  },
  "3698": {
    "name": "assert_rank_in",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_rank_in",
    "signature": "(x, ranks, message=None, name=None)",
    "description": "Assert that `x` has a rank in `ranks`."
  },
  "3699": {
    "name": "assert_same_float_dtype",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_same_float_dtype",
    "signature": "(tensors=None, dtype=None)",
    "description": "Validate and return float type based on `tensors` and `dtype`."
  },
  "3700": {
    "name": "assert_scalar",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_scalar",
    "signature": "(tensor, message=None, name=None)",
    "description": "Asserts that the given `tensor` is a scalar."
  },
  "3701": {
    "name": "assert_shapes",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_shapes",
    "signature": "(shapes, data=None, summarize=None, message=None, name=None)",
    "description": "Assert tensor shapes and dimension size relationships between tensors."
  },
  "3702": {
    "name": "assert_type",
    "module": "tf.debugging",
    "fullName": "tf.debugging.assert_type",
    "signature": "(tensor, tf_type, message=None, name=None)",
    "description": "Asserts that the given `Tensor` is of the specified type."
  },
  "3703": {
    "name": "check_numerics",
    "module": "tf.debugging",
    "fullName": "tf.debugging.check_numerics",
    "signature": "(tensor, message, name=None)",
    "description": "Checks a tensor for NaN and Inf values."
  },
  "3704": {
    "name": "disable_check_numerics",
    "module": "tf.debugging",
    "fullName": "tf.debugging.disable_check_numerics",
    "signature": "()",
    "description": "Disable the eager/graph unified numerics checking mechanism."
  },
  "3705": {
    "name": "disable_traceback_filtering",
    "module": "tf.debugging",
    "fullName": "tf.debugging.disable_traceback_filtering",
    "signature": "()",
    "description": "Disable filtering out TensorFlow-internal frames in exception stack traces."
  },
  "3706": {
    "name": "enable_check_numerics",
    "module": "tf.debugging",
    "fullName": "tf.debugging.enable_check_numerics",
    "signature": "(stack_height_limit=30, path_length_limit=50)",
    "description": "Enable tensor numerics checking in an eager/graph unified fashion."
  },
  "3707": {
    "name": "enable_traceback_filtering",
    "module": "tf.debugging",
    "fullName": "tf.debugging.enable_traceback_filtering",
    "signature": "()",
    "description": "Enable filtering out TensorFlow-internal frames in exception stack traces."
  },
  "3708": {
    "name": "get_log_device_placement",
    "module": "tf.debugging",
    "fullName": "tf.debugging.get_log_device_placement",
    "signature": "()",
    "description": "Get if device placements are logged."
  },
  "3709": {
    "name": "is_numeric_tensor",
    "module": "tf.debugging",
    "fullName": "tf.debugging.is_numeric_tensor",
    "signature": "(tensor)",
    "description": "Returns `True` if the elements of `tensor` are numbers."
  },
  "3710": {
    "name": "is_traceback_filtering_enabled",
    "module": "tf.debugging",
    "fullName": "tf.debugging.is_traceback_filtering_enabled",
    "signature": "()",
    "description": "Check whether traceback filtering is currently enabled."
  },
  "3711": {
    "name": "set_log_device_placement",
    "module": "tf.debugging",
    "fullName": "tf.debugging.set_log_device_placement",
    "signature": "(enabled)",
    "description": "Turns logging for device placement decisions on or off."
  },
  "3712": {
    "name": "disable_dump_debug_info",
    "module": "tf.debugging.experimental",
    "fullName": "tf.debugging.experimental.disable_dump_debug_info",
    "signature": "()",
    "description": "Disable the currently-enabled debugging dumping."
  },
  "3713": {
    "name": "enable_dump_debug_info",
    "module": "tf.debugging.experimental",
    "fullName": "tf.debugging.experimental.enable_dump_debug_info",
    "signature": "(dump_root, tensor_debug_mode='NO_TENSOR', circular_buffer_size=1000, op_regex=None, tensor_dtypes=None)",
    "description": "Enable dumping debugging information from a TensorFlow program."
  },
  "3714": {
    "name": "Dataset",
    "module": "tf.data",
    "fullName": "tf.data.Dataset",
    "signature": "(variant_tensor)",
    "description": "Represents a potentially large set of elements."
  },
  "3715": {
    "name": "DatasetSpec",
    "module": "tf.data",
    "fullName": "tf.data.DatasetSpec",
    "signature": "(element_spec, dataset_shape=())",
    "description": "Type specification for `tf.data.Dataset`."
  },
  "3716": {
    "name": "FixedLengthRecordDataset",
    "module": "tf.data",
    "fullName": "tf.data.FixedLengthRecordDataset",
    "signature": "(filenames, record_bytes, header_bytes=None, footer_bytes=None, buffer_size=None, compression_type=None, num_parallel_reads=None, name=None)",
    "description": "A `Dataset` of fixed-length records from one or more binary files."
  },
  "3717": {
    "name": "Iterator",
    "module": "tf.data",
    "fullName": "tf.data.Iterator",
    "signature": "()",
    "description": "Represents an iterator of a `tf.data.Dataset`."
  },
  "3718": {
    "name": "IteratorSpec",
    "module": "tf.data",
    "fullName": "tf.data.IteratorSpec",
    "signature": "(element_spec)",
    "description": "Type specification for `tf.data.Iterator`."
  },
  "3719": {
    "name": "Options",
    "module": "tf.data",
    "fullName": "tf.data.Options",
    "signature": "()",
    "description": "Represents options for `tf.data.Dataset`."
  },
  "3720": {
    "name": "TFRecordDataset",
    "module": "tf.data",
    "fullName": "tf.data.TFRecordDataset",
    "signature": "(filenames, compression_type=None, buffer_size=None, num_parallel_reads=None, name=None)",
    "description": "A `Dataset` comprising records from one or more TFRecord files."
  },
  "3721": {
    "name": "TextLineDataset",
    "module": "tf.data",
    "fullName": "tf.data.TextLineDataset",
    "signature": "(filenames, compression_type=None, buffer_size=None, num_parallel_reads=None, name=None)",
    "description": "Creates a `Dataset` comprising lines from one or more text files."
  },
  "3722": {
    "name": "ThreadingOptions",
    "module": "tf.data",
    "fullName": "tf.data.ThreadingOptions",
    "signature": "()",
    "description": "Represents options for dataset threading."
  },
  "3723": {
    "name": "AutoShardPolicy",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.AutoShardPolicy",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "Represents the type of auto-sharding to use."
  },
  "3724": {
    "name": "AutotuneAlgorithm",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.AutotuneAlgorithm",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "Represents the type of autotuning algorithm to use."
  },
  "3725": {
    "name": "AutotuneOptions",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.AutotuneOptions",
    "signature": "()",
    "description": "Represents options for autotuning dataset performance."
  },
  "3726": {
    "name": "CheckpointInputPipelineHook",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.CheckpointInputPipelineHook",
    "signature": "(estimator, external_state_policy=None)",
    "description": "Checkpoints input pipeline state every N steps or seconds."
  },
  "3727": {
    "name": "Counter",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.Counter",
    "signature": "(start=0, step=1, dtype=tf.int64)",
    "description": "Creates a `Dataset` that counts from `start` in steps of size `step`."
  },
  "3728": {
    "name": "CsvDataset",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.CsvDataset",
    "signature": "(filenames, record_defaults, compression_type=None, buffer_size=None, header=False, field_delim=',', use_quote_delim=True, na_value='', select_cols=None, exclude_cols=None)",
    "description": "A Dataset comprising lines from one or more CSV files."
  },
  "3729": {
    "name": "DatasetInitializer",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.DatasetInitializer",
    "signature": "(dataset)",
    "description": "Creates a table initializer from a `tf.data.Dataset`."
  },
  "3730": {
    "name": "DistributeOptions",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.DistributeOptions",
    "signature": "()",
    "description": "Represents options for distributed data processing."
  },
  "3731": {
    "name": "ExternalStatePolicy",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.ExternalStatePolicy",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "Represents how to handle external state during serialization."
  },
  "3732": {
    "name": "OptimizationOptions",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.OptimizationOptions",
    "signature": "()",
    "description": "Represents options for dataset optimizations."
  },
  "3733": {
    "name": "Optional",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.Optional",
    "signature": "()",
    "description": "Represents a value that may or may not be present."
  },
  "3734": {
    "name": "Reducer",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.Reducer",
    "signature": "(init_func, reduce_func, finalize_func)",
    "description": "A reducer is used for reducing a set of elements."
  },
  "3735": {
    "name": "SqlDataset",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.SqlDataset",
    "signature": "(driver_name, data_source_name, query, output_types)",
    "description": "A `Dataset` consisting of the results from a SQL query."
  },
  "3736": {
    "name": "ThreadingOptions",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.ThreadingOptions",
    "signature": "()",
    "description": "Represents options for dataset threading."
  },
  "3737": {
    "name": "assert_cardinality",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.assert_cardinality",
    "signature": "(expected_cardinality)",
    "description": "Asserts the cardinality of the input dataset."
  },
  "3738": {
    "name": "cardinality",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.cardinality",
    "signature": "(dataset)",
    "description": "Returns the cardinality of `dataset`, if known."
  },
  "3739": {
    "name": "copy_to_device",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.copy_to_device",
    "signature": "(target_device, source_device='/cpu:0')",
    "description": "A transformation that copies dataset elements to the given `target_device`."
  },
  "3740": {
    "name": "dense_to_ragged_batch",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.dense_to_ragged_batch",
    "signature": "(batch_size, drop_remainder=False, row_splits_dtype=tf.int64)",
    "description": "A transformation that batches ragged elements into `tf.RaggedTensor`s."
  },
  "3741": {
    "name": "dense_to_sparse_batch",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.dense_to_sparse_batch",
    "signature": "(batch_size, row_shape)",
    "description": "A transformation that batches ragged elements into `tf.sparse.SparseTensor`s."
  },
  "3742": {
    "name": "enable_debug_mode",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.enable_debug_mode",
    "signature": "()",
    "description": "Enables debug mode for tf.data."
  },
  "3743": {
    "name": "from_list",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.from_list",
    "signature": "(elements, name=None)",
    "description": "Creates a `Dataset` comprising the given list of elements."
  },
  "3744": {
    "name": "from_variant",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.from_variant",
    "signature": "(variant, structure)",
    "description": "Constructs a dataset from the given variant and (nested) structure."
  },
  "3745": {
    "name": "get_structure",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.get_structure",
    "signature": "(dataset_or_iterator)",
    "description": "Returns the type signature for elements of the input dataset / iterator."
  },
  "3746": {
    "name": "group_by_reducer",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.group_by_reducer",
    "signature": "(key_func, reducer)",
    "description": "A transformation that groups elements and performs a reduction."
  },
  "3747": {
    "name": "ignore_errors",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.ignore_errors",
    "signature": "(log_warning=False)",
    "description": "Creates a `Dataset` from another `Dataset` and silently ignores any errors."
  },
  "3748": {
    "name": "index_table_from_dataset",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.index_table_from_dataset",
    "signature": "(dataset=None, num_oov_buckets=0, vocab_size=None, default_value=-1, hasher_spec=HasherSpec(hasher='fasthash', key=None), key_dtype=tf.string, name=None)",
    "description": "Returns an index lookup table based on the given dataset."
  },
  "3749": {
    "name": "make_batched_features_dataset",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.make_batched_features_dataset",
    "signature": "(file_pattern, batch_size, features, reader=None, label_key=None, reader_args=None, num_epochs=None, shuffle=True, shuffle_buffer_size=10000, shuffle_seed=None, prefetch_buffer_size=None, reader_num_threads=None, parser_num_threads=None, sloppy_ordering=False, drop_final_batch=False)",
    "description": "Returns a `Dataset` of feature dictionaries from `Example` protos."
  },
  "3750": {
    "name": "make_csv_dataset",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.make_csv_dataset",
    "signature": "(file_pattern, batch_size, column_names=None, column_defaults=None, label_name=None, select_columns=None, field_delim=',', use_quote_delim=True, na_value='', header=True, num_epochs=None, shuffle=True, shuffle_buffer_size=10000, shuffle_seed=None, prefetch_buffer_size=None, num_parallel_reads=None, sloppy=False, num_rows_for_inference=100, compression_type=None, ignore_errors=False)",
    "description": "Reads CSV files into a dataset."
  },
  "3751": {
    "name": "parse_example_dataset",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.parse_example_dataset",
    "signature": "(features, num_parallel_calls=1, deterministic=None)",
    "description": "A transformation that parses `Example` protos into a `dict` of tensors."
  },
  "3752": {
    "name": "prefetch_to_device",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.prefetch_to_device",
    "signature": "(device, buffer_size=None)",
    "description": "A transformation that prefetches dataset values to the given `device`."
  },
  "3753": {
    "name": "table_from_dataset",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.table_from_dataset",
    "signature": "(dataset=None, num_oov_buckets=0, vocab_size=None, default_value=None, hasher_spec=HasherSpec(hasher='fasthash', key=None), key_dtype=tf.string, name=None)",
    "description": "Returns a lookup table based on the given dataset."
  },
  "3754": {
    "name": "to_variant",
    "module": "tf.data.experimental",
    "fullName": "tf.data.experimental.to_variant",
    "signature": "(dataset)",
    "description": "Returns a variant representing the given dataset."
  },
  "3755": {
    "name": "CrossTrainerCache",
    "module": "tf.data.experimental.service",
    "fullName": "tf.data.experimental.service.CrossTrainerCache",
    "signature": "(trainer_id)",
    "description": "Options related to the tf.data service cross trainer cache."
  },
  "3756": {
    "name": "DispatchServer",
    "module": "tf.data.experimental.service",
    "fullName": "tf.data.experimental.service.DispatchServer",
    "signature": "(config=None, start=True)",
    "description": "An in-process tf.data service dispatch server."
  },
  "3757": {
    "name": "DispatcherConfig",
    "module": "tf.data.experimental.service",
    "fullName": "tf.data.experimental.service.DispatcherConfig",
    "signature": "(port=0, protocol=None, work_dir=None, fault_tolerant_mode=False, worker_addresses=None, job_gc_check_interval_ms=None, job_gc_timeout_ms=None)",
    "description": "Configuration class for tf.data service dispatchers."
  },
  "3758": {
    "name": "ShardingPolicy",
    "module": "tf.data.experimental.service",
    "fullName": "tf.data.experimental.service.ShardingPolicy",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "Specifies how to shard data among tf.data service workers."
  },
  "3759": {
    "name": "WorkerConfig",
    "module": "tf.data.experimental.service",
    "fullName": "tf.data.experimental.service.WorkerConfig",
    "signature": "(dispatcher_address, worker_address=None, port=0, protocol=None, heartbeat_interval_ms=None, dispatcher_timeout_ms=None)",
    "description": "Configuration class for tf.data service dispatchers."
  },
  "3760": {
    "name": "WorkerServer",
    "module": "tf.data.experimental.service",
    "fullName": "tf.data.experimental.service.WorkerServer",
    "signature": "(config, start=True)",
    "description": "An in-process tf.data service worker server."
  },
  "3761": {
    "name": "distribute",
    "module": "tf.data.experimental.service",
    "fullName": "tf.data.experimental.service.distribute",
    "signature": "(processing_mode, service, job_name=None, consumer_index=None, num_consumers=None, max_outstanding_requests=None, data_transfer_protocol=None, compression='AUTO', cross_trainer_cache=None, target_workers='AUTO')",
    "description": "A transformation that moves dataset processing to the tf.data service."
  },
  "3762": {
    "name": "from_dataset_id",
    "module": "tf.data.experimental.service",
    "fullName": "tf.data.experimental.service.from_dataset_id",
    "signature": "(processing_mode, service, dataset_id, element_spec=None, job_name=None, consumer_index=None, num_consumers=None, max_outstanding_requests=None, data_transfer_protocol=None, cross_trainer_cache=None, target_workers='AUTO')",
    "description": "Creates a dataset which reads data from the tf.data service."
  },
  "3763": {
    "name": "register_dataset",
    "module": "tf.data.experimental.service",
    "fullName": "tf.data.experimental.service.register_dataset",
    "signature": "(service, dataset, compression='AUTO', dataset_id=None)",
    "description": "Registers a dataset with the tf.data service."
  },
  "3764": {
    "name": "LogicalDevice",
    "module": "tf.config",
    "fullName": "tf.config.LogicalDevice",
    "signature": "(name, device_type)",
    "description": "Abstraction for a logical device initialized by the runtime."
  },
  "3765": {
    "name": "LogicalDeviceConfiguration",
    "module": "tf.config",
    "fullName": "tf.config.LogicalDeviceConfiguration",
    "signature": "(memory_limit=None, experimental_priority=None, experimental_device_ordinal=0)",
    "description": "Configuration class for a logical devices."
  },
  "3766": {
    "name": "PhysicalDevice",
    "module": "tf.config",
    "fullName": "tf.config.PhysicalDevice",
    "signature": "(name, device_type)",
    "description": "Abstraction for a locally visible physical device."
  },
  "3767": {
    "name": "experimental_connect_to_cluster",
    "module": "tf.config",
    "fullName": "tf.config.experimental_connect_to_cluster",
    "signature": "(cluster_spec_or_resolver, job_name='localhost', task_index=0, protocol=None, make_master_device_default=True, cluster_device_filters=None)",
    "description": "Connects to the given cluster."
  },
  "3768": {
    "name": "experimental_connect_to_host",
    "module": "tf.config",
    "fullName": "tf.config.experimental_connect_to_host",
    "signature": "(remote_host=None, job_name='worker')",
    "description": "Connects to a single machine to enable remote execution on it."
  },
  "3769": {
    "name": "functions_run_eagerly",
    "module": "tf.config",
    "fullName": "tf.config.functions_run_eagerly",
    "signature": "()",
    "description": "Returns the value of the `run_functions_eagerly` setting."
  },
  "3770": {
    "name": "get_logical_device_configuration",
    "module": "tf.config",
    "fullName": "tf.config.get_logical_device_configuration",
    "signature": "(device)",
    "description": "Get the virtual device configuration for a `tf.config.PhysicalDevice`."
  },
  "3771": {
    "name": "get_soft_device_placement",
    "module": "tf.config",
    "fullName": "tf.config.get_soft_device_placement",
    "signature": "()",
    "description": "Return status of soft device placement flag."
  },
  "3772": {
    "name": "get_visible_devices",
    "module": "tf.config",
    "fullName": "tf.config.get_visible_devices",
    "signature": "(device_type=None)",
    "description": "Get the list of visible physical devices."
  },
  "3773": {
    "name": "list_logical_devices",
    "module": "tf.config",
    "fullName": "tf.config.list_logical_devices",
    "signature": "(device_type=None)",
    "description": "Return a list of logical devices created by runtime."
  },
  "3774": {
    "name": "list_physical_devices",
    "module": "tf.config",
    "fullName": "tf.config.list_physical_devices",
    "signature": "(device_type=None)",
    "description": "Return a list of physical devices visible to the host runtime."
  },
  "3775": {
    "name": "run_functions_eagerly",
    "module": "tf.config",
    "fullName": "tf.config.run_functions_eagerly",
    "signature": "(run_eagerly)",
    "description": "Enables / disables eager execution of `tf.function`s."
  },
  "3776": {
    "name": "set_logical_device_configuration",
    "module": "tf.config",
    "fullName": "tf.config.set_logical_device_configuration",
    "signature": "(device, logical_devices)",
    "description": "Set the logical device configuration for a `tf.config.PhysicalDevice`."
  },
  "3777": {
    "name": "set_soft_device_placement",
    "module": "tf.config",
    "fullName": "tf.config.set_soft_device_placement",
    "signature": "(enabled)",
    "description": "Enable or disable soft device placement."
  },
  "3778": {
    "name": "set_visible_devices",
    "module": "tf.config",
    "fullName": "tf.config.set_visible_devices",
    "signature": "(devices, device_type=None)",
    "description": "Set the list of visible devices."
  },
  "3779": {
    "name": "get_inter_op_parallelism_threads",
    "module": "tf.config.threading",
    "fullName": "tf.config.threading.get_inter_op_parallelism_threads",
    "signature": "()",
    "description": "Get number of threads used for parallelism between independent operations."
  },
  "3780": {
    "name": "get_intra_op_parallelism_threads",
    "module": "tf.config.threading",
    "fullName": "tf.config.threading.get_intra_op_parallelism_threads",
    "signature": "()",
    "description": "Get number of threads used within an individual op for parallelism."
  },
  "3781": {
    "name": "set_inter_op_parallelism_threads",
    "module": "tf.config.threading",
    "fullName": "tf.config.threading.set_inter_op_parallelism_threads",
    "signature": "(num_threads)",
    "description": "Set number of threads used for parallelism between independent operations."
  },
  "3782": {
    "name": "set_intra_op_parallelism_threads",
    "module": "tf.config.threading",
    "fullName": "tf.config.threading.set_intra_op_parallelism_threads",
    "signature": "(num_threads)",
    "description": "Set number of threads used within an individual op for parallelism."
  },
  "3783": {
    "name": "get_experimental_options",
    "module": "tf.config.optimizer",
    "fullName": "tf.config.optimizer.get_experimental_options",
    "signature": "()",
    "description": "Get experimental optimizer options."
  },
  "3784": {
    "name": "get_jit",
    "module": "tf.config.optimizer",
    "fullName": "tf.config.optimizer.get_jit",
    "signature": "() -> str",
    "description": "Returns JIT compilation configuration for code inside `tf.function`."
  },
  "3785": {
    "name": "set_experimental_options",
    "module": "tf.config.optimizer",
    "fullName": "tf.config.optimizer.set_experimental_options",
    "signature": "(options)",
    "description": "Set experimental optimizer options."
  },
  "3786": {
    "name": "ClusterDeviceFilters",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.ClusterDeviceFilters",
    "signature": "()",
    "description": "Represent a collection of device filters for the remote workers in cluster."
  },
  "3787": {
    "name": "VirtualDeviceConfiguration",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.VirtualDeviceConfiguration",
    "signature": "(memory_limit=None, experimental_priority=None, experimental_device_ordinal=0)",
    "description": "Configuration class for a logical devices."
  },
  "3788": {
    "name": "disable_mlir_bridge",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.disable_mlir_bridge",
    "signature": "()",
    "description": "Disables experimental MLIR-Based TensorFlow Compiler Bridge."
  },
  "3789": {
    "name": "disable_mlir_graph_optimization",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.disable_mlir_graph_optimization",
    "signature": "()",
    "description": "Disables experimental MLIR-Based TensorFlow Compiler Optimizations."
  },
  "3790": {
    "name": "enable_mlir_bridge",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.enable_mlir_bridge",
    "signature": "()",
    "description": "Enables experimental MLIR-Based TensorFlow Compiler Bridge."
  },
  "3791": {
    "name": "enable_mlir_graph_optimization",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.enable_mlir_graph_optimization",
    "signature": "()",
    "description": "Enables experimental MLIR-Based TensorFlow Compiler Optimizations."
  },
  "3792": {
    "name": "enable_op_determinism",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.enable_op_determinism",
    "signature": "()",
    "description": "Configures TensorFlow ops to run deterministically."
  },
  "3793": {
    "name": "enable_tensor_float_32_execution",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.enable_tensor_float_32_execution",
    "signature": "(enabled)",
    "description": "Enable or disable the use of TensorFloat-32 on supported hardware."
  },
  "3794": {
    "name": "get_device_details",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.get_device_details",
    "signature": "(device)",
    "description": "Returns details about a physical devices."
  },
  "3795": {
    "name": "get_device_policy",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.get_device_policy",
    "signature": "()",
    "description": "Gets the current device policy."
  },
  "3796": {
    "name": "get_memory_growth",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.get_memory_growth",
    "signature": "(device)",
    "description": "Get if memory growth is enabled for a `PhysicalDevice`."
  },
  "3797": {
    "name": "get_memory_info",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.get_memory_info",
    "signature": "(device)",
    "description": "Get memory info for the chosen device, as a dict."
  },
  "3798": {
    "name": "get_synchronous_execution",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.get_synchronous_execution",
    "signature": "()",
    "description": "Gets whether operations are executed synchronously or asynchronously."
  },
  "3799": {
    "name": "get_virtual_device_configuration",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.get_virtual_device_configuration",
    "signature": "(device)",
    "description": "Get the virtual device configuration for a `tf.config.PhysicalDevice`."
  },
  "3800": {
    "name": "get_visible_devices",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.get_visible_devices",
    "signature": "(device_type=None)",
    "description": "Get the list of visible physical devices."
  },
  "3801": {
    "name": "list_logical_devices",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.list_logical_devices",
    "signature": "(device_type=None)",
    "description": "Return a list of logical devices created by runtime."
  },
  "3802": {
    "name": "list_physical_devices",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.list_physical_devices",
    "signature": "(device_type=None)",
    "description": "Return a list of physical devices visible to the host runtime."
  },
  "3803": {
    "name": "reset_memory_stats",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.reset_memory_stats",
    "signature": "(device)",
    "description": "Resets the tracked memory stats for the chosen device."
  },
  "3804": {
    "name": "set_device_policy",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.set_device_policy",
    "signature": "(device_policy)",
    "description": "Sets the current thread device policy."
  },
  "3805": {
    "name": "set_memory_growth",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.set_memory_growth",
    "signature": "(device, enable)",
    "description": "Set if memory growth should be enabled for a `PhysicalDevice`."
  },
  "3806": {
    "name": "set_synchronous_execution",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.set_synchronous_execution",
    "signature": "(enable)",
    "description": "Specifies whether operations are executed synchronously or asynchronously."
  },
  "3807": {
    "name": "set_virtual_device_configuration",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.set_virtual_device_configuration",
    "signature": "(device, logical_devices)",
    "description": "Set the logical device configuration for a `tf.config.PhysicalDevice`."
  },
  "3808": {
    "name": "set_visible_devices",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.set_visible_devices",
    "signature": "(devices, device_type=None)",
    "description": "Set the list of visible devices."
  },
  "3809": {
    "name": "tensor_float_32_execution_enabled",
    "module": "tf.config.experimental",
    "fullName": "tf.config.experimental.tensor_float_32_execution_enabled",
    "signature": "()",
    "description": "Returns whether TensorFloat-32 is enabled."
  },
  "3810": {
    "name": "as_bytes",
    "module": "tf.compat",
    "fullName": "tf.compat.as_bytes",
    "signature": "(bytes_or_text, encoding='utf-8')",
    "description": "Converts `bytearray`, `bytes`, or unicode python input types to `bytes`."
  },
  "3811": {
    "name": "as_str",
    "module": "tf.compat",
    "fullName": "tf.compat.as_str",
    "signature": "(bytes_or_text, encoding='utf-8')",
    "description": "No description available."
  },
  "3812": {
    "name": "as_str_any",
    "module": "tf.compat",
    "fullName": "tf.compat.as_str_any",
    "signature": "(value)",
    "description": "Converts input to `str` type."
  },
  "3813": {
    "name": "as_text",
    "module": "tf.compat",
    "fullName": "tf.compat.as_text",
    "signature": "(bytes_or_text, encoding='utf-8')",
    "description": "Converts any string-like python input types to unicode."
  },
  "3814": {
    "name": "dimension_at_index",
    "module": "tf.compat",
    "fullName": "tf.compat.dimension_at_index",
    "signature": "(shape, index)",
    "description": "Compatibility utility required to allow for both V1 and V2 behavior in TF."
  },
  "3815": {
    "name": "dimension_value",
    "module": "tf.compat",
    "fullName": "tf.compat.dimension_value",
    "signature": "(dimension)",
    "description": "Compatibility utility required to allow for both V1 and V2 behavior in TF."
  },
  "3816": {
    "name": "forward_compatibility_horizon",
    "module": "tf.compat",
    "fullName": "tf.compat.forward_compatibility_horizon",
    "signature": "(year, month, day)",
    "description": "Context manager for testing forward compatibility of generated graphs."
  },
  "3817": {
    "name": "forward_compatible",
    "module": "tf.compat",
    "fullName": "tf.compat.forward_compatible",
    "signature": "(year, month, day)",
    "description": "Return true if the forward compatibility window has expired."
  },
  "3818": {
    "name": "path_to_str",
    "module": "tf.compat",
    "fullName": "tf.compat.path_to_str",
    "signature": "(path)",
    "description": "Converts input which is a `PathLike` object to `str` type."
  },
  "3819": {
    "name": "bitwise_and",
    "module": "tf.bitwise",
    "fullName": "tf.bitwise.bitwise_and",
    "signature": "(x, y, name=None)",
    "description": "Elementwise computes the bitwise AND of `x` and `y`."
  },
  "3820": {
    "name": "bitwise_or",
    "module": "tf.bitwise",
    "fullName": "tf.bitwise.bitwise_or",
    "signature": "(x, y, name=None)",
    "description": "Elementwise computes the bitwise OR of `x` and `y`."
  },
  "3821": {
    "name": "bitwise_xor",
    "module": "tf.bitwise",
    "fullName": "tf.bitwise.bitwise_xor",
    "signature": "(x, y, name=None)",
    "description": "Elementwise computes the bitwise XOR of `x` and `y`."
  },
  "3822": {
    "name": "invert",
    "module": "tf.bitwise",
    "fullName": "tf.bitwise.invert",
    "signature": "(x, name=None)",
    "description": "Invert (flip) each bit of supported types; for example, type `uint8` value 01010101 becomes 10101010."
  },
  "3823": {
    "name": "left_shift",
    "module": "tf.bitwise",
    "fullName": "tf.bitwise.left_shift",
    "signature": "(x, y, name=None)",
    "description": "Elementwise computes the bitwise left-shift of `x` and `y`."
  },
  "3824": {
    "name": "right_shift",
    "module": "tf.bitwise",
    "fullName": "tf.bitwise.right_shift",
    "signature": "(x, y, name=None)",
    "description": "Elementwise computes the bitwise right-shift of `x` and `y`."
  },
  "3825": {
    "name": "set_verbosity",
    "module": "tf.autograph",
    "fullName": "tf.autograph.set_verbosity",
    "signature": "(level, alsologtostdout=False)",
    "description": "Sets the AutoGraph verbosity level."
  },
  "3826": {
    "name": "to_code",
    "module": "tf.autograph",
    "fullName": "tf.autograph.to_code",
    "signature": "(entity, recursive=True, experimental_optional_features=None)",
    "description": "Returns the source code generated by AutoGraph, as a string."
  },
  "3827": {
    "name": "to_graph",
    "module": "tf.autograph",
    "fullName": "tf.autograph.to_graph",
    "signature": "(entity, recursive=True, experimental_optional_features=None)",
    "description": "Converts a Python entity into a TensorFlow graph."
  },
  "3828": {
    "name": "trace",
    "module": "tf.autograph",
    "fullName": "tf.autograph.trace",
    "signature": "(*args)",
    "description": "Traces argument information at compilation time."
  },
  "3829": {
    "name": "Feature",
    "module": "tf.autograph.experimental",
    "fullName": "tf.autograph.experimental.Feature",
    "signature": "(value, names=None, *, module=None, qualname=None, type=None, start=1)",
    "description": "This enumeration represents optional conversion options."
  },
  "3830": {
    "name": "do_not_convert",
    "module": "tf.autograph.experimental",
    "fullName": "tf.autograph.experimental.do_not_convert",
    "signature": "(func=None)",
    "description": "Decorator that suppresses the conversion of a function."
  },
  "3831": {
    "name": "set_loop_options",
    "module": "tf.autograph.experimental",
    "fullName": "tf.autograph.experimental.set_loop_options",
    "signature": "(parallel_iterations=<object object at 0x7ff56ccf92c0>, swap_memory=<object object at 0x7ff56ccf92c0>, maximum_iterations=<object object at 0x7ff56ccf92c0>, shape_invariants=<object object at 0x7ff56ccf92c0>)",
    "description": "Specifies additional arguments to be passed to the enclosing while_loop."
  },
  "3832": {
    "name": "ForwardAccumulator",
    "module": "tf.autodiff",
    "fullName": "tf.autodiff.ForwardAccumulator",
    "signature": "(primals, tangents)",
    "description": "Computes Jacobian-vector products (\"JVP\"s) using forward-mode autodiff."
  },
  "3833": {
    "name": "GradientTape",
    "module": "tf.autodiff",
    "fullName": "tf.autodiff.GradientTape",
    "signature": "(persistent=False, watch_accessed_variables=True)",
    "description": "Record operations for automatic differentiation."
  },
  "3834": {
    "name": "decode_wav",
    "module": "tf.audio",
    "fullName": "tf.audio.decode_wav",
    "signature": "(contents, desired_channels=-1, desired_samples=-1, name=None)",
    "description": "Decode a 16-bit PCM WAV file to a float tensor."
  },
  "3835": {
    "name": "encode_wav",
    "module": "tf.audio",
    "fullName": "tf.audio.encode_wav",
    "signature": "(audio, sample_rate, name=None)",
    "description": "Encode audio data using the WAV file format."
  }
}